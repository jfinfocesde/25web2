{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenida al subm\u00f3dulo WEB II","text":"<p>\u00a1Bienvenidos al subm\u00f3dulo WEB II! En este curso, exploraremos los fundamentos avanzados del desarrollo web con React, una de las bibliotecas m\u00e1s populares para construir interfaces de usuario modernas, din\u00e1micas y escalables. Este m\u00f3dulo est\u00e1 dise\u00f1ado para llevar tus habilidades al siguiente nivel, desde la configuraci\u00f3n inicial de un proyecto hasta la creaci\u00f3n de una aplicaci\u00f3n web de p\u00e1gina \u00fanica (SPA) completamente funcional.</p>"},{"location":"#que-aprenderas","title":"\u00bfQu\u00e9 aprender\u00e1s?","text":"<p>A lo largo del curso, dominar\u00e1s conceptos clave como:</p> <ul> <li>Configuraci\u00f3n y estructura de proyectos React.</li> <li>Creaci\u00f3n y manejo de componentes funcionales.</li> <li>Gesti\u00f3n de estado local y global con hooks como <code>useState</code>, <code>useEffect</code> y <code>useContext</code>.</li> <li>Implementaci\u00f3n de rutas din\u00e1micas con React Router DOM.</li> <li>Consumo de APIs con <code>fetch</code> y <code>axios</code> para integrar datos externos.</li> <li>Pruebas unitarias con Jest para garantizar la calidad del c\u00f3digo.</li> <li>Buenas pr\u00e1cticas para organizar, modularizar y escalar aplicaciones.</li> </ul>"},{"location":"#estructura-del-curso","title":"Estructura del curso","text":"<p>El m\u00f3dulo est\u00e1 dividido en tres momentos clave:</p> <ol> <li>Primer Momento: Construcci\u00f3n de la base del proyecto, componentes y organizaci\u00f3n.</li> <li>Segundo Momento: Integraci\u00f3n de rutas, props y hooks para aplicaciones interactivas.</li> <li>Tercer Momento: Desarrollo de una SPA funcional con consumo de APIs y pruebas.</li> </ol> <p>Cada etapa incluye pr\u00e1cticas, talleres y entregables que te permitir\u00e1n consolidar tus conocimientos y aplicar lo aprendido en un proyecto final.</p>"},{"location":"#que-necesitas","title":"\u00bfQu\u00e9 necesitas?","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML, CSS y JavaScript.</li> <li>Familiaridad con conceptos de React (recomendable, pero no obligatorio).</li> <li>Entusiasmo por aprender y desarrollar aplicaciones web modernas.</li> </ul> <p>\u00a1Prep\u00e1rate para un viaje emocionante en el desarrollo front-end! Este curso te equipar\u00e1 con las herramientas y habilidades necesarias para crear aplicaciones web robustas y profesionales. \u00a1Empecemos!</p>"},{"location":"activities/p1/","title":"Semana 5 - Actividad: Fork del Repositorio para el Proyecto Integrador","text":""},{"location":"activities/p1/#objetivo","title":"Objetivo","text":"<p>Iniciar el Proyecto Integrador realizando un fork del repositorio original por parte del l\u00edder del grupo, seguido por los forks de los dem\u00e1s integrantes desde el repositorio del l\u00edder, configurando el archivo <code>info.json</code>, completando el tutorial de estructuraci\u00f3n de un proyecto API REST en Spring Boot por parte del l\u00edder con ayuda del equipo, y sincronizando los forks de los integrantes con los cambios del l\u00edder.</p>"},{"location":"activities/p1/#instrucciones-para-el-lider-del-grupo","title":"Instrucciones para el L\u00edder del Grupo","text":"<ol> <li> <p>Fork del Repositorio Original </p> <ul> <li>Responsable: Solo el l\u00edder del grupo debe realizar esta acci\u00f3n.  </li> <li>Accede al repositorio oficial en: https://github.com/jfinfocesde/pi_web2.git.  </li> <li>Haz clic en el bot\u00f3n Fork en la parte superior derecha de la p\u00e1gina de GitHub.  </li> <li>Selecciona tu cuenta personal como destino del fork. Esto crear\u00e1 una copia del repositorio en tu cuenta de GitHub (por ejemplo, <code>https://github.com/LIDER_USUARIO/pi_web2.git</code>).</li> </ul> </li> <li> <p>Clonar el Repositorio </p> <ul> <li>Clona tu repositorio forkeado a tu m\u00e1quina local utilizando el comando: <pre><code>git clone https://github.com/LIDER_USUARIO/pi_web2.git\n</code></pre>     Reemplaza <code>LIDER_USUARIO</code> con tu nombre de usuario de GitHub.</li> </ul> </li> <li> <p>Editar el archivo <code>info.json</code> </p> <ul> <li>Abre el archivo <code>info.json</code> ubicado en la ra\u00edz del repositorio clonado.  </li> <li>Completa el archivo con los datos del l\u00edder y el n\u00famero de grupo, siguiendo este formato: <pre><code>{\n    \"identificacion\": \"ID_DEL_LIDER\",\n    \"nombres\": \"NOMBRES_DEL_LIDER\",\n    \"apellidos\": \"APELLIDOS_DEL_LIDER\",\n    \"grupo\": \"b2-sabado-#\"\n}\n</code></pre>     Por ejemplo, para el l\u00edder Juan P\u00e9rez con identificaci\u00f3n 123456 y grupo 5: <pre><code>{\n    \"identificacion\": \"123456\",\n    \"nombres\": \"Juan\",\n    \"apellidos\": \"P\u00e9rez\",\n    \"grupo\": \"b2-sabado-5\"\n}\n</code></pre></li> <li>Aseg\u00farate de reemplazar <code>#</code> con el n\u00famero de grupo asignado.</li> </ul> </li> <li> <p>Confirmar y Subir Cambios del <code>info.json</code> </p> <ul> <li>Guarda los cambios en el archivo <code>info.json</code>.  </li> <li>Realiza un commit con los cambios: <pre><code>git add info.json\ngit commit -m \"Actualizaci\u00f3n de info.json con datos del l\u00edder y grupo\"\ngit push origin main\n</code></pre></li> </ul> </li> <li> <p>Compartir el Repositorio </p> <ul> <li>Comparte el enlace de tu repositorio forkeado (<code>https://github.com/LIDER_USUARIO/pi_web2</code>) con los dem\u00e1s miembros del grupo para que realicen sus forks.</li> </ul> </li> </ol>"},{"location":"activities/p1/#instrucciones-para-los-demas-integrantes-del-grupo","title":"Instrucciones para los Dem\u00e1s Integrantes del Grupo","text":"<ol> <li> <p>Fork del Repositorio del L\u00edder </p> <ul> <li>Accede al repositorio forkeado por el l\u00edder del grupo (por ejemplo, <code>https://github.com/LIDER_USUARIO/pi_web2</code>).  </li> <li>Haz clic en el bot\u00f3n Fork en la parte superior derecha de la p\u00e1gina de GitHub.  </li> <li>Selecciona tu cuenta personal como destino del fork. Esto crear\u00e1 una copia del repositorio del l\u00edder en tu cuenta de GitHub (por ejemplo, <code>https://github.com/TU_USUARIO/pi_web2</code>).</li> </ul> </li> <li> <p>Clonar el Repositorio </p> <ul> <li>Clona tu repositorio forkeado a tu m\u00e1quina local utilizando el comando: <pre><code>git clone https://github.com/TU_USUARIO/pi_backend2.git\n</code></pre>     Reemplaza <code>TU_USUARIO</code> con tu nombre de usuario de GitHub.</li> </ul> </li> <li> <p>Verificar el archivo <code>info.json</code> </p> <ul> <li>Abre el archivo <code>info.json</code> ubicado en la ra\u00edz del repositorio clonado.  </li> <li>Verifica que el archivo contenga los datos correctos del l\u00edder y el grupo, como los configur\u00f3 el l\u00edder. Por ejemplo: <pre><code>{\n    \"identificacion\": \"123456\",\n    \"nombres\": \"Juan\",\n    \"apellidos\": \"P\u00e9rez\",\n    \"grupo\": \"b2-sabado-5\"\n}\n</code></pre></li> <li>Nota: No modifiques el archivo <code>info.json</code> a menos que el l\u00edder indique que necesitas corregir algo espec\u00edfico.</li> </ul> </li> <li> <p>Confirmar y Subir Cambios (si aplica) </p> <ul> <li>Si realizas cambios adicionales en el proyecto (por ejemplo, tareas asignadas por el l\u00edder), haz un commit: <pre><code>git add .\ngit commit -m \"Descripci\u00f3n de los cambios realizados\"\ngit push origin main\n</code></pre></li> </ul> </li> <li> <p>Crear un Pull Request al Repositorio del L\u00edder </p> <ul> <li>Una vez que hayas realizado cambios, ve a tu repositorio en GitHub (<code>TU_USUARIO/pi_web2</code>).  </li> <li>Haz clic en Contribute o New Pull Request.  </li> <li>Selecciona el repositorio del l\u00edder (<code>LIDER_USUARIO/pi_web2</code>) como destino del pull request.  </li> <li>Describe los cambios realizados en el pull request y env\u00edalo.  </li> <li>El l\u00edder revisar\u00e1 y, si es correcto, aceptar\u00e1 los cambios para integrarlos en su repositorio.</li> </ul> </li> </ol>"},{"location":"activities/p1/#notas-importantes","title":"Notas Importantes","text":"<ul> <li>L\u00edder: Solo el l\u00edder realiza el fork del repositorio original (<code>jfinfocesde/pi_web2</code>) y configura el archivo <code>info.json</code> con sus datos y el n\u00famero de grupo. El l\u00edder, con la ayuda del equipo, completa el tutorial de Spring Boot en su repositorio.</li> <li>Integrantes: Cada integrante (excepto el l\u00edder) debe realizar un fork del repositorio del l\u00edder, no del repositorio original.  </li> <li>Aseg\u00farate de que el n\u00famero de grupo y los datos del l\u00edder en <code>info.json</code> sean correctos y no los modifiques a menos que se indique lo contrario.</li> <li>Los pull requests deben enviarse al repositorio del l\u00edder (<code>LIDER_USUARIO/pi_web2</code>), no al repositorio original.</li> <li>Comun\u00edcate con el l\u00edder para coordinar las tareas y garantizar que los cambios enviados sean relevantes para el proyecto.</li> <li>Sincroniza tu fork con el repositorio del l\u00edder despu\u00e9s de que se complete el tutorial para asegurarte de tener la estructura inicial del proyecto API REST.</li> <li>Si encuentras conflictos al enviar un pull request o sincronizar, resu\u00e9lvelos localmente o consulta con el l\u00edder.</li> </ul>"},{"location":"activities/p2/","title":"Semana 8 - Actividad: Enrutamiento en Next.js 13+ (App Router)","text":""},{"location":"activities/p2/#instrucciones-iniciales","title":"Instrucciones Iniciales","text":""},{"location":"activities/p2/#fork-del-repositorio","title":"Fork del Repositorio","text":"<p>Antes de comenzar la actividad, debes realizar fork del repositorio donde trabajar\u00e1s:</p> <ol> <li> <p>Accede al repositorio base:</p> <ul> <li>Navega a: <code>https://github.com/jfinfocesde/act_web2_s8.git</code></li> <li>Examina la estructura del proyecto</li> <li>Lee el archivo README.md</li> </ul> </li> <li> <p>Realiza el Fork:</p> <ul> <li>Haz clic en el bot\u00f3n \"Fork\" en la esquina superior derecha</li> <li>Selecciona tu cuenta personal como destino</li> <li>Espera a que se complete el proceso</li> </ul> </li> <li> <p>Clona tu fork localmente: <pre><code>git clone https://github.com/TU_USUARIO/act_web2_s8.git\ncd act_web2_s8\nnpm install\n</code></pre></p> </li> <li> <p>Verifica que el proyecto funciona: <pre><code>npm run dev\n</code></pre></p> </li> <li>Abre tu navegador en <code>http://localhost:3000</code></li> </ol>"},{"location":"activities/p2/#objetivo","title":"Objetivo","text":"<p>Aprender a implementar y manejar el sistema de enrutamiento en Next.js 13+ utilizando el App Router, creando rutas b\u00e1sicas, din\u00e1micas, layouts y navegaci\u00f3n.</p>"},{"location":"activities/p2/#parte-1-estructura-basica-del-app-router","title":"Parte 1: Estructura B\u00e1sica del App Router","text":""},{"location":"activities/p2/#ejercicio-11-crear-la-pagina-de-inicio","title":"Ejercicio 1.1: Crear la P\u00e1gina de Inicio","text":"<ol> <li> <p>Crear el layout ra\u00edz:</p> <ul> <li>Crea el archivo <code>app/layout.js</code></li> <li>Implementa un layout que incluya:<ul> <li>Estructura HTML b\u00e1sica con <code>&lt;html&gt;</code> y <code>&lt;body&gt;</code></li> <li>Navegaci\u00f3n simple con enlaces: Inicio, Productos, Blog, Contacto</li> <li>Usar componente <code>Link</code> de Next.js para todos los enlaces    </li> </ul> </li> </ul> </li> <li> <p>P\u00e1gina de inicio (<code>app/page.js</code>):</p> <ul> <li>T\u00edtulo: \"P\u00e1gina de Inicio\"</li> <li>P\u00e1rrafo de bienvenida simple</li> <li>Enlaces a las dem\u00e1s secciones usando componente <code>Link</code></li> </ul> </li> </ol>"},{"location":"activities/p2/#ejercicio-12-crear-rutas-basicas","title":"Ejercicio 1.2: Crear Rutas B\u00e1sicas","text":"<ol> <li> <p>P\u00e1gina de Productos (<code>app/productos/page.js</code>):</p> <ul> <li>T\u00edtulo: \"Productos\"</li> <li>Lista simple de 3 productos: Laptop, Smartphone, Tablet</li> <li>Cada producto como enlace a su p\u00e1gina individual usando <code>Link</code></li> </ul> </li> <li> <p>P\u00e1gina de Blog (<code>app/blog/page.js</code>):</p> <ul> <li>T\u00edtulo: \"Blog\"</li> <li>Lista de 3 art\u00edculos con t\u00edtulos simples</li> <li>Cada art\u00edculo como enlace a su p\u00e1gina individual usando <code>Link</code></li> </ul> </li> <li> <p>P\u00e1gina de Contacto (<code>app/contacto/page.js</code>):</p> <ul> <li>T\u00edtulo: \"Contacto\"</li> <li>Informaci\u00f3n b\u00e1sica de contacto (texto simple)</li> <li>Sin formularios complejos</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-2-layouts-anidados","title":"Parte 2: Layouts Anidados","text":""},{"location":"activities/p2/#ejercicio-21-layout-para-productos","title":"Ejercicio 2.1: Layout para Productos","text":"<ol> <li> <p>Layout de productos (<code>app/productos/layout.js</code>):</p> <ul> <li>T\u00edtulo: \"Secci\u00f3n de Productos\"</li> <li>Navegaci\u00f3n secundaria simple con enlaces a categor\u00edas</li> <li>\u00c1rea para el contenido ({children})</li> </ul> </li> <li> <p>P\u00e1ginas de categor\u00edas:</p> <ul> <li><code>app/productos/electronicos/page.js</code>: mostrar 3 productos electr\u00f3nicos espec\u00edficos</li> <li><code>app/productos/ropa/page.js</code>: mostrar 3 productos de ropa espec\u00edficos</li> <li>Cada p\u00e1gina debe tener t\u00edtulo \"Productos &gt; [Categor\u00eda]\"</li> <li>Mostrar contador: \"X productos encontrados\"</li> </ul> </li> </ol>"},{"location":"activities/p2/#ejercicio-22-layout-para-blog","title":"Ejercicio 2.2: Layout para Blog","text":"<ol> <li> <p>Layout de blog (<code>app/blog/layout.js</code>):</p> <ul> <li>T\u00edtulo: \"Secci\u00f3n de Blog\"</li> <li>Navegaci\u00f3n secundaria simple</li> <li>\u00c1rea para el contenido ({children})</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-3-rutas-dinamicas","title":"Parte 3: Rutas Din\u00e1micas","text":""},{"location":"activities/p2/#ejercicio-31-paginas-de-producto-individual","title":"Ejercicio 3.1: P\u00e1ginas de Producto Individual","text":"<ol> <li> <p>Crear ruta din\u00e1mica:</p> <ul> <li>Crea <code>app/productos/[id]/page.js</code></li> <li>El componente debe:<ul> <li>Recibir el par\u00e1metro <code>id</code> desde <code>params</code></li> <li>Mostrar t\u00edtulo: \"Producto: [id]\"</li> <li>Descripci\u00f3n simple del producto</li> <li>Enlace para volver a la lista de productos</li> </ul> </li> </ul> </li> <li> <p>Enlaces din\u00e1micos en la p\u00e1gina de productos:</p> <ul> <li>Modifica <code>app/productos/page.js</code> para que cada producto sea clickeable</li> <li>Usar componente <code>Link</code> de Next.js para navegaci\u00f3n</li> <li>IDs espec\u00edficos a usar: \"1\", \"2\", \"3\"</li> <li>El enlace debe mostrar el nombre del producto como texto</li> </ul> </li> </ol>"},{"location":"activities/p2/#ejercicio-32-articulos-de-blog-dinamicos","title":"Ejercicio 3.2: Art\u00edculos de Blog Din\u00e1micos","text":"<ol> <li> <p>P\u00e1gina de art\u00edculo individual (<code>app/blog/[slug]/page.js</code>):</p> <ul> <li>Debe recibir y usar el par\u00e1metro <code>params.slug</code></li> <li>Mostrar t\u00edtulo: \"Art\u00edculo: [slug]\"</li> <li>Contenido simple del art\u00edculo</li> <li>Enlace para volver a la lista de art\u00edculos</li> </ul> </li> <li> <p>Enlaces a art\u00edculos desde la p\u00e1gina principal:</p> <ul> <li>Modifica <code>app/blog/page.js</code> para que cada art\u00edculo sea clickeable</li> <li>Slugs espec\u00edficos a usar: \"introduccion-nextjs\", \"react-server-components\", \"app-router-guia\"</li> <li>Usar componente <code>Link</code> para navegaci\u00f3n</li> </ul> </li> </ol>"},{"location":"activities/p2/#parte-4-rutas-de-captura-total","title":"Parte 4: Rutas de Captura Total","text":""},{"location":"activities/p2/#ejercicio-41-sistema-de-documentacion","title":"Ejercicio 4.1: Sistema de Documentaci\u00f3n","text":"<ol> <li> <p>Ruta catch-all (<code>app/docs/[...slug]/page.js</code>):</p> <ul> <li>Debe manejar el par\u00e1metro <code>params.slug</code> como array</li> <li>Mostrar los segmentos capturados en la p\u00e1gina</li> <li>T\u00edtulo: \"Documentaci\u00f3n: [segmentos]\"</li> <li>Rutas de ejemplo: <code>/docs/guia/instalacion</code>, <code>/docs/api/componentes</code></li> </ul> </li> <li> <p>Sistema de breadcrumbs:</p> <ul> <li>Mostrar navegaci\u00f3n: \"Docs &gt; Secci\u00f3n1 &gt; Secci\u00f3n2 &gt; ...\"</li> <li>Formato simple con separador \" &gt; \"</li> <li>Solo mostrar texto, sin enlaces complejos</li> </ul> </li> </ol> <p>Especificaciones para la p\u00e1gina de documentaci\u00f3n:</p> <ul> <li>Debe manejar el par\u00e1metro <code>params.slug</code> como array</li> <li>Crear breadcrumbs simples: \"Docs &gt; Secci\u00f3n1 &gt; Secci\u00f3n2 &gt; ...\"</li> <li>Mostrar contenido b\u00e1sico basado en la ruta</li> <li>Incluir t\u00edtulo principal que refleje la secci\u00f3n actual</li> <li>Manejar el caso cuando slug est\u00e1 vac\u00edo (p\u00e1gina principal de docs)</li> </ul>"},{"location":"content/p1/","title":"Semana 1 - Pacto pedag\u00f3gico","text":"<p>El pacto pedag\u00f3gico es un acuerdo que se establece entre el docente y los estudiantes al inicio de un curso, con el fin de establecer las normas, expectativas, responsabilidades y compromisos de todas las partes involucradas en el proceso de ense\u00f1anza-aprendizaje.</p> <p>Tu navegador no admite la visualizaci\u00f3n de PDFs. Puedes descargarlo aqu\u00ed:      Descargar PDF.</p>"},{"location":"content/p1/#introduccion-a-react-y-configuracion-del-entorno","title":"Introducci\u00f3n a React y Configuraci\u00f3n del Entorno","text":""},{"location":"content/p1/#bienvenidoa-al-mundo-de-react","title":"\u00a1Bienvenido/a al mundo de React!","text":"<p>En esta primera clase, sentaremos las bases para tu viaje con React. Entenderemos qu\u00e9 es esta poderosa biblioteca, por qu\u00e9 es tan popular, y daremos los primeros pasos pr\u00e1cticos configurando nuestro entorno de desarrollo y creando nuestra primera (muy simple) aplicaci\u00f3n React.</p>"},{"location":"content/p1/#fundamentos-teoricos-y-contexto","title":"Fundamentos Te\u00f3ricos y Contexto","text":""},{"location":"content/p1/#que-es-react","title":"\u00bfQu\u00e9 es React?","text":"<ul> <li>React es una biblioteca (library) de JavaScript de c\u00f3digo abierto, creada y mantenida por Meta (Facebook) y una gran comunidad.</li> <li>Su objetivo principal es ayudarte a construir interfaces de usuario (UIs) de forma eficiente, especialmente para aplicaciones web complejas e interactivas.</li> <li>La idea central de React es dividir la interfaz en peque\u00f1as piezas reutilizables llamadas componentes. Piensa en ellos como bloques de LEGO: cada uno tiene su propia l\u00f3gica y apariencia, y los combinas para crear interfaces completas.</li> </ul>"},{"location":"content/p1/#por-que-usar-react-principales-beneficios","title":"\u00bfPor Qu\u00e9 Usar React? Principales Beneficios","text":"<ul> <li>Declarativo: En lugar de decirle al navegador c\u00f3mo actualizar la pantalla paso a paso (imperativo), le dices a React qu\u00e9 quieres mostrar basado en los datos actuales (el estado). React se encarga de hacer los cambios necesarios de manera eficiente. Esto hace el c\u00f3digo m\u00e1s predecible y f\u00e1cil de depurar.</li> <li>Basado en Componentes: Facilita la reutilizaci\u00f3n de c\u00f3digo (escribes un componente una vez y lo usas muchas veces), mejora la organizaci\u00f3n del proyecto y simplifica las pruebas.</li> <li>Rendimiento (Gracias al Virtual DOM):<ul> <li>React usa una copia virtual de la estructura de tu UI en memoria (el \"Virtual DOM\").</li> <li>Cuando los datos cambian, React compara la nueva versi\u00f3n del Virtual DOM con la anterior.</li> <li>Luego, calcula la forma m\u00e1s eficiente de actualizar el DOM real del navegador, minimizando operaciones costosas y haciendo que tu aplicaci\u00f3n se sienta m\u00e1s r\u00e1pida. No necesitas interactuar directamente con el Virtual DOM, \u00a1React lo maneja por ti!</li> </ul> </li> <li>Gran Ecosistema y Comunidad: Hay much\u00edsimas herramientas, librer\u00edas adicionales, tutoriales y una comunidad activa dispuesta a ayudar. Esto tambi\u00e9n significa que hay muchas oportunidades laborales para desarrolladores React.</li> </ul>"},{"location":"content/p1/#conceptos-clave-iniciales","title":"Conceptos Clave Iniciales","text":"<ul> <li>SPA (Single Page Application): Aplicaciones que cargan una sola p\u00e1gina HTML y luego actualizan el contenido din\u00e1micamente usando JavaScript, sin necesidad de recargar toda la p\u00e1gina al navegar. React es excelente para construir SPAs, lo que resulta en una experiencia de usuario m\u00e1s fluida. Contrasta con las MPAs (Multi-Page Applications) tradicionales, donde cada cambio de p\u00e1gina implica una recarga completa desde el servidor.</li> <li>Virtual DOM: (Repaso) Es la representaci\u00f3n interna que React usa para optimizar las actualizaciones del DOM real del navegador.</li> </ul>"},{"location":"content/p1/#alternativas-a-react","title":"Alternativas a React","text":"<p>Existen otros frameworks y bibliotecas populares para construir UIs:</p> <ul> <li>Angular: Un framework completo de Google, usa TypeScript y tiene una estructura m\u00e1s definida (\"opinionado\").</li> <li>Vue.js: Un framework progresivo, conocido por su facilidad de aprendizaje y excelente documentaci\u00f3n.</li> <li>Svelte: Un enfoque diferente; es un compilador que escribe JavaScript eficiente y desaparece en tiempo de ejecuci\u00f3n.</li> </ul> <p>No hay una opci\u00f3n \"mejor\" universalmente; la elecci\u00f3n depende del proyecto. React destaca por su flexibilidad, enfoque en componentes y gran ecosistema.</p>"},{"location":"content/p1/#prerrequisitos","title":"Prerrequisitos","text":"<p>Para seguir este curso, necesitas conocimientos s\u00f3lidos de:</p> <ul> <li>HTML y CSS: Fundamentales para estructurar y estilizar p\u00e1ginas web.</li> <li>JavaScript (Moderno - ES6+): \u00a1Esencial! Necesitas entender:<ul> <li>Variables: <code>let</code>, <code>const</code></li> <li>Funciones Flecha: <code>=&gt;</code></li> <li>M\u00e9todos de Array: <code>.map()</code>, <code>.filter()</code> (\u00a1<code>map</code> es crucial!)</li> <li>M\u00f3dulos: <code>import</code>/<code>export</code></li> <li>(Idealmente) Promesas, <code>async/await</code> (los usaremos m\u00e1s adelante).</li> </ul> </li> <li> <p>Node.js y npm:</p> <ul> <li>Node.js: Entorno para ejecutar JavaScript fuera del navegador. Lo necesitamos para las herramientas de desarrollo de React.</li> <li>npm (Node Package Manager): Gestor de paquetes que viene con Node.js. Lo usaremos para instalar React y otras librer\u00edas (dependencias).</li> </ul> </li> <li> <p>Un Editor de C\u00f3digo: VS Code es muy recomendado por sus extensiones \u00fatiles para React/JavaScript, pero puedes usar Sublime Text, Atom, WebStorm, etc.</p> </li> </ul>"},{"location":"content/p1/#instalacion-de-nodejs-y-npm","title":"Instalaci\u00f3n de Node.js y npm","text":"<ol> <li>Ve a https://nodejs.org/.</li> <li>Descarga e instala la versi\u00f3n LTS (Long Term Support) \u2013 es la m\u00e1s estable. Sigue los pasos del instalador.</li> <li>Abre tu terminal (Terminal en Mac/Linux, CMD/PowerShell/Git Bash en Windows).</li> <li>Verifica la instalaci\u00f3n ejecutando estos comandos (deber\u00edan mostrarte n\u00fameros de versi\u00f3n):     <pre><code>node -v\nnpm -v\n</code></pre>     Si ves las versiones, \u00a1est\u00e1s listo! Si tienes problemas, pide ayuda.</li> </ol>"},{"location":"content/p1/#creando-proyecto-react-con-vite","title":"Creando Proyecto React con Vite","text":""},{"location":"content/p1/#explicacion-paso-a-paso","title":"Explicaci\u00f3n paso a paso","text":"<ol> <li>Requisitos previos:</li> <li>Aseg\u00farate de tener Node.js instalado (versi\u00f3n 14.18+ o superior). Puedes verificarlo con:      <pre><code>node -v\n</code></pre></li> <li> <p>Tener un gestor de paquetes como npm (viene con Node.js) o pnpm (opcional, m\u00e1s r\u00e1pido).</p> </li> <li> <p>Crear un proyecto con Vite:    Vite ofrece plantillas preconfiguradas para React. Usa el siguiente comando para iniciar un proyecto:</p> </li> </ol> <pre><code>npm create vite@latest\n</code></pre> <ul> <li>Esto inicia un asistente interactivo.</li> <li>Nombre del proyecto: Ingresa un nombre (ejemplo: <code>mi-proyecto-react</code>).</li> <li>Framework: Selecciona <code>React</code>.</li> <li>Variante: Elige <code>JavaScript</code> o <code>TypeScript</code> (para este ejemplo, usaremos JavaScript).</li> </ul> <p>Alternativamente, puedes usar un solo comando para evitar el asistente:    <pre><code>npm create vite@latest mi-proyecto-react -- --template react\n</code></pre></p> <ol> <li> <p>Navegar al directorio del proyecto:    <pre><code>cd mi-proyecto-react\n</code></pre></p> </li> <li> <p>Instalar dependencias:    <pre><code>npm install\n</code></pre></p> </li> <li> <p>Iniciar el servidor de desarrollo:    <pre><code>npm run dev\n</code></pre></p> </li> <li>Esto inicia un servidor local (generalmente en <code>http://localhost:5173</code>).</li> <li> <p>Abre la URL en tu navegador para ver la aplicaci\u00f3n React predeterminada.</p> </li> <li> <p>Estructura del proyecto:    Una vez creado, el proyecto tendr\u00e1 una estructura similar a esta:    <pre><code>mi-proyecto-react/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 vite.svg\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 assets/\n\u2502   \u251c\u2500\u2500 App.jsx\n\u2502   \u251c\u2500\u2500 main.jsx\n\u2502   \u251c\u2500\u2500 App.css\n\u2502   \u2514\u2500\u2500 index.css\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 index.html\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 vite.config.js\n</code></pre></p> </li> <li><code>src/main.jsx</code>: Punto de entrada que renderiza la aplicaci\u00f3n.</li> <li><code>src/App.jsx</code>: Componente principal de React.</li> <li> <p><code>vite.config.js</code>: Configuraci\u00f3n de Vite.</p> </li> <li> <p>Personalizar el proyecto:    Edita <code>src/App.jsx</code> para agregar tu propio c\u00f3digo. Por ejemplo, reemplaza su contenido con:</p> </li> </ol> <pre><code>import { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;div className=\"App\"&gt;\n      &lt;h1&gt;Contador con React y Vite&lt;/h1&gt;\n      &lt;p&gt;Has hecho clic {count} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <ul> <li>Este c\u00f3digo crea un contador simple que incrementa un valor al hacer clic en un bot\u00f3n.</li> <li> <p>El servidor de Vite recargar\u00e1 autom\u00e1ticamente los cambios en el navegador.</p> </li> <li> <p>Construir para producci\u00f3n:    Cuando est\u00e9s listo para desplegar, genera una versi\u00f3n optimizada:    <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Los archivos optimizados estar\u00e1n en la carpeta <code>dist/</code>.</p> </li> <li> <p>Previsualizar la build:    Para verificar la versi\u00f3n de producci\u00f3n localmente:    <pre><code>npm run preview\n</code></pre></p> </li> </ul>"},{"location":"content/p1/#ejemplo-completo","title":"Ejemplo completo","text":"<p>Supongamos que quieres crear un proyecto llamado <code>contador-app</code>. Ejecuta:</p> <pre><code>npm create vite@latest contador-app -- --template react\ncd contador-app\nnpm install\nnpm run dev\n</code></pre> <p>Luego, edita <code>src/App.jsx</code> con el c\u00f3digo del contador mostrado arriba. Abre <code>http://localhost:5173</code> en tu navegador y ver\u00e1s un contador funcional.</p>"},{"location":"content/p1/#url-oficial-de-vite","title":"URL oficial de Vite","text":"<p>La documentaci\u00f3n y recursos oficiales est\u00e1n disponibles en:</p> <ul> <li>https://vitejs.dev/</li> </ul>"},{"location":"content/p1/#ventajas-de-usar-vite-con-react","title":"Ventajas de usar Vite con React","text":"<ul> <li>R\u00e1pido: Vite usa ES Modules y un servidor de desarrollo ultrarr\u00e1pido.</li> <li>Configuraci\u00f3n m\u00ednima: Plantillas listas para usar.</li> <li>Hot Module Replacement (HMR): Actualizaciones en tiempo real sin recargar la p\u00e1gina.</li> <li>Optimizado para producci\u00f3n: Genera builds peque\u00f1as y eficientes.</li> </ul>"},{"location":"content/p1/#creando-proyecto-react-con-nextjs","title":"Creando Proyecto React con Next.js","text":""},{"location":"content/p1/#explicacion-paso-a-paso_1","title":"Explicaci\u00f3n paso a paso","text":"<ol> <li>Requisitos previos:</li> <li>Aseg\u00farate de tener Node.js instalado (versi\u00f3n 18.17 o superior). Verif\u00edcalo con:      <pre><code>node -v\n</code></pre></li> <li> <p>Usa npm (incluido con Node.js) o pnpm (opcional, m\u00e1s r\u00e1pido).</p> </li> <li> <p>Crear un proyecto con Next.js:    Next.js proporciona un comando para inicializar un proyecto con una configuraci\u00f3n predeterminada. Ejecuta:</p> </li> </ol> <pre><code>npx create-next-app@latest\n</code></pre> <ul> <li>Esto inicia un asistente interactivo:<ul> <li>Nombre del proyecto: Ingresa un nombre (ejemplo: <code>mi-proyecto-next</code>).</li> <li>TypeScript: Elige si usar TypeScript (para este ejemplo, usaremos JavaScript).</li> <li>ESLint: Selecciona <code>Yes</code> para activar linting.</li> <li>Tailwind CSS: Opcional (elige <code>No</code> para mantenerlo simple).</li> <li>src directory: Elige <code>No</code> para usar la estructura est\u00e1ndar.</li> <li>App Router: Selecciona <code>Yes</code> para usar el nuevo App Router (recomendado).</li> <li>Customize default import alias: Elige <code>No</code> para simplicidad.</li> </ul> </li> </ul> <p>Alternativamente, puedes usar un solo comando para evitar el asistente:    <pre><code>npx create-next-app@latest mi-proyecto-next --javascript --eslint --no-tailwind --no-src-dir --app --import-alias \"@/*\"\n</code></pre></p> <ol> <li> <p>Navegar al directorio del proyecto:    <pre><code>cd mi-proyecto-next\n</code></pre></p> </li> <li> <p>Iniciar el servidor de desarrollo:    <pre><code>npm run dev\n</code></pre></p> </li> <li>Esto inicia el servidor en <code>http://localhost:3000</code>.</li> <li> <p>Abre la URL en tu navegador para ver la p\u00e1gina predeterminada de Next.js.</p> </li> <li> <p>Estructura del proyecto:    Con el App Router, la estructura ser\u00e1 similar a:    <pre><code>mi-proyecto-next/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 next.svg\n\u2502   \u2514\u2500\u2500 vercel.svg\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u251c\u2500\u2500 layout.jsx\n\u2502   \u251c\u2500\u2500 page.jsx\n\u2502   \u2514\u2500\u2500 favicon.ico\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 next.config.mjs\n\u251c\u2500\u2500 package.json\n\u251c\u2500\u2500 README.md\n\u2514\u2500\u2500 .eslintrc.json\n</code></pre></p> </li> <li><code>app/page.jsx</code>: P\u00e1gina principal de la aplicaci\u00f3n.</li> <li><code>app/layout.jsx</code>: Layout ra\u00edz que envuelve todas las p\u00e1ginas.</li> <li> <p><code>next.config.mjs</code>: Configuraci\u00f3n de Next.js.</p> </li> <li> <p>Personalizar el proyecto:    Edita <code>app/page.jsx</code> para crear una p\u00e1gina con un contador simple. Reemplaza su contenido con:</p> </li> </ol> <pre><code>'use client'; // Indica que este componente se renderiza en el cliente\n\nimport { useState } from 'react';\nimport styles from './page.module.css';\n\nexport default function Home() {\n  const [count, setCount] = useState(0);\n\n  return (\n    &lt;main className={styles.main}&gt;\n      &lt;h1&gt;Contador con Next.js&lt;/h1&gt;\n      &lt;p&gt;Has hecho clic {count} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Incrementar&lt;/button&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <ul> <li><code>'use client'</code>: Necesario para componentes que usan hooks como <code>useState</code> en el App Router, ya que Next.js renderiza por defecto en el servidor.</li> <li> <p><code>styles.main</code>: Usa los estilos CSS Modules generados autom\u00e1ticamente en <code>page.module.css</code>.</p> </li> <li> <p>Ajustar los estilos (opcional):    En <code>app/page.module.css</code>, puedes modificar o agregar estilos, por ejemplo:    <pre><code>.main {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  min-height: 100vh;\n  gap: 1rem;\n}\n</code></pre></p> </li> <li> <p>Construir para producci\u00f3n:    Para generar una versi\u00f3n optimizada:    <pre><code>npm run build\n</code></pre></p> </li> <li> <p>Los archivos optimizados se generan en la carpeta <code>.next/</code>.</p> </li> <li> <p>Iniciar la aplicaci\u00f3n en producci\u00f3n:    Previsualiza la build localmente:    <pre><code>npm run start\n</code></pre></p> </li> </ul>"},{"location":"content/p1/#ejemplo-completo_1","title":"Ejemplo completo","text":"<p>Para crear un proyecto llamado <code>contador-next-app</code>, ejecuta:</p> <pre><code>npx create-next-app@latest contador-next-app --javascript --eslint --no-tailwind --no-src-dir --app --import-alias \"@/*\"\ncd contador-next-app\nnpm run dev\n</code></pre> <p>Edita <code>app/page.jsx</code> con el c\u00f3digo del contador mostrado arriba. Abre <code>http://localhost:3000</code> en tu navegador y ver\u00e1s un contador funcional.</p>"},{"location":"content/p1/#url-oficial-de-nextjs","title":"URL oficial de Next.js","text":"<p>La documentaci\u00f3n y recursos oficiales est\u00e1n disponibles en:</p> <ul> <li>https://nextjs.org/</li> </ul>"},{"location":"content/p1/#ventajas-de-usar-nextjs","title":"Ventajas de usar Next.js","text":"<ul> <li>Renderizado h\u00edbrido: Soporta SSR, SSG y CSR (renderizado del lado del cliente).</li> <li>Optimizaci\u00f3n autom\u00e1tica: Compresi\u00f3n de im\u00e1genes, precarga de recursos y m\u00e1s.</li> <li>App Router: Estructura moderna para manejar rutas y layouts.</li> <li>API Routes: Crea endpoints API f\u00e1cilmente dentro del proyecto.</li> <li>Ecosistema robusto: Integraci\u00f3n con Vercel, Tailwind CSS, y m\u00e1s.</li> </ul>"},{"location":"content/p1/#diferencias-con-vite","title":"Diferencias con Vite","text":"<ul> <li>Next.js es un framework completo con enrutamiento, renderizado del servidor y optimizaciones integradas, mientras que Vite es una herramienta de construcci\u00f3n m\u00e1s ligera enfocada en velocidad.</li> <li>Next.js es ideal para aplicaciones que requieren SEO o renderizado del servidor; Vite es mejor para aplicaciones cliente ligeras.</li> </ul>"},{"location":"content/p1/#extensiones-de-vs-code-especificas-para-react","title":"Extensiones de VS Code Espec\u00edficas para React","text":"<ol> <li> <p>ES7+ React/Redux/React-Native snippets</p> <ul> <li>Descripci\u00f3n: Proporciona snippets para React, Redux, React Native y GraphQL, incluyendo componentes funcionales, hooks y boilerplate com\u00fan.</li> <li>Por qu\u00e9 usarla: Acelera la escritura de c\u00f3digo React (ej. <code>rafce</code> para un componente funcional con exportaci\u00f3n). Ideal para proyectos con Vite o Next.js.</li> </ul> </li> <li> <p>Simple React Snippets</p> <ul> <li>Descripci\u00f3n: Ofrece snippets minimalistas para React, como importaciones, componentes funcionales y PropTypes, sin abarcar Redux o React Native.</li> <li>Por qu\u00e9 usarla: Es m\u00e1s ligero que ES7+ Snippets, ideal para principiantes o proyectos React puros donde no necesitas snippets adicionales.</li> </ul> </li> <li> <p>Auto Rename Tag</p> <ul> <li>Descripci\u00f3n: Renombra autom\u00e1ticamente etiquetas JSX/HTML emparejadas al editar una, evitando errores en el c\u00f3digo.</li> <li>Por qu\u00e9 usarla: Simplifica la edici\u00f3n de JSX en React, especialmente en componentes complejos con muchas etiquetas anidadas, com\u00fan en Vite y Next.js.</li> </ul> </li> <li> <p>VSCode React Refactor</p> <ul> <li>Descripci\u00f3n: Facilita la refactorizaci\u00f3n de c\u00f3digo JSX, permitiendo extraer fragmentos a funciones o archivos separados.</li> <li>Por qu\u00e9 usarla: Mantiene el c\u00f3digo React organizado, especialmente en proyectos grandes con Next.js (App Router) o Vite, donde los componentes crecen r\u00e1pido.   </li> </ul> </li> </ol>"},{"location":"content/p1/#que-es-jsx","title":"\u00bfQu\u00e9 es JSX?","text":"<p>JSX (JavaScript XML) es una extensi\u00f3n de sintaxis para JavaScript que permite escribir c\u00f3digo similar a HTML dentro de archivos JavaScript. Es una caracter\u00edstica clave de React, utilizada para describir la interfaz de usuario (UI) de manera declarativa. Aunque parece HTML, JSX es en realidad az\u00facar sint\u00e1ctico que se transforma en llamadas a funciones JavaScript (espec\u00edficamente, a <code>React.createElement</code>).</p> <ul> <li>Creado por: Facebook, como parte de React.</li> <li>Prop\u00f3sito: Facilitar la creaci\u00f3n de componentes de UI combinando l\u00f3gica (JavaScript) y estructura (HTML-like) en un solo lugar.</li> <li>No es HTML: JSX es una abstracci\u00f3n que se compila a JavaScript puro, lo que lo hace m\u00e1s flexible y potente.</li> </ul>"},{"location":"content/p1/#como-funciona-jsx","title":"\u00bfC\u00f3mo funciona JSX?","text":"<p>JSX permite escribir estructuras de UI que se asemejan a HTML, pero bajo el cap\u00f3, se convierten en objetos JavaScript que React usa para construir el DOM virtual. Aqu\u00ed est\u00e1 el proceso:</p> <ol> <li> <p>Escribir JSX:    <pre><code>const element = &lt;h1&gt;Hola, React!&lt;/h1&gt;;\n</code></pre></p> </li> <li> <p>Compilaci\u00f3n con Babel:    JSX no es interpretado directamente por los navegadores. Herramientas como Babel (usadas autom\u00e1ticamente en Vite y Next.js) lo transforman en JavaScript:    <pre><code>const element = React.createElement(\"h1\", null, \"Hola, React!\");\n</code></pre></p> </li> <li> <p>Renderizado:    React toma estas llamadas a <code>React.createElement</code> para crear un DOM virtual (una representaci\u00f3n ligera del DOM real). Luego, React compara el DOM virtual con el DOM real y actualiza solo las partes que cambiaron (reconciliaci\u00f3n).</p> </li> <li> <p>Integraci\u00f3n en componentes:    JSX se usa dentro de componentes React para definir su estructura. Por ejemplo:    <pre><code>function Welcome() {\n  return &lt;h1&gt;Bienvenido a React&lt;/h1&gt;;\n}\n</code></pre></p> </li> </ol>"},{"location":"content/p1/#caracteristicas-principales-de-jsx","title":"Caracter\u00edsticas principales de JSX","text":"<ol> <li> <p>Sintaxis similar a HTML:</p> <ul> <li>Usa etiquetas como <code>&lt;div&gt;</code>, <code>&lt;h1&gt;</code>, o componentes personalizados (<code>&lt;MyComponent /&gt;</code>).</li> <li>Soporta atributos como <code>className</code>, <code>onClick</code>, etc.</li> </ul> </li> <li> <p>Expresiones JavaScript:</p> <ul> <li>Puedes insertar c\u00f3digo JavaScript dentro de JSX usando llaves <code>{}</code>:     <pre><code>const name = \"Juan\";\nconst element = &lt;h1&gt;Hola, {name}!&lt;/h1&gt;;\n</code></pre></li> </ul> </li> <li> <p>Componentes como etiquetas:</p> <ul> <li>Los componentes React (funcionales o de clase) se usan como etiquetas JSX:     <pre><code>function Greeting() {\nreturn &lt;h1&gt;\u00a1Hola!&lt;/h1&gt;;\n}\nconst element = &lt;Greeting /&gt;;\n</code></pre></li> </ul> </li> <li> <p>No es un template engine:</p> <ul> <li>A diferencia de Handlebars o Pug, JSX es JavaScript puro, lo que permite usar toda la potencia de JS (map, filter, etc.) dentro de la UI.</li> </ul> </li> <li> <p>Seguridad integrada:</p> <ul> <li>JSX escapa autom\u00e1ticamente el contenido para prevenir ataques XSS (Cross-Site Scripting). Por ejemplo:     <pre><code>const userInput = \"&lt;script&gt;alert('hack')&lt;/script&gt;\";\nreturn &lt;div&gt;{userInput}&lt;/div&gt;; // Se renderiza como texto, no como script\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/p1/#reglas-de-jsx","title":"Reglas de JSX","text":"<p>Para usar JSX correctamente, debes seguir estas reglas:</p> <ol> <li> <p>Siempre cerrar etiquetas:</p> <ul> <li>Todas las etiquetas deben cerrarse, incluso las vac\u00edas:     <pre><code>&lt;img src=\"image.jpg\" alt=\"example\" /&gt; // Correcto\n&lt;img src=\"image.jpg\"&gt; // Incorrecto\n</code></pre></li> </ul> </li> <li> <p>Un solo elemento ra\u00edz:</p> <ul> <li>JSX debe devolver un solo elemento ra\u00edz. Si necesitas m\u00faltiples elementos, envu\u00e9lvelos en un <code>&lt;div&gt;</code> o un Fragment (<code>&lt;&gt;</code>):     <pre><code>return (\n&lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;Descripci\u00f3n&lt;/p&gt;\n&lt;/&gt;\n);\n</code></pre></li> </ul> </li> <li> <p>Usar <code>className</code> en lugar de <code>class</code>:</p> <ul> <li>En JSX, los atributos HTML que coinciden con palabras reservadas de JavaScript se renombran:     <pre><code>&lt;div className=\"container\"&gt;Contenido&lt;/div&gt;\n</code></pre></li> <li>Otros ejemplos: <code>htmlFor</code> en lugar de <code>for</code>, <code>onClick</code> en lugar de <code>onclick</code>.</li> </ul> </li> <li> <p>CamelCase para eventos y props:</p> <ul> <li>Los eventos y propiedades personalizadas usan camelCase:     <pre><code>&lt;button onClick={handleClick}&gt;Clic&lt;/button&gt;\n</code></pre></li> </ul> </li> <li> <p>Expresiones en llaves <code>{}</code>:</p> <ul> <li>Solo se permiten expresiones JavaScript (no bloques como <code>if</code> o <code>for</code>) dentro de <code>{}</code>:     <pre><code>&lt;p&gt;{2 + 2}&lt;/p&gt; // Correcto\n&lt;p&gt;{if (true) return \"Hola\"}&lt;/p&gt; // Incorrecto\n</code></pre></li> </ul> </li> <li> <p>Componentes comienzan con may\u00fascula:</p> <ul> <li>Los componentes personalizados deben empezar con may\u00fascula para diferenciarlos de etiquetas HTML:     <pre><code>&lt;MyComponent /&gt; // Componente\n&lt;mycomponent /&gt; // Error: se interpreta como HTML\n</code></pre></li> </ul> </li> </ol>"},{"location":"content/p1/#ejemplo-practico-de-jsx-en-react","title":"Ejemplo pr\u00e1ctico de JSX en React","text":"<p>A continuaci\u00f3n, un ejemplo completo que puedes usar en tus proyectos con Vite o Next.js. Este ejemplo crea un componente con un contador, usando varias caracter\u00edsticas de JSX.</p>"},{"location":"content/p1/#codigo","title":"C\u00f3digo","text":"<p>Crea o edita <code>src/App.jsx</code> (en Vite) o <code>app/page.jsx</code> (en Next.js con App Router):</p> <pre><code>'use client'; // Solo para Next.js (App Router)\n\nimport { useState } from 'react';\nimport './App.css'; // En Vite\n// o import styles from './page.module.css'; // En Next.js\n\nfunction App() {\n  const [count, setCount] = useState(0);\n  const isHigh = count &gt; 5;\n\n  // Lista din\u00e1mica con map\n  const items = ['React', 'JSX', 'Vite/Next.js'];\n  const listItems = items.map((item, index) =&gt; (\n    &lt;li key={index}&gt;{item}&lt;/li&gt;\n  ));\n\n  // Manejo de eventos\n  const handleIncrement = () =&gt; setCount(count + 1);\n\n  return (\n    &lt;div className=\"container\"&gt;\n      &lt;h1&gt;Contador con JSX&lt;/h1&gt;\n      &lt;p&gt;Conteo: {count}&lt;/p&gt;\n      &lt;button onClick={handleIncrement}&gt;Incrementar&lt;/button&gt;\n      {/* Renderizado condicional */}\n      {isHigh ? (\n        &lt;p&gt;\u00a1El conteo es alto!&lt;/p&gt;\n      ) : (\n        &lt;p&gt;El conteo es bajo&lt;/p&gt;\n      )}\n      {/* Lista din\u00e1mica */}\n      &lt;h2&gt;Tecnolog\u00edas usadas:&lt;/h2&gt;\n      &lt;ul&gt;{listItems}&lt;/ul&gt;\n      {/* Componente reutilizable */}\n      &lt;Greeting name=\"Usuario\" /&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente reutilizable\nfunction Greeting({ name }) {\n  return &lt;p&gt;\u00a1Hola, {name}!&lt;/p&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"content/p1/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo","text":"<ul> <li>Estructura JSX: Usa etiquetas como <code>&lt;div&gt;</code>, <code>&lt;h1&gt;</code>, <code>&lt;button&gt;</code>, y el componente personalizado <code>&lt;Greeting /&gt;</code>.</li> <li>Expresiones: <code>{count}</code> muestra el estado, <code>{listItems}</code> renderiza una lista din\u00e1mica.</li> <li>Eventos: <code>onClick={handleIncrement}</code> maneja clics.</li> <li>Renderizado condicional: <code>{isHigh ? ... : ...}</code> muestra un mensaje seg\u00fan el estado.</li> <li>Lista din\u00e1mica: <code>items.map</code> genera <code>&lt;li&gt;</code> con una <code>key</code> para optimizar el renderizado.</li> <li>Props: El componente <code>Greeting</code> recibe <code>name</code> como prop.</li> <li>Estilos: Usa <code>className</code> para aplicar estilos desde <code>App.css</code> (Vite) o <code>page.module.css</code> (Next.js).</li> </ul>"},{"location":"content/p1/#como-probarlo","title":"C\u00f3mo probarlo","text":"<ol> <li> <p>En Vite:</p> <ul> <li>Crea un proyecto con <code>npm create vite@latest</code> (como en tu primer pregunta).</li> <li>Reemplaza <code>src/App.jsx</code> con el c\u00f3digo anterior.</li> <li>Ejecuta <code>npm run dev</code> y abre <code>http://localhost:5173</code>.</li> </ul> </li> <li> <p>En Next.js:</p> <ul> <li>Crea un proyecto con <code>npx create-next-app@latest</code> (como en tu segunda pregunta).</li> <li>Reemplaza <code>app/page.jsx</code> con el c\u00f3digo, asegur\u00e1ndote de a\u00f1adir <code>'use client'</code> al inicio.</li> <li>Ejecuta <code>npm run dev</code> y abre <code>http://localhost:3000</code>.</li> </ul> </li> </ol>"},{"location":"content/p1/#jsx-en-vite-vs-nextjs","title":"JSX en Vite vs. Next.js","text":"<ul> <li> <p>Vite:</p> <ul> <li>JSX se usa principalmente para renderizado del lado del cliente (CSR).</li> <li>La configuraci\u00f3n de Babel est\u00e1 incluida en Vite, por lo que no necesitas configurarlo manualmente.</li> <li>Ideal para aplicaciones ligeras donde el SEO no es cr\u00edtico.</li> </ul> </li> <li> <p>Next.js:</p> <ul> <li>JSX se usa en componentes que pueden renderizarse en el servidor (SSR) o est\u00e1ticamente (SSG).</li> <li>En el App Router (como en tu proyecto), los componentes con hooks como <code>useState</code> requieren <code>'use client'</code> para indicar que son client-side.</li> <li>Next.js optimiza el renderizado de JSX para SEO y rendimiento.</li> </ul> </li> </ul>"},{"location":"content/p1/#ventajas-de-jsx","title":"Ventajas de JSX","text":"<ol> <li>Declarativo: Describe c\u00f3mo debe verse la UI sin preocuparte por los detalles de manipulaci\u00f3n del DOM.</li> <li>Integraci\u00f3n con JavaScript: Combina l\u00f3gica y UI en un solo lugar, permitiendo usar funciones, bucles, etc.</li> <li>Reutilizaci\u00f3n: Los componentes JSX son modulares y reutilizables.</li> <li>Ecosistema: Compatible con herramientas como Vite, Next.js, y extensiones de VS Code (como las mencionadas en tu pregunta anterior: ES7+ Snippets, Auto Rename Tag).</li> </ol>"},{"location":"content/p1/#limitaciones-de-jsx","title":"Limitaciones de JSX","text":"<ol> <li>Curva de aprendizaje: La mezcla de HTML y JavaScript puede ser confusa al principio.</li> <li>Dependencia de herramientas: Necesitas un transpilador como Babel, aunque Vite/Next.js lo manejan por ti.</li> <li>Restricciones sint\u00e1cticas: Reglas como el elemento ra\u00edz \u00fanico o <code>className</code> requieren atenci\u00f3n.</li> </ol>"},{"location":"content/p1/#consejos-para-trabajar-con-jsx","title":"Consejos para trabajar con JSX","text":"<ol> <li> <p>Usa extensiones de VS Code:</p> <ul> <li>Como mencionaste en tu \u00faltima pregunta, extensiones como ES7+ React Snippets (<code>rafce</code>) y Auto Rename Tag facilitan la escritura y edici\u00f3n de JSX.</li> <li>VSCode React Refactor es \u00fatil para reorganizar JSX en componentes grandes.</li> </ul> </li> <li> <p>Fragments para evitar <code>&lt;div&gt;</code> innecesarios:     <pre><code>return (\n    &lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;Texto&lt;/p&gt;\n    &lt;/&gt;\n);\n</code></pre></p> </li> <li> <p>Claves en listas:</p> <ul> <li>Siempre asigna una <code>key</code> \u00fanica en elementos de listas para optimizar el renderizado:     <pre><code>{items.map(item =&gt; &lt;li key={item.id}&gt;{item.name}&lt;/li&gt;)}\n</code></pre></li> </ul> </li> <li> <p>Evita inline styles complejos:</p> <ul> <li>Usa <code>className</code> con CSS externo o CSS Modules (como en Next.js) en lugar de:     <pre><code>&lt;div style={{ backgroundColor: 'blue', padding: '10px' }} /&gt;\n</code></pre></li> </ul> </li> <li> <p>Depuraci\u00f3n:</p> <ul> <li>Usa Console Ninja (extensi\u00f3n mencionada anteriormente) para inspeccionar valores en JSX directamente en VS Code.</li> </ul> </li> </ol>"},{"location":"content/p10/","title":"Semana 10: Hook useEffect - Gu\u00eda Simple y Detallada","text":""},{"location":"content/p10/#que-es-useeffect","title":"\u00bfQu\u00e9 es useEffect?","text":"<p>El hook <code>useEffect</code> te permite realizar efectos secundarios en tus componentes funcionales. Piensa en los efectos como \"cosas que necesitas hacer\" adem\u00e1s de mostrar la interfaz:</p> <ul> <li>Obtener datos de una API</li> <li>Cambiar el t\u00edtulo de la p\u00e1gina</li> <li>Configurar temporizadores</li> <li>Limpiar recursos cuando el componente se desmonta</li> </ul>"},{"location":"content/p10/#concepto-simple","title":"Concepto Simple","text":"<pre><code>useEffect(() =&gt; {\n  // C\u00f3digo que se ejecuta despu\u00e9s del render\n});\n</code></pre>"},{"location":"content/p10/#importacion","title":"Importaci\u00f3n","text":"<p>Siempre debemos importar useEffect junto con useState:</p> <pre><code>import { useState, useEffect } from 'react';\n</code></pre>"},{"location":"content/p10/#ejemplo-1-mi-primer-efecto","title":"Ejemplo 1: Mi Primer Efecto","text":"<p>Comencemos con algo simple - cambiar el t\u00edtulo de la p\u00e1gina:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction CambiadorTitulo() {\n  const [contador, setContador] = useState(0);\n\n  // Este efecto se ejecuta despu\u00e9s de cada render\n  useEffect(() =&gt; {\n    document.title = `Contador: ${contador}`;\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Contador: {contador}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n        Incrementar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00bfQu\u00e9 pasa aqu\u00ed? 1. Cada vez que el componente se renderiza, <code>useEffect</code> se ejecuta 2. El efecto cambia el t\u00edtulo de la p\u00e1gina del navegador 3. Cuando incrementamos el contador, se actualiza el t\u00edtulo autom\u00e1ticamente</p>"},{"location":"content/p10/#ejemplo-2-efecto-que-se-ejecuta-solo-una-vez","title":"Ejemplo 2: Efecto que se Ejecuta Solo Una Vez","text":"<p>A veces queremos que algo pase solo cuando el componente aparece por primera vez:</p> <pre><code>function SaludoInicial() {\n  const [usuario, setUsuario] = useState('');\n\n  // Este efecto se ejecuta SOLO una vez, al montar el componente\n  useEffect(() =&gt; {\n    console.log('\u00a1El componente se mont\u00f3!');\n    alert('\u00a1Bienvenido a la aplicaci\u00f3n!');\n  }, []); // El array vac\u00edo [] es la clave\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        value={usuario}\n        onChange={(e) =&gt; setUsuario(e.target.value)}\n        placeholder=\"Tu nombre\"\n      /&gt;\n      &lt;p&gt;Hola {usuario}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Punto clave: El <code>[]</code> al final hace que el efecto se ejecute solo una vez.</p>"},{"location":"content/p10/#los-tres-tipos-de-useeffect","title":"Los Tres Tipos de useEffect","text":""},{"location":"content/p10/#1-sin-dependencias-se-ejecuta-siempre","title":"1. Sin Dependencias (se ejecuta siempre)","text":"<pre><code>useEffect(() =&gt; {\n  console.log('Me ejecuto despu\u00e9s de cada render');\n});\n</code></pre>"},{"location":"content/p10/#2-con-array-vacio-se-ejecuta-solo-una-vez","title":"2. Con Array Vac\u00edo (se ejecuta solo una vez)","text":"<pre><code>useEffect(() =&gt; {\n  console.log('Me ejecuto solo al montar el componente');\n}, []);\n</code></pre>"},{"location":"content/p10/#3-con-dependencias-se-ejecuta-cuando-cambian","title":"3. Con Dependencias (se ejecuta cuando cambian)","text":"<pre><code>useEffect(() =&gt; {\n  console.log('Me ejecuto cuando cambia el contador');\n}, [contador]);\n</code></pre>"},{"location":"content/p10/#ejemplo-3-obtener-datos-de-una-api","title":"Ejemplo 3: Obtener Datos de una API","text":"<p>Este es uno de los usos m\u00e1s comunes de useEffect:</p> <pre><code>function ListaUsuarios() {\n  const [usuarios, setUsuarios] = useState([]);\n  const [cargando, setCargando] = useState(true);\n\n  useEffect(() =&gt; {\n    // Simular llamada a API\n    const obtenerUsuarios = async () =&gt; {\n      setCargando(true);\n\n      // Simular delay de red\n      await new Promise(resolve =&gt; setTimeout(resolve, 2000));\n\n      // Datos simulados\n      const datosSimulados = [\n        { id: 1, nombre: 'Ana Garc\u00eda', email: 'ana@email.com' },\n        { id: 2, nombre: 'Carlos L\u00f3pez', email: 'carlos@email.com' },\n        { id: 3, nombre: 'Mar\u00eda Rodr\u00edguez', email: 'maria@email.com' }\n      ];\n\n      setUsuarios(datosSimulados);\n      setCargando(false);\n    };\n\n    obtenerUsuarios();\n  }, []); // Solo se ejecuta una vez al montar\n\n  if (cargando) {\n    return &lt;div&gt;Cargando usuarios...&lt;/div&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de Usuarios&lt;/h2&gt;\n      &lt;ul&gt;\n        {usuarios.map(usuario =&gt; (\n          &lt;li key={usuario.id}&gt;\n            {usuario.nombre} - {usuario.email}\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p10/#ejemplo-4-efecto-con-dependencias","title":"Ejemplo 4: Efecto con Dependencias","text":"<p>Veamos c\u00f3mo reaccionar a cambios espec\u00edficos:</p> <pre><code>function BuscadorProductos() {\n  const [busqueda, setBusqueda] = useState('');\n  const [productos, setProductos] = useState([]);\n  const [cargando, setCargando] = useState(false);\n\n  // Este efecto se ejecuta cada vez que cambia 'busqueda'\n  useEffect(() =&gt; {\n    if (busqueda.trim() === '') {\n      setProductos([]);\n      return;\n    }\n\n    const buscarProductos = async () =&gt; {\n      setCargando(true);\n\n      // Simular b\u00fasqueda\n      await new Promise(resolve =&gt; setTimeout(resolve, 1000));\n\n      const todosLosProductos = [\n        'Laptop', 'Mouse', 'Teclado', 'Monitor', 'Auriculares',\n        'C\u00e1mara', 'Tablet', 'Smartphone', 'Impresora', 'Router'\n      ];\n\n      const resultados = todosLosProductos.filter(producto =&gt; \n        producto.toLowerCase().includes(busqueda.toLowerCase())\n      );\n\n      setProductos(resultados);\n      setCargando(false);\n    };\n\n    buscarProductos();\n  }, [busqueda]); // Se ejecuta cuando cambia 'busqueda'\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Buscador de Productos&lt;/h2&gt;\n      &lt;input \n        type=\"text\"\n        value={busqueda}\n        onChange={(e) =&gt; setBusqueda(e.target.value)}\n        placeholder=\"Buscar productos...\"\n      /&gt;\n\n      {cargando &amp;&amp; &lt;p&gt;Buscando...&lt;/p&gt;}\n\n      &lt;ul&gt;\n        {productos.map((producto, index) =&gt; (\n          &lt;li key={index}&gt;{producto}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n\n      {busqueda &amp;&amp; !cargando &amp;&amp; productos.length === 0 &amp;&amp; (\n        &lt;p&gt;No se encontraron productos&lt;/p&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p10/#limpieza-de-efectos-cleanup","title":"Limpieza de Efectos (Cleanup)","text":"<p>Algunos efectos necesitan \"limpiarse\" cuando el componente se desmonta:</p> <pre><code>function Temporizador() {\n  const [segundos, setSegundos] = useState(0);\n  const [activo, setActivo] = useState(false);\n\n  useEffect(() =&gt; {\n    let intervalo = null;\n\n    if (activo) {\n      intervalo = setInterval(() =&gt; {\n        setSegundos(segundos =&gt; segundos + 1);\n      }, 1000);\n    }\n\n    // Funci\u00f3n de limpieza\n    return () =&gt; {\n      if (intervalo) {\n        clearInterval(intervalo);\n      }\n    };\n  }, [activo]); // Se ejecuta cuando cambia 'activo'\n\n  const reiniciar = () =&gt; {\n    setSegundos(0);\n    setActivo(false);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Temporizador: {segundos} segundos&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setActivo(!activo)}&gt;\n        {activo ? 'Pausar' : 'Iniciar'}\n      &lt;/button&gt;\n      &lt;button onClick={reiniciar}&gt;\n        Reiniciar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Punto importante: La funci\u00f3n que devuelves en useEffect se ejecuta para limpiar el efecto.</p>"},{"location":"content/p10/#ejemplo-practico-chat-en-tiempo-real-simulado","title":"Ejemplo Pr\u00e1ctico: Chat en Tiempo Real (Simulado)","text":"<pre><code>function ChatSimulado() {\n  const [mensajes, setMensajes] = useState([]);\n  const [nuevoMensaje, setNuevoMensaje] = useState('');\n  const [conectado, setConectado] = useState(false);\n\n  // Efecto para simular conexi\u00f3n al chat\n  useEffect(() =&gt; {\n    if (conectado) {\n      console.log('Conectando al chat...');\n\n      // Simular mensajes que llegan\n      const intervalo = setInterval(() =&gt; {\n        const mensajesAleatorios = [\n          'Hola, \u00bfc\u00f3mo est\u00e1n?',\n          '\u00bfAlguien sabe de React?',\n          'Estoy aprendiendo useEffect',\n          '\u00a1Este tutorial est\u00e1 genial!',\n          '\u00bfDudas sobre hooks?'\n        ];\n\n        const mensajeAleatorio = mensajesAleatorios[\n          Math.floor(Math.random() * mensajesAleatorios.length)\n        ];\n\n        setMensajes(prev =&gt; [...prev, {\n          id: Date.now(),\n          texto: mensajeAleatorio,\n          usuario: 'Usuario' + Math.floor(Math.random() * 100),\n          timestamp: new Date().toLocaleTimeString()\n        }]);\n      }, 3000);\n\n      // Limpieza: desconectar cuando el componente se desmonte\n      return () =&gt; {\n        console.log('Desconectando del chat...');\n        clearInterval(intervalo);\n      };\n    }\n  }, [conectado]);\n\n  const enviarMensaje = () =&gt; {\n    if (nuevoMensaje.trim()) {\n      setMensajes(prev =&gt; [...prev, {\n        id: Date.now(),\n        texto: nuevoMensaje,\n        usuario: 'T\u00fa',\n        timestamp: new Date().toLocaleTimeString()\n      }]);\n      setNuevoMensaje('');\n    }\n  };\n\n  return (\n    &lt;div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px' }}&gt;\n      &lt;h2&gt;Chat Simulado&lt;/h2&gt;\n\n      &lt;button \n        onClick={() =&gt; setConectado(!conectado)}\n        style={{\n          backgroundColor: conectado ? '#dc3545' : '#28a745',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '4px',\n          marginBottom: '20px'\n        }}\n      &gt;\n        {conectado ? 'Desconectar' : 'Conectar'}\n      &lt;/button&gt;\n\n      &lt;div style={{\n        height: '300px',\n        border: '1px solid #ddd',\n        borderRadius: '4px',\n        padding: '10px',\n        overflowY: 'scroll',\n        backgroundColor: '#f8f9fa',\n        marginBottom: '10px'\n      }}&gt;\n        {mensajes.map(mensaje =&gt; (\n          &lt;div key={mensaje.id} style={{ marginBottom: '10px' }}&gt;\n            &lt;strong&gt;{mensaje.usuario}&lt;/strong&gt; \n            &lt;small style={{ color: '#666' }}&gt; ({mensaje.timestamp})&lt;/small&gt;\n            &lt;br /&gt;\n            {mensaje.texto}\n          &lt;/div&gt;\n        ))}\n        {mensajes.length === 0 &amp;&amp; (\n          &lt;p style={{ color: '#666', textAlign: 'center' }}&gt;\n            {conectado ? 'Esperando mensajes...' : 'Desconectado'}\n          &lt;/p&gt;\n        )}\n      &lt;/div&gt;\n\n      {conectado &amp;&amp; (\n        &lt;div style={{ display: 'flex' }}&gt;\n          &lt;input \n            type=\"text\"\n            value={nuevoMensaje}\n            onChange={(e) =&gt; setNuevoMensaje(e.target.value)}\n            onKeyPress={(e) =&gt; e.key === 'Enter' &amp;&amp; enviarMensaje()}\n            placeholder=\"Escribe un mensaje...\"\n            style={{\n              flex: 1,\n              padding: '10px',\n              border: '1px solid #ddd',\n              borderRadius: '4px 0 0 4px'\n            }}\n          /&gt;\n          &lt;button \n            onClick={enviarMensaje}\n            style={{\n              backgroundColor: '#007bff',\n              color: 'white',\n              border: 'none',\n              padding: '10px 20px',\n              borderRadius: '0 4px 4px 0'\n            }}\n          &gt;\n            Enviar\n          &lt;/button&gt;\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p10/#reglas-importantes-de-useeffect","title":"Reglas Importantes de useEffect","text":""},{"location":"content/p10/#si-haz-esto","title":"\u2705 S\u00cd haz esto:","text":"<pre><code>// Especifica dependencias correctamente\nuseEffect(() =&gt; {\n  console.log(contador);\n}, [contador]);\n\n// Limpia efectos cuando sea necesario\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {}, 1000);\n  return () =&gt; clearInterval(timer);\n}, []);\n</code></pre>"},{"location":"content/p10/#no-hagas-esto","title":"\u274c NO hagas esto:","text":"<pre><code>// MAL - Olvidar dependencias\nuseEffect(() =&gt; {\n  console.log(contador); // Usa 'contador' pero no est\u00e1 en dependencias\n}, []); // \u00a1Falta [contador]!\n\n// MAL - No limpiar efectos\nuseEffect(() =&gt; {\n  setInterval(() =&gt; {}, 1000); // \u00a1No se limpia!\n}, []);\n</code></pre>"},{"location":"content/p10/#casos-de-uso-comunes","title":"Casos de Uso Comunes","text":""},{"location":"content/p10/#1-obtener-datos-al-cargar","title":"1. Obtener Datos al Cargar","text":"<pre><code>useEffect(() =&gt; {\n  fetch('/api/datos')\n    .then(response =&gt; response.json())\n    .then(data =&gt; setDatos(data));\n}, []);\n</code></pre>"},{"location":"content/p10/#2-escuchar-eventos-del-navegador","title":"2. Escuchar Eventos del Navegador","text":"<pre><code>useEffect(() =&gt; {\n  const manejarResize = () =&gt; {\n    console.log('Ventana redimensionada');\n  };\n\n  window.addEventListener('resize', manejarResize);\n\n  return () =&gt; {\n    window.removeEventListener('resize', manejarResize);\n  };\n}, []);\n</code></pre>"},{"location":"content/p10/#3-actualizar-documento","title":"3. Actualizar Documento","text":"<pre><code>useEffect(() =&gt; {\n  document.title = `${nombre} - Mi App`;\n}, [nombre]);\n</code></pre>"},{"location":"content/p10/#ejercicios-para-practicar","title":"Ejercicios para Practicar","text":""},{"location":"content/p10/#ejercicio-1-reloj-digital","title":"Ejercicio 1: Reloj Digital","text":"<p>Crea un reloj que: - Muestre la hora actual - Se actualice cada segundo - Tenga bot\u00f3n para pausar/reanudar</p>"},{"location":"content/p10/#ejercicio-2-contador-de-clics","title":"Ejercicio 2: Contador de Clics","text":"<p>Crea un componente que: - Cuente clics en la p\u00e1gina - Guarde el conteo en localStorage - Cargue el conteo al iniciar</p>"},{"location":"content/p10/#ejercicio-3-buscador-con-debounce","title":"Ejercicio 3: Buscador con Debounce","text":"<p>Crea un buscador que: - Espere 500ms despu\u00e9s de escribir - Luego haga la b\u00fasqueda - Cancele b\u00fasquedas anteriores</p>"},{"location":"content/p10/#errores-comunes-y-soluciones","title":"Errores Comunes y Soluciones","text":""},{"location":"content/p10/#error-1-bucle-infinito","title":"Error 1: \"Bucle Infinito\"","text":"<pre><code>// MAL - Causa bucle infinito\nconst [datos, setDatos] = useState([]);\nuseEffect(() =&gt; {\n  setDatos([...datos, 'nuevo']); // \u00a1Cambia 'datos' sin dependencias!\n});\n\n// BIEN - Especifica dependencias\nuseEffect(() =&gt; {\n  // Solo ejecutar bajo ciertas condiciones\n}, []);\n</code></pre>"},{"location":"content/p10/#error-2-dependencias-faltantes","title":"Error 2: \"Dependencias Faltantes\"","text":"<pre><code>// MAL - Usa 'usuario' pero no est\u00e1 en dependencias\nuseEffect(() =&gt; {\n  console.log(usuario.nombre);\n}, []); // \u00a1Falta [usuario]!\n\n// BIEN - Incluye todas las dependencias\nuseEffect(() =&gt; {\n  console.log(usuario.nombre);\n}, [usuario]);\n</code></pre>"},{"location":"content/p10/#error-3-no-limpiar-efectos","title":"Error 3: \"No Limpiar Efectos\"","text":"<pre><code>// MAL - No limpia el temporizador\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {}, 1000);\n}, []);\n\n// BIEN - Limpia el temporizador\nuseEffect(() =&gt; {\n  const timer = setInterval(() =&gt; {}, 1000);\n  return () =&gt; clearInterval(timer);\n}, []);\n</code></pre>"},{"location":"content/p10/#consejos-avanzados","title":"Consejos Avanzados","text":""},{"location":"content/p10/#1-multiples-useeffect","title":"1. M\u00faltiples useEffect","text":"<p>Puedes usar varios useEffect para diferentes prop\u00f3sitos:</p> <pre><code>function MiComponente() {\n  // Efecto para datos\n  useEffect(() =&gt; {\n    obtenerDatos();\n  }, []);\n\n  // Efecto para t\u00edtulo\n  useEffect(() =&gt; {\n    document.title = titulo;\n  }, [titulo]);\n\n  // Efecto para temporizador\n  useEffect(() =&gt; {\n    const timer = setInterval(() =&gt; {}, 1000);\n    return () =&gt; clearInterval(timer);\n  }, []);\n}\n</code></pre>"},{"location":"content/p10/#2-efecto-condicional","title":"2. Efecto Condicional","text":"<pre><code>useEffect(() =&gt; {\n  if (usuario &amp;&amp; usuario.id) {\n    obtenerPerfilUsuario(usuario.id);\n  }\n}, [usuario]);\n</code></pre>"},{"location":"content/p10/#3-evitar-efectos-innecesarios","title":"3. Evitar Efectos Innecesarios","text":"<pre><code>// En lugar de esto:\nuseEffect(() =&gt; {\n  setTotal(precio * cantidad);\n}, [precio, cantidad]);\n\n// Mejor hacer esto:\nconst total = precio * cantidad; // C\u00e1lculo directo\n</code></pre>"},{"location":"content/p10/#ejemplos-con-api-playground-y-typescript","title":"Ejemplos con API Playground y TypeScript","text":"<p>Vamos a ver ejemplos pr\u00e1cticos usando la API Playground de Mockoon con TypeScript para gestionar usuarios.</p>"},{"location":"content/p10/#tipos-typescript-para-usuarios","title":"Tipos TypeScript para Usuarios","text":"<p>Primero, definamos tipos simples para trabajar con usuarios:</p> <pre><code>// Tipos para el recurso users\ntype Usuario = {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  address: string;\n  birthdate: string;\n  isActive: boolean;\n};\n\n// Tipo para estado de carga\ntype EstadoCarga = {\n  cargando: boolean;\n  error: string | null;\n  completado: boolean;\n};\n</code></pre>"},{"location":"content/p10/#ejemplo-1-obtener-usuarios-con-useeffect","title":"Ejemplo 1: Obtener Usuarios con useEffect","text":"<p>Este ejemplo muestra c\u00f3mo obtener una lista de usuarios al cargar el componente:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction ListaUsuarios() {\n  const [usuarios, setUsuarios] = useState&lt;Usuario[]&gt;([]);\n  const [estado, setEstado] = useState&lt;EstadoCarga&gt;({\n    cargando: false,\n    error: null,\n    completado: false\n  });\n\n  useEffect(() =&gt; {\n    // Funci\u00f3n para obtener usuarios\n    const obtenerUsuarios = async () =&gt; {\n      setEstado({ cargando: true, error: null, completado: false });\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/users');\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n        setEstado({ cargando: false, error: null, completado: true });\n      } catch (error) {\n        console.error('Error al obtener usuarios:', error);\n        setEstado({ \n          cargando: false, \n          error: error instanceof Error ? error.message : 'Error desconocido', \n          completado: true \n        });\n      }\n    };\n\n    obtenerUsuarios();\n  }, []); // Se ejecuta solo al montar el componente\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de Usuarios&lt;/h2&gt;\n\n      {estado.cargando &amp;&amp; &lt;p&gt;Cargando usuarios...&lt;/p&gt;}\n\n      {estado.error &amp;&amp; (\n        &lt;div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee' }}&gt;\n          Error: {estado.error}\n        &lt;/div&gt;\n      )}\n\n      {estado.completado &amp;&amp; !estado.error &amp;&amp; usuarios.length === 0 &amp;&amp; (\n        &lt;p&gt;No se encontraron usuarios&lt;/p&gt;\n      )}\n\n      &lt;ul&gt;\n        {usuarios.map(usuario =&gt; (\n          &lt;li key={usuario.id} style={{ \n            padding: '10px', \n            margin: '5px 0',\n            backgroundColor: usuario.isActive ? '#e6ffe6' : '#ffe6e6',\n            borderRadius: '4px'\n          }}&gt;\n            &lt;strong&gt;{usuario.name}&lt;/strong&gt; ({usuario.email})\n            &lt;br /&gt;\n            &lt;span&gt;Tel\u00e9fono: {usuario.phone}&lt;/span&gt;\n            &lt;span style={{ \n              marginLeft: '10px',\n              color: usuario.isActive ? 'green' : 'red'\n            }}&gt;\n              {usuario.isActive ? '\u25cf Activo' : '\u25cf Inactivo'}\n            &lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p10/#ejemplo-2-useeffect-con-dependencias-para-busqueda","title":"Ejemplo 2: useEffect con Dependencias para B\u00fasqueda","text":"<p>Este ejemplo muestra c\u00f3mo buscar usuarios cuando cambia un t\u00e9rmino de b\u00fasqueda:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction BuscadorUsuarios() {\n  const [termino, setTermino] = useState('');\n  const [usuarios, setUsuarios] = useState&lt;Usuario[]&gt;([]);\n  const [estado, setEstado] = useState&lt;EstadoCarga&gt;({\n    cargando: false,\n    error: null,\n    completado: false\n  });\n\n  // Este efecto se ejecuta cuando cambia el t\u00e9rmino de b\u00fasqueda\n  useEffect(() =&gt; {\n    // Si el t\u00e9rmino est\u00e1 vac\u00edo, no hacemos nada\n    if (termino.trim() === '') {\n      setUsuarios([]);\n      setEstado({ cargando: false, error: null, completado: false });\n      return;\n    }\n\n    // Funci\u00f3n para buscar usuarios\n    const buscarUsuarios = async () =&gt; {\n      setEstado({ cargando: true, error: null, completado: false });\n\n      try {\n        // URL con par\u00e1metro de b\u00fasqueda\n        const url = `https://playground.mockoon.com/users?q=${encodeURIComponent(termino)}`;\n        const respuesta = await fetch(url);\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n        setEstado({ cargando: false, error: null, completado: true });\n      } catch (error) {\n        console.error('Error al buscar usuarios:', error);\n        setEstado({ \n          cargando: false, \n          error: error instanceof Error ? error.message : 'Error desconocido', \n          completado: true \n        });\n      }\n    };\n\n    // Debounce: esperamos 500ms despu\u00e9s de escribir para buscar\n    const timeoutId = setTimeout(() =&gt; {\n      buscarUsuarios();\n    }, 500);\n\n    // Limpieza: cancelamos el timeout si el t\u00e9rmino cambia antes de los 500ms\n    return () =&gt; clearTimeout(timeoutId);\n  }, [termino]); // Se ejecuta cuando cambia el t\u00e9rmino\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Buscador de Usuarios&lt;/h2&gt;\n\n      &lt;input\n        type=\"text\"\n        value={termino}\n        onChange={(e) =&gt; setTermino(e.target.value)}\n        placeholder=\"Buscar por nombre o email...\"\n        style={{\n          padding: '10px',\n          width: '100%',\n          marginBottom: '20px',\n          borderRadius: '4px',\n          border: '1px solid #ccc'\n        }}\n      /&gt;\n\n      {estado.cargando &amp;&amp; &lt;p&gt;Buscando usuarios...&lt;/p&gt;}\n\n      {estado.error &amp;&amp; (\n        &lt;div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee' }}&gt;\n          Error: {estado.error}\n        &lt;/div&gt;\n      )}\n\n      {estado.completado &amp;&amp; !estado.error &amp;&amp; usuarios.length === 0 &amp;&amp; (\n        &lt;p&gt;No se encontraron usuarios que coincidan con \"{termino}\"&lt;/p&gt;\n      )}\n\n      &lt;ul style={{ padding: 0, listStyle: 'none' }}&gt;\n        {usuarios.map(usuario =&gt; (\n          &lt;li key={usuario.id} style={{ \n            padding: '10px', \n            margin: '5px 0',\n            backgroundColor: '#f5f5f5',\n            borderRadius: '4px',\n            borderLeft: `4px solid ${usuario.isActive ? 'green' : 'red'}`\n          }}&gt;\n            &lt;strong&gt;{usuario.name}&lt;/strong&gt;\n            &lt;br /&gt;\n            &lt;span&gt;{usuario.email}&lt;/span&gt;\n            &lt;br /&gt;\n            &lt;span style={{ \n              display: 'inline-block',\n              padding: '2px 6px',\n              backgroundColor: '#f0f0f0',\n              borderRadius: '4px',\n              fontSize: '0.8em',\n              marginTop: '5px'\n            }}&gt;\n              {usuario.birthdate}\n            &lt;/span&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p10/#ejemplo-3-multiples-efectos-para-gestion-de-usuarios","title":"Ejemplo 3: M\u00faltiples Efectos para Gesti\u00f3n de Usuarios","text":"<p>Este ejemplo muestra c\u00f3mo usar m\u00faltiples efectos para diferentes aspectos de la gesti\u00f3n de usuarios:</p> <pre><code>import { useState, useEffect } from 'react';\n\nfunction GestorUsuarios() {\n  const [usuarios, setUsuarios] = useState&lt;Usuario[]&gt;([]);\n  const [usuarioSeleccionado, setUsuarioSeleccionado] = useState&lt;string | null&gt;(null);\n  const [detalleUsuario, setDetalleUsuario] = useState&lt;Usuario | null&gt;(null);\n  const [estadisticas, setEstadisticas] = useState({\n    total: 0,\n    activos: 0,\n    inactivos: 0\n  });\n  const [estado, setEstado] = useState&lt;EstadoCarga&gt;({\n    cargando: false,\n    error: null,\n    completado: false\n  });\n\n  // Efecto 1: Cargar lista de usuarios\n  useEffect(() =&gt; {\n    const cargarUsuarios = async () =&gt; {\n      setEstado({ cargando: true, error: null, completado: false });\n\n      try {\n        const respuesta = await fetch('https://playground.mockoon.com/users');\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setUsuarios(datos);\n        setEstado({ cargando: false, error: null, completado: true });\n      } catch (error) {\n        setEstado({ \n          cargando: false, \n          error: error instanceof Error ? error.message : 'Error desconocido', \n          completado: true \n        });\n      }\n    };\n\n    cargarUsuarios();\n  }, []); // Solo al montar\n\n  // Efecto 2: Calcular estad\u00edsticas cuando cambia la lista de usuarios\n  useEffect(() =&gt; {\n    const activos = usuarios.filter(u =&gt; u.isActive).length;\n\n    setEstadisticas({\n      total: usuarios.length,\n      activos: activos,\n      inactivos: usuarios.length - activos\n    });\n  }, [usuarios]); // Se ejecuta cuando cambia la lista de usuarios\n\n  // Efecto 3: Cargar detalles cuando se selecciona un usuario\n  useEffect(() =&gt; {\n    if (usuarioSeleccionado === null) {\n      setDetalleUsuario(null);\n      return;\n    }\n\n    const cargarDetalleUsuario = async () =&gt; {\n      try {\n        const respuesta = await fetch(`https://playground.mockoon.com/users/${usuarioSeleccionado}`);\n\n        if (!respuesta.ok) {\n          throw new Error(`Error: ${respuesta.status}`);\n        }\n\n        const datos = await respuesta.json();\n        setDetalleUsuario(datos);\n      } catch (error) {\n        console.error('Error al cargar detalle:', error);\n        setDetalleUsuario(null);\n      }\n    };\n\n    cargarDetalleUsuario();\n  }, [usuarioSeleccionado]); // Se ejecuta cuando cambia el usuario seleccionado\n\n  return (\n    &lt;div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}&gt;\n      &lt;h2&gt;Gestor de Usuarios&lt;/h2&gt;\n\n      {/* Panel de estad\u00edsticas */}\n      &lt;div style={{ \n        display: 'flex', \n        justifyContent: 'space-around',\n        padding: '15px',\n        backgroundColor: '#f0f0f0',\n        borderRadius: '8px'\n      }}&gt;\n        &lt;div&gt;\n          &lt;strong&gt;Total:&lt;/strong&gt; {estadisticas.total}\n        &lt;/div&gt;\n        &lt;div style={{ color: 'green' }}&gt;\n          &lt;strong&gt;Activos:&lt;/strong&gt; {estadisticas.activos}\n        &lt;/div&gt;\n        &lt;div style={{ color: 'red' }}&gt;\n          &lt;strong&gt;Inactivos:&lt;/strong&gt; {estadisticas.inactivos}\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      {/* Lista de usuarios */}\n      &lt;div style={{ display: 'flex', gap: '20px' }}&gt;\n        &lt;div style={{ flex: 1 }}&gt;\n          &lt;h3&gt;Lista de Usuarios&lt;/h3&gt;\n\n          {estado.cargando &amp;&amp; &lt;p&gt;Cargando usuarios...&lt;/p&gt;}\n\n          {estado.error &amp;&amp; (\n            &lt;div style={{ color: 'red', padding: '10px', backgroundColor: '#ffeeee' }}&gt;\n              Error: {estado.error}\n            &lt;/div&gt;\n          )}\n\n          &lt;ul style={{ padding: 0, listStyle: 'none' }}&gt;\n            {usuarios.map(usuario =&gt; (\n              &lt;li \n                key={usuario.id} \n                onClick={() =&gt; setUsuarioSeleccionado(usuario.id)}\n                style={{ \n                  padding: '10px', \n                  margin: '5px 0',\n                  backgroundColor: usuarioSeleccionado === usuario.id ? '#e6f7ff' : '#f5f5f5',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  borderLeft: `4px solid ${usuario.isActive ? 'green' : 'red'}`\n                }}\n              &gt;\n                &lt;strong&gt;{usuario.name}&lt;/strong&gt;\n                &lt;br /&gt;\n                &lt;small&gt;{usuario.email}&lt;/small&gt;\n              &lt;/li&gt;\n            ))}\n          &lt;/ul&gt;\n        &lt;/div&gt;\n\n        {/* Detalle de usuario */}\n        &lt;div style={{ \n          flex: 1, \n          padding: '15px', \n          backgroundColor: '#f9f9f9',\n          borderRadius: '8px',\n          minHeight: '200px'\n        }}&gt;\n          &lt;h3&gt;Detalle de Usuario&lt;/h3&gt;\n\n          {!usuarioSeleccionado &amp;&amp; (\n            &lt;p&gt;Selecciona un usuario para ver sus detalles&lt;/p&gt;\n          )}\n\n          {usuarioSeleccionado &amp;&amp; !detalleUsuario &amp;&amp; (\n            &lt;p&gt;Cargando detalles...&lt;/p&gt;\n          )}\n\n          {detalleUsuario &amp;&amp; (\n            &lt;div&gt;\n              &lt;h4&gt;{detalleUsuario.name}&lt;/h4&gt;\n              &lt;p&gt;&lt;strong&gt;Email:&lt;/strong&gt; {detalleUsuario.email}&lt;/p&gt;\n              &lt;p&gt;&lt;strong&gt;Tel\u00e9fono:&lt;/strong&gt; {detalleUsuario.phone}&lt;/p&gt;\n              &lt;p&gt;&lt;strong&gt;Direcci\u00f3n:&lt;/strong&gt; {detalleUsuario.address}&lt;/p&gt;\n              &lt;p&gt;&lt;strong&gt;Fecha de nacimiento:&lt;/strong&gt; {detalleUsuario.birthdate}&lt;/p&gt;\n              &lt;p&gt;\n                &lt;strong&gt;Estado:&lt;/strong&gt; \n                &lt;span style={{ \n                  color: detalleUsuario.isActive ? 'green' : 'red',\n                  marginLeft: '5px'\n                }}&gt;\n                  {detalleUsuario.isActive ? 'Activo' : 'Inactivo'}\n                &lt;/span&gt;\n              &lt;/p&gt;\n              &lt;button\n                onClick={() =&gt; setUsuarioSeleccionado(null)}\n                style={{\n                  padding: '8px 15px',\n                  backgroundColor: '#f0f0f0',\n                  border: 'none',\n                  borderRadius: '4px',\n                  cursor: 'pointer',\n                  marginTop: '10px'\n                }}\n              &gt;\n                Cerrar detalle\n              &lt;/button&gt;\n            &lt;/div&gt;\n          )}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p11/","title":"Tutorial: Zustand con Next.js y TypeScript","text":"<p>Este tutorial explica c\u00f3mo integrar Zustand, una librer\u00eda ligera de gesti\u00f3n de estado, en un proyecto Next.js con TypeScript. Tambi\u00e9n incluye una comparaci\u00f3n entre Zustand y useContext para ayudarte a elegir la mejor herramienta para tu proyecto. Usaremos un ejemplo simple de un contador para ilustrar la implementaci\u00f3n.</p> <p>Prerrequisitos</p> <ul> <li>Node.js (versi\u00f3n 18 o superior).</li> <li>Conocimientos b\u00e1sicos de React y TypeScript.</li> </ul>"},{"location":"content/p11/#configuracion-del-proyecto","title":"Configuraci\u00f3n del Proyecto","text":""},{"location":"content/p11/#paso-1-crear-un-proyecto-nextjs","title":"Paso 1: Crear un Proyecto Next.js","text":"<p>Crea un nuevo proyecto Next.js con soporte para TypeScript y Tailwind CSS:</p> <pre><code>npx create-next-app@latest mi-app-zustand --typescript --tailwind --eslint --app --src-dir\ncd mi-app-zustand\n</code></pre> <p>Note</p> <ul> <li><code>--typescript</code>: Habilita TypeScript.</li> <li><code>--tailwind</code>: Agrega Tailwind CSS (opcional).</li> <li><code>--eslint</code>: Incluye ESLint.</li> <li><code>--app</code>: Usa el App Router.</li> <li><code>--src-dir</code>: Organiza el c\u00f3digo en una carpeta <code>src/</code>.</li> </ul>"},{"location":"content/p11/#paso-2-instalar-zustand","title":"Paso 2: Instalar Zustand","text":"<p>Instala Zustand como dependencia:</p> <pre><code>npm install zustand\n</code></pre> <p>Zustand es ligero (~2KB) y tiene excelente soporte para TypeScript.</p>"},{"location":"content/p11/#crear-el-store-de-zustand","title":"Crear el Store de Zustand","text":""},{"location":"content/p11/#paso-3-definir-el-store","title":"Paso 3: Definir el Store","text":"<p>Crea una carpeta <code>stores</code> en <code>src/</code> y un archivo <code>counterStore.ts</code>:</p> <pre><code>// src/stores/counterStore.ts\nimport { create } from 'zustand';\n\ninterface CounterState {\n  count: number;\n  increment: () =&gt; void;\n  decrement: () =&gt; void;\n  reset: () =&gt; void;\n}\n\nexport const useCounterStore = create&lt;CounterState&gt;((set) =&gt; ({\n  count: 0,\n  increment: () =&gt; set((state) =&gt; ({ count: state.count + 1 })),\n  decrement: () =&gt; set((state) =&gt; ({ count: state.count - 1 })),\n  reset: () =&gt; set({ count: 0 }),\n}));\n</code></pre> <p>Note</p> <ul> <li><code>create&lt;CounterState&gt;</code>: Define el estado y acciones con tipos TypeScript.</li> <li><code>set</code>: Actualiza el estado de forma inmutable.</li> </ul>"},{"location":"content/p11/#crear-un-componente-cliente","title":"Crear un Componente Cliente","text":""},{"location":"content/p11/#paso-4-componente-con-zustand","title":"Paso 4: Componente con Zustand","text":"<p>Crea un componente cliente en <code>src/components/Counter.tsx</code> (los hooks requieren <code>'use client'</code> en Next.js):</p> <pre><code>// src/components/Counter.tsx\n'use client';\n\nimport { useCounterStore } from '@/stores/counterStore';\n\nexport default function Counter() {\n  const { count, increment, decrement, reset } = useCounterStore();\n\n  return (\n    &lt;div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\"&gt;\n      &lt;h1 className=\"text-4xl font-bold mb-4\"&gt;Contador con Zustand&lt;/h1&gt;\n      &lt;p className=\"text-6xl mb-6\"&gt;{count}&lt;/p&gt;\n      &lt;div className=\"space-x-4\"&gt;\n        &lt;button\n          onClick={increment}\n          className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n        &gt;\n          +1\n        &lt;/button&gt;\n        &lt;button\n          onClick={decrement}\n          className=\"bg-red-500 hover:bg-red-700 text-white font-bold py-2 px-4 rounded\"\n        &gt;\n          -1\n        &lt;/button&gt;\n        &lt;button\n          onClick={reset}\n          className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded\"\n        &gt;\n          Reset\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Note</p> <ul> <li><code>'use client'</code>: Necesario para usar hooks en Next.js.</li> <li>Tailwind CSS se usa para estilos r\u00e1pidos.</li> </ul>"},{"location":"content/p11/#paso-5-usar-el-componente-en-una-pagina","title":"Paso 5: Usar el Componente en una P\u00e1gina","text":"<p>Edita <code>src/app/page.tsx</code> para mostrar el contador:</p> <pre><code>// src/app/page.tsx\nimport Counter from '@/components/Counter';\n\nexport default function Home() {\n  return &lt;Counter /&gt;;\n}\n</code></pre>"},{"location":"content/p11/#paso-6-ejecutar-el-proyecto","title":"Paso 6: Ejecutar el Proyecto","text":"<p>Inicia el servidor de desarrollo:</p> <pre><code>npm run dev\n</code></pre> <p>Abre <code>http://localhost:3000</code> en tu navegador para ver el contador funcionando.</p>"},{"location":"content/p11/#comparacion-zustand-vs-usecontext","title":"Comparaci\u00f3n: Zustand vs useContext","text":""},{"location":"content/p11/#que-son","title":"\u00bfQu\u00e9 son?","text":"<ul> <li>Zustand: Librer\u00eda ligera (~2KB) para estado global basado en stores. Similar a Redux, pero con menos boilerplate.</li> <li>useContext: API nativa de React para compartir estado entre componentes, combinada con <code>useState</code> o <code>useReducer</code>.</li> </ul>"},{"location":"content/p11/#ejemplo-con-usecontext","title":"Ejemplo con useContext","text":"<p>Para comparar, aqu\u00ed est\u00e1 el mismo contador usando <code>useContext</code> con <code>useState</code>:</p> <pre><code>// src/context/CounterContext.tsx\nimport { createContext, useContext, useState, ReactNode } from 'react';\n\ninterface CounterContextType {\n  count: number;\n  increment: () =&gt; void;\n}\n\nconst CounterContext = createContext&lt;CounterContextType | undefined&gt;(undefined);\n\nexport function CounterProvider({ children }: { children: ReactNode }) {\n  const [count, setCount] = useState(0);\n  const increment = () =&gt; setCount(count + 1);\n\n  return (\n    &lt;CounterContext.Provider value={{ count, increment }}&gt;\n      {children}\n    &lt;/CounterContext.Provider&gt;\n  );\n}\n\nexport function useCounter() {\n  const context = useContext(CounterContext);\n  if (!context) throw new Error('useCounter debe usarse dentro de CounterProvider');\n  return context;\n}\n\n// src/components/Counter.tsx\n'use client';\n\nimport { useCounter } from '@/context/CounterContext';\n\nfunction Counter() {\n  const { count, increment } = useCounter();\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Contador: {count}&lt;/p&gt;\n      &lt;button onClick={increment}&gt;+1&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// src/app/page.tsx\nimport { CounterProvider } from '@/context/CounterContext';\nimport Counter from '@/components/Counter';\n\nexport default function App() {\n  return (\n    &lt;CounterProvider&gt;\n      &lt;Counter /&gt;\n    &lt;/CounterProvider&gt;\n  );\n}\n</code></pre>"},{"location":"content/p11/#comparacion-detallada","title":"Comparaci\u00f3n Detallada","text":"Aspecto Zustand useContext (con useState/useReducer) Complejidad Simple, API minimalista. M\u00e1s complejo para estados grandes. Boilerplate M\u00ednimo, un solo store. Requiere Context, Provider y hooks. Rendimiento Solo re-renderiza componentes suscritos. Puede causar re-renderizados innecesarios. TypeScript Tipos inferidos autom\u00e1ticamente. Tipos manuales para el contexto. Escalabilidad Ideal para apps medianas/grandes. Mejor para apps peque\u00f1as. Persistencia Middleware (ej: localStorage). Soluciones manuales. Dependencias Requiere <code>zustand</code>. Nativo de React."},{"location":"content/p11/#ventajas-y-desventajas","title":"Ventajas y Desventajas","text":"<p>Zustand: - Ventajas:   - Menos c\u00f3digo y m\u00e1s simple.   - Evita re-renderizados innecesarios.   - Middleware para persistencia y debugging.   - Escalable con m\u00faltiples stores. - Desventajas:   - Dependencia externa.   - Curva de aprendizaje inicial.</p> <p>useContext: - Ventajas:   - Nativo, sin dependencias.   - Ideal para estados simples (ej: temas).   - Flexible con <code>useReducer</code>. - Desventajas:   - M\u00e1s c\u00f3digo para configurar.   - Puede causar re-renderizados si no se optimiza.   - Dif\u00edcil de escalar en apps grandes.</p>"},{"location":"content/p11/#cuando-usar-cada-uno","title":"Cu\u00e1ndo Usar Cada Uno","text":"<ul> <li>Zustand:</li> <li>Apps medianas/grandes con estados complejos.</li> <li>Necesitas rendimiento optimizado.</li> <li>Quieres middleware (persistencia, devtools).</li> <li> <p>Ejemplo: Carrito de compras, autenticaci\u00f3n.</p> </li> <li> <p>useContext:</p> </li> <li>Apps peque\u00f1as con estados simples.</li> <li>Sin dependencias externas.</li> <li>Ejemplo: Tema claro/oscuro, formularios.</li> </ul>"},{"location":"content/p12/","title":"Semana 12 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p12/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p12/#codigo-gw7ghwb1","title":"C\u00f3digo: GW7GHWB1","text":""},{"location":"content/p13/","title":"Semana 13 - Next.js con TypeScript, Fetch y MockAPI","text":""},{"location":"content/p13/#introduccion","title":"Introducci\u00f3n","text":"<p>En esta semana aprenderemos a integrar Next.js con TypeScript para realizar peticiones HTTP usando fetch y MockAPI. Crearemos un servicio centralizado para manejar todas las peticiones y implementaremos operaciones CRUD completas.</p>"},{"location":"content/p13/#configuracion-inicial","title":"Configuraci\u00f3n Inicial","text":""},{"location":"content/p13/#1-configuracion-de-mockapi","title":"1. Configuraci\u00f3n de MockAPI","text":"<p>Primero, ve a MockAPI.io y crea una cuenta gratuita. Luego:</p> <ol> <li>Crea un nuevo proyecto</li> <li>Crea un endpoint llamado <code>users</code> con los siguientes campos:</li> <li><code>id</code> (number, auto-increment)</li> <li><code>name</code> (string)</li> <li><code>email</code> (string)</li> <li><code>avatar</code> (string, URL de imagen)</li> <li><code>createdAt</code> (datetime)</li> </ol> <p>Tu URL base ser\u00e1 algo como: <code>https://[tu-id].mockapi.io/api/v1/</code></p>"},{"location":"content/p13/#2-estructura-del-proyecto","title":"2. Estructura del Proyecto","text":"<pre><code>src/\n\u251c\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 api.ts          # Servicio para peticiones\n\u251c\u2500\u2500 types/\n\u2502   \u2514\u2500\u2500 user.ts         # Interfaces TypeScript\n\u251c\u2500\u2500 components/\n\u2502   \u251c\u2500\u2500 UserList.tsx    # Lista de usuarios\n\u2502   \u251c\u2500\u2500 UserForm.tsx    # Formulario de usuario\n\u2502   \u2514\u2500\u2500 UserCard.tsx    # Tarjeta de usuario\n\u2514\u2500\u2500 app/\n    \u251c\u2500\u2500 page.tsx        # P\u00e1gina principal\n    \u2514\u2500\u2500 users/\n        \u2514\u2500\u2500 page.tsx    # P\u00e1gina de usuarios\n</code></pre>"},{"location":"content/p13/#implementacion","title":"Implementaci\u00f3n","text":""},{"location":"content/p13/#1-interfaces-typescript","title":"1. Interfaces TypeScript","text":"<p>Primero, definamos las interfaces para nuestros datos:</p> <pre><code>// src/types/user.ts\nexport interface User {\n  id: string;\n  name: string;\n  email: string;\n  avatar: string;\n  createdAt: string;\n}\n\nexport interface CreateUserData {\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\nexport interface UpdateUserData extends Partial&lt;CreateUserData&gt; {}\n\nexport interface ApiResponse&lt;T&gt; {\n  data?: T;\n  error?: string;\n  loading: boolean;\n}\n</code></pre>"},{"location":"content/p13/#2-servicio-api-centralizado","title":"2. Servicio API Centralizado","text":"<p>Creamos un servicio que maneje todas las peticiones HTTP:</p> <pre><code>// src/lib/api.ts\nimport { User, CreateUserData, UpdateUserData } from '@/types/user';\n\nconst API_BASE_URL = 'https://[tu-id].mockapi.io/api/v1';\n\nclass ApiService {\n  private async request&lt;T&gt;(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise&lt;T&gt; {\n    const url = `${API_BASE_URL}${endpoint}`;\n\n    const config: RequestInit = {\n      headers: {\n        'Content-Type': 'application/json',\n        ...options.headers,\n      },\n      ...options,\n    };\n\n    try {\n      const response = await fetch(url, config);\n\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Obtener todos los usuarios\n  async getUsers(): Promise&lt;User[]&gt; {\n    return this.request&lt;User[]&gt;('/users');\n  }\n\n  // Obtener un usuario por ID\n  async getUserById(id: string): Promise&lt;User&gt; {\n    return this.request&lt;User&gt;(`/users/${id}`);\n  }\n\n  // Crear un nuevo usuario\n  async createUser(userData: CreateUserData): Promise&lt;User&gt; {\n    return this.request&lt;User&gt;('/users', {\n      method: 'POST',\n      body: JSON.stringify({\n        ...userData,\n        avatar: userData.avatar || `https://api.dicebear.com/7.x/avataaars/svg?seed=${userData.name}`,\n      }),\n    });\n  }\n\n  // Actualizar un usuario\n  async updateUser(id: string, userData: UpdateUserData): Promise&lt;User&gt; {\n    return this.request&lt;User&gt;(`/users/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(userData),\n    });\n  }\n\n  // Eliminar un usuario\n  async deleteUser(id: string): Promise&lt;void&gt; {\n    return this.request&lt;void&gt;(`/users/${id}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Buscar usuarios por nombre\n  async searchUsers(query: string): Promise&lt;User[]&gt; {\n    return this.request&lt;User[]&gt;(`/users?search=${encodeURIComponent(query)}`);\n  }\n}\n\nexport const apiService = new ApiService();\n</code></pre>"},{"location":"content/p13/#3-hook-personalizado-para-estado","title":"3. Hook Personalizado para Estado","text":"<p>Creamos un hook para manejar el estado de las peticiones:</p> <pre><code>// src/hooks/useApi.ts\nimport { useState, useEffect } from 'react';\nimport { ApiResponse } from '@/types/user';\n\nexport function useApi&lt;T&gt;(\n  apiCall: () =&gt; Promise&lt;T&gt;,\n  dependencies: any[] = []\n): ApiResponse&lt;T&gt; {\n  const [data, setData] = useState&lt;T | undefined&gt;(undefined);\n  const [error, setError] = useState&lt;string | undefined&gt;(undefined);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() =&gt; {\n    let isMounted = true;\n\n    const fetchData = async () =&gt; {\n      try {\n        setLoading(true);\n        setError(undefined);\n        const result = await apiCall();\n\n        if (isMounted) {\n          setData(result);\n        }\n      } catch (err) {\n        if (isMounted) {\n          setError(err instanceof Error ? err.message : 'Error desconocido');\n        }\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n\n    fetchData();\n\n    return () =&gt; {\n      isMounted = false;\n    };\n  }, dependencies);\n\n  return { data, error, loading };\n}\n</code></pre>"},{"location":"content/p13/#4-componente-usercard","title":"4. Componente UserCard","text":"<pre><code>// src/components/UserCard.tsx\nimport { User } from '@/types/user';\nimport { apiService } from '@/lib/api';\n\ninterface UserCardProps {\n  user: User;\n  onDelete: (id: string) =&gt; void;\n  onEdit: (user: User) =&gt; void;\n}\n\nexport default function UserCard({ user, onDelete, onEdit }: UserCardProps) {\n  const handleDelete = async () =&gt; {\n    if (confirm('\u00bfEst\u00e1s seguro de que quieres eliminar este usuario?')) {\n      try {\n        await apiService.deleteUser(user.id);\n        onDelete(user.id);\n      } catch (error) {\n        alert('Error al eliminar el usuario');\n      }\n    }\n  };\n\n  return (\n    &lt;div className=\"bg-white rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow\"&gt;\n      &lt;div className=\"flex items-center space-x-4\"&gt;\n        &lt;img\n          src={user.avatar}\n          alt={user.name}\n          className=\"w-16 h-16 rounded-full object-cover\"\n        /&gt;\n        &lt;div className=\"flex-1\"&gt;\n          &lt;h3 className=\"text-lg font-semibold text-gray-900\"&gt;{user.name}&lt;/h3&gt;\n          &lt;p className=\"text-gray-600\"&gt;{user.email}&lt;/p&gt;\n          &lt;p className=\"text-sm text-gray-500\"&gt;\n            Creado: {new Date(user.createdAt).toLocaleDateString()}\n          &lt;/p&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div className=\"mt-4 flex space-x-2\"&gt;\n        &lt;button\n          onClick={() =&gt; onEdit(user)}\n          className=\"px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors\"\n        &gt;\n          Editar\n        &lt;/button&gt;\n        &lt;button\n          onClick={handleDelete}\n          className=\"px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors\"\n        &gt;\n          Eliminar\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p13/#5-componente-userform","title":"5. Componente UserForm","text":"<pre><code>// src/components/UserForm.tsx\nimport { useState } from 'react';\nimport { User, CreateUserData } from '@/types/user';\nimport { apiService } from '@/lib/api';\n\ninterface UserFormProps {\n  user?: User;\n  onSubmit: (user: User) =&gt; void;\n  onCancel: () =&gt; void;\n}\n\nexport default function UserForm({ user, onSubmit, onCancel }: UserFormProps) {\n  const [formData, setFormData] = useState({\n    name: user?.name || '',\n    email: user?.email || '',\n    avatar: user?.avatar || '',\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState&lt;string | null&gt;(null);\n\n  const handleSubmit = async (e: React.FormEvent) =&gt; {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n\n    try {\n      let result: User;\n\n      if (user) {\n        // Actualizar usuario existente\n        result = await apiService.updateUser(user.id, formData);\n      } else {\n        // Crear nuevo usuario\n        result = await apiService.createUser(formData);\n      }\n\n      onSubmit(result);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Error al guardar');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    &lt;div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4\"&gt;\n      &lt;div className=\"bg-white rounded-lg p-6 w-full max-w-md\"&gt;\n        &lt;h2 className=\"text-xl font-bold mb-4\"&gt;\n          {user ? 'Editar Usuario' : 'Crear Usuario'}\n        &lt;/h2&gt;\n\n        {error &amp;&amp; (\n          &lt;div className=\"mb-4 p-3 bg-red-100 border border-red-400 text-red-700 rounded\"&gt;\n            {error}\n          &lt;/div&gt;\n        )}\n\n        &lt;form onSubmit={handleSubmit} className=\"space-y-4\"&gt;\n          &lt;div&gt;\n            &lt;label className=\"block text-sm font-medium text-gray-700 mb-1\"&gt;\n              Nombre\n            &lt;/label&gt;\n            &lt;input\n              type=\"text\"\n              required\n              value={formData.name}\n              onChange={(e) =&gt; setFormData({ ...formData, name: e.target.value })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            /&gt;\n          &lt;/div&gt;\n\n          &lt;div&gt;\n            &lt;label className=\"block text-sm font-medium text-gray-700 mb-1\"&gt;\n              Email\n            &lt;/label&gt;\n            &lt;input\n              type=\"email\"\n              required\n              value={formData.email}\n              onChange={(e) =&gt; setFormData({ ...formData, email: e.target.value })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            /&gt;\n          &lt;/div&gt;\n\n          &lt;div&gt;\n            &lt;label className=\"block text-sm font-medium text-gray-700 mb-1\"&gt;\n              Avatar URL (opcional)\n            &lt;/label&gt;\n            &lt;input\n              type=\"url\"\n              value={formData.avatar}\n              onChange={(e) =&gt; setFormData({ ...formData, avatar: e.target.value })}\n              className=\"w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            /&gt;\n          &lt;/div&gt;\n\n          &lt;div className=\"flex space-x-3 pt-4\"&gt;\n            &lt;button\n              type=\"submit\"\n              disabled={loading}\n              className=\"flex-1 bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 disabled:opacity-50 disabled:cursor-not-allowed\"\n            &gt;\n              {loading ? 'Guardando...' : (user ? 'Actualizar' : 'Crear')}\n            &lt;/button&gt;\n            &lt;button\n              type=\"button\"\n              onClick={onCancel}\n              className=\"flex-1 bg-gray-300 text-gray-700 py-2 px-4 rounded-md hover:bg-gray-400\"\n            &gt;\n              Cancelar\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/form&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p13/#6-componente-userlist","title":"6. Componente UserList","text":"<pre><code>// src/components/UserList.tsx\nimport { useState } from 'react';\nimport { User } from '@/types/user';\nimport { useApi } from '@/hooks/useApi';\nimport { apiService } from '@/lib/api';\nimport UserCard from './UserCard';\nimport UserForm from './UserForm';\n\nexport default function UserList() {\n  const [users, setUsers] = useState&lt;User[]&gt;([]);\n  const [showForm, setShowForm] = useState(false);\n  const [editingUser, setEditingUser] = useState&lt;User | undefined&gt;(undefined);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const { data, error, loading } = useApi(() =&gt; apiService.getUsers());\n\n  // Actualizar la lista local cuando se cargan los datos\n  useState(() =&gt; {\n    if (data) {\n      setUsers(data);\n    }\n  }, [data]);\n\n  const handleUserSubmit = (user: User) =&gt; {\n    if (editingUser) {\n      // Actualizar usuario existente\n      setUsers(users.map(u =&gt; u.id === user.id ? user : u));\n    } else {\n      // Agregar nuevo usuario\n      setUsers([user, ...users]);\n    }\n    setShowForm(false);\n    setEditingUser(undefined);\n  };\n\n  const handleUserDelete = (id: string) =&gt; {\n    setUsers(users.filter(u =&gt; u.id !== id));\n  };\n\n  const handleUserEdit = (user: User) =&gt; {\n    setEditingUser(user);\n    setShowForm(true);\n  };\n\n  const handleSearch = async () =&gt; {\n    if (searchQuery.trim()) {\n      try {\n        const results = await apiService.searchUsers(searchQuery);\n        setUsers(results);\n      } catch (error) {\n        console.error('Error en b\u00fasqueda:', error);\n      }\n    } else {\n      // Recargar todos los usuarios\n      if (data) {\n        setUsers(data);\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      &lt;div className=\"flex justify-center items-center h-64\"&gt;\n        &lt;div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  if (error) {\n    return (\n      &lt;div className=\"text-center text-red-600 p-4\"&gt;\n        &lt;p&gt;Error al cargar usuarios: {error}&lt;/p&gt;\n        &lt;button \n          onClick={() =&gt; window.location.reload()}\n          className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600\"\n        &gt;\n          Reintentar\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;div className=\"max-w-6xl mx-auto p-6\"&gt;\n      &lt;div className=\"mb-6\"&gt;\n        &lt;h1 className=\"text-3xl font-bold text-gray-900 mb-4\"&gt;\n          Gesti\u00f3n de Usuarios\n        &lt;/h1&gt;\n\n        &lt;div className=\"flex flex-col sm:flex-row gap-4 mb-6\"&gt;\n          &lt;div className=\"flex-1 flex gap-2\"&gt;\n            &lt;input\n              type=\"text\"\n              placeholder=\"Buscar usuarios...\"\n              value={searchQuery}\n              onChange={(e) =&gt; setSearchQuery(e.target.value)}\n              className=\"flex-1 px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            /&gt;\n            &lt;button\n              onClick={handleSearch}\n              className=\"px-4 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600\"\n            &gt;\n              Buscar\n            &lt;/button&gt;\n          &lt;/div&gt;\n\n          &lt;button\n            onClick={() =&gt; setShowForm(true)}\n            className=\"px-6 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\"\n          &gt;\n            Nuevo Usuario\n          &lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      {users.length === 0 ? (\n        &lt;div className=\"text-center text-gray-500 py-12\"&gt;\n          &lt;p className=\"text-xl\"&gt;No hay usuarios disponibles&lt;/p&gt;\n          &lt;p className=\"mt-2\"&gt;Crea el primer usuario para comenzar&lt;/p&gt;\n        &lt;/div&gt;\n      ) : (\n        &lt;div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\"&gt;\n          {users.map((user) =&gt; (\n            &lt;UserCard\n              key={user.id}\n              user={user}\n              onDelete={handleUserDelete}\n              onEdit={handleUserEdit}\n            /&gt;\n          ))}\n        &lt;/div&gt;\n      )}\n\n      {showForm &amp;&amp; (\n        &lt;UserForm\n          user={editingUser}\n          onSubmit={handleUserSubmit}\n          onCancel={() =&gt; {\n            setShowForm(false);\n            setEditingUser(undefined);\n          }}\n        /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p13/#7-pagina-principal","title":"7. P\u00e1gina Principal","text":"<pre><code>// src/app/page.tsx\nimport Link from 'next/link';\n\nexport default function Home() {\n  return (\n    &lt;div className=\"min-h-screen bg-gray-50\"&gt;\n      &lt;div className=\"max-w-4xl mx-auto py-12 px-6\"&gt;\n        &lt;div className=\"text-center\"&gt;\n          &lt;h1 className=\"text-4xl font-bold text-gray-900 mb-8\"&gt;\n            Next.js + TypeScript + MockAPI\n          &lt;/h1&gt;\n          &lt;p className=\"text-xl text-gray-600 mb-12\"&gt;\n            Tutorial completo de integraci\u00f3n con fetch y manejo de estado\n          &lt;/p&gt;\n\n          &lt;div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\"&gt;\n            &lt;div className=\"bg-white rounded-lg shadow-md p-6\"&gt;\n              &lt;h2 className=\"text-2xl font-semibold mb-4\"&gt;Caracter\u00edsticas&lt;/h2&gt;\n              &lt;ul className=\"text-left space-y-2 text-gray-600\"&gt;\n                &lt;li&gt;\u2705 TypeScript con interfaces tipadas&lt;/li&gt;\n                &lt;li&gt;\u2705 Servicio API centralizado&lt;/li&gt;\n                &lt;li&gt;\u2705 Operaciones CRUD completas&lt;/li&gt;\n                &lt;li&gt;\u2705 Manejo de errores y loading&lt;/li&gt;\n                &lt;li&gt;\u2705 B\u00fasqueda en tiempo real&lt;/li&gt;\n                &lt;li&gt;\u2705 UI responsive con Tailwind&lt;/li&gt;\n              &lt;/ul&gt;\n            &lt;/div&gt;\n\n            &lt;div className=\"bg-white rounded-lg shadow-md p-6\"&gt;\n              &lt;h2 className=\"text-2xl font-semibold mb-4\"&gt;Tecnolog\u00edas&lt;/h2&gt;\n              &lt;ul className=\"text-left space-y-2 text-gray-600\"&gt;\n                &lt;li&gt;\ud83d\ude80 Next.js 14&lt;/li&gt;\n                &lt;li&gt;\ud83d\udcd8 TypeScript&lt;/li&gt;\n                &lt;li&gt;\ud83c\udf10 Fetch API&lt;/li&gt;\n                &lt;li&gt;\ud83c\udfa8 Tailwind CSS&lt;/li&gt;\n                &lt;li&gt;\ud83d\udce1 MockAPI.io&lt;/li&gt;\n                &lt;li&gt;\ud83d\udd04 React Hooks&lt;/li&gt;\n              &lt;/ul&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n\n          &lt;div className=\"mt-12\"&gt;\n            &lt;Link\n              href=\"/users\"\n              className=\"inline-block bg-blue-500 text-white px-8 py-3 rounded-lg text-lg font-semibold hover:bg-blue-600 transition-colors\"\n            &gt;\n              Ver Demo de Usuarios\n            &lt;/Link&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p13/#8-pagina-de-usuarios","title":"8. P\u00e1gina de Usuarios","text":"<pre><code>// src/app/users/page.tsx\nimport UserList from '@/components/UserList';\n\nexport default function UsersPage() {\n  return (\n    &lt;div className=\"min-h-screen bg-gray-50\"&gt;\n      &lt;UserList /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p13/#configuracion-adicional","title":"Configuraci\u00f3n Adicional","text":""},{"location":"content/p13/#1-tailwind-css","title":"1. Tailwind CSS","text":"<p>Aseg\u00farate de tener Tailwind CSS configurado en tu proyecto:</p> <pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n</code></pre>"},{"location":"content/p13/#2-variables-de-entorno","title":"2. Variables de Entorno","text":"<p>Crea un archivo <code>.env.local</code>:</p> <pre><code>NEXT_PUBLIC_API_BASE_URL=https://[tu-id].mockapi.io/api/v1\n</code></pre> <p>Y actualiza el servicio API:</p> <pre><code>const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'https://[tu-id].mockapi.io/api/v1';\n</code></pre>"},{"location":"content/p13/#mejores-practicas-implementadas","title":"Mejores Pr\u00e1cticas Implementadas","text":""},{"location":"content/p13/#1-separacion-de-responsabilidades","title":"1. Separaci\u00f3n de Responsabilidades","text":"<ul> <li>Tipos: Interfaces TypeScript centralizadas</li> <li>Servicios: L\u00f3gica de API separada</li> <li>Componentes: Componentes reutilizables y enfocados</li> <li>Hooks: L\u00f3gica de estado personalizada</li> </ul>"},{"location":"content/p13/#2-manejo-de-errores","title":"2. Manejo de Errores","text":"<ul> <li>Try-catch en todas las peticiones</li> <li>Estados de error en la UI</li> <li>Mensajes informativos para el usuario</li> </ul>"},{"location":"content/p13/#3-experiencia-de-usuario","title":"3. Experiencia de Usuario","text":"<ul> <li>Estados de carga (loading)</li> <li>Confirmaciones para acciones destructivas</li> <li>Feedback visual inmediato</li> <li>B\u00fasqueda en tiempo real</li> </ul>"},{"location":"content/p13/#4-typescript","title":"4. TypeScript","text":"<ul> <li>Interfaces bien definidas</li> <li>Tipado estricto en todas las funciones</li> <li>Generics para reutilizaci\u00f3n de c\u00f3digo</li> </ul>"},{"location":"content/p13/#5-performance","title":"5. Performance","text":"<ul> <li>Componentes optimizados</li> <li>Manejo eficiente del estado</li> <li>Cleanup de efectos</li> </ul>"},{"location":"content/p13/#ejercicios-propuestos","title":"Ejercicios Propuestos","text":"<ol> <li>Paginaci\u00f3n: Implementa paginaci\u00f3n en la lista de usuarios</li> <li>Filtros: Agrega filtros por fecha de creaci\u00f3n</li> <li>Validaci\u00f3n: Implementa validaci\u00f3n de formularios con Zod</li> <li>Cache: Agrega cache local con localStorage</li> <li>Optimistic Updates: Implementa actualizaciones optimistas</li> </ol>"},{"location":"content/p13/#conclusion","title":"Conclusi\u00f3n","text":"<p>Este tutorial demuestra una implementaci\u00f3n completa y profesional de Next.js con TypeScript, integrando MockAPI para operaciones CRUD. El c\u00f3digo es escalable, mantenible y sigue las mejores pr\u00e1cticas de desarrollo moderno.</p> <p>La arquitectura propuesta permite: - F\u00e1cil mantenimiento y extensi\u00f3n - Reutilizaci\u00f3n de componentes - Manejo robusto de errores - Excelente experiencia de usuario - C\u00f3digo tipado y seguro</p>"},{"location":"content/p14/","title":"Semana 14 - Despliegue de Aplicaciones Next.js en Vercel","text":""},{"location":"content/p14/#introduccion","title":"Introducci\u00f3n","text":"<p>Vercel es una plataforma de despliegue optimizada para aplicaciones frontend, especialmente dise\u00f1ada para frameworks como Next.js. En esta gu\u00eda aprender\u00e1s c\u00f3mo desplegar tu aplicaci\u00f3n Next.js en Vercel de manera eficiente y profesional.</p>"},{"location":"content/p14/#prerrequisitos","title":"Prerrequisitos","text":"<p>Antes de comenzar, aseg\u00farate de tener:</p> <ul> <li>[x] Una aplicaci\u00f3n Next.js funcional</li> <li>[x] Cuenta en GitHub</li> <li>[x] Cuenta en Vercel</li> <li>[x] Git instalado en tu sistema</li> <li>[x] Node.js (versi\u00f3n 18 o superior)</li> </ul> <p>Recomendaci\u00f3n</p> <p>Si a\u00fan no tienes una aplicaci\u00f3n Next.js, puedes crear una r\u00e1pidamente con: <pre><code>npx create-next-app@latest mi-app\ncd mi-app\n</code></pre></p>"},{"location":"content/p14/#paso-1-preparar-tu-proyecto","title":"Paso 1: Preparar tu Proyecto","text":""},{"location":"content/p14/#11-verificar-la-configuracion-de-nextjs","title":"1.1 Verificar la Configuraci\u00f3n de Next.js","text":"<p>Aseg\u00farate de que tu <code>package.json</code> contenga los scripts necesarios:</p> <pre><code>{\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  }\n}\n</code></pre>"},{"location":"content/p14/#12-configurar-el-archivo-nextconfigjs-opcional","title":"1.2 Configurar el Archivo next.config.js (Opcional)","text":"<p>Si necesitas configuraciones espec\u00edficas, crea o modifica <code>next.config.js</code>:</p> <pre><code>/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  output: 'standalone', // Para optimizar el despliegue\n  images: {\n    domains: ['ejemplo.com'], // Dominios permitidos para im\u00e1genes\n  },\n  env: {\n    CUSTOM_KEY: process.env.CUSTOM_KEY,\n  },\n}\n\nmodule.exports = nextConfig\n</code></pre>"},{"location":"content/p14/#paso-2-subir-el-codigo-a-github","title":"Paso 2: Subir el C\u00f3digo a GitHub","text":""},{"location":"content/p14/#21-inicializar-git-si-no-esta-inicializado","title":"2.1 Inicializar Git (si no est\u00e1 inicializado)","text":"<pre><code>git init\ngit add .\ngit commit -m \"Initial commit\"\n</code></pre>"},{"location":"content/p14/#22-crear-repositorio-en-github","title":"2.2 Crear Repositorio en GitHub","text":"<ol> <li>Ve a GitHub y crea un nuevo repositorio</li> <li>No inicialices con README, .gitignore o licencia si ya tienes c\u00f3digo local</li> </ol>"},{"location":"content/p14/#23-conectar-y-subir-el-codigo","title":"2.3 Conectar y Subir el C\u00f3digo","text":"<pre><code>git remote add origin https://github.com/tu-usuario/tu-repositorio.git\ngit branch -M main\ngit push -u origin main\n</code></pre>"},{"location":"content/p14/#paso-3-desplegar-en-vercel","title":"Paso 3: Desplegar en Vercel","text":""},{"location":"content/p14/#31-metodo-1-desde-la-web-de-vercel","title":"3.1 M\u00e9todo 1: Desde la Web de Vercel","text":"<ol> <li>Accede a Vercel: Ve a vercel.com e inicia sesi\u00f3n</li> <li>Importar Proyecto: Haz clic en \"New Project\"</li> <li>Conectar GitHub: Autoriza a Vercel para acceder a tus repositorios</li> <li>Seleccionar Repositorio: Elige el repositorio de tu aplicaci\u00f3n Next.js</li> <li>Configurar Despliegue:</li> <li>Project Name: Nombre de tu proyecto</li> <li>Framework Preset: Next.js (se detecta autom\u00e1ticamente)</li> <li>Root Directory: <code>./</code> (por defecto)</li> <li>Build Command: <code>npm run build</code> (por defecto)</li> <li> <p>Output Directory: <code>.next</code> (por defecto)</p> </li> <li> <p>Deploy: Haz clic en \"Deploy\"</p> </li> </ol>"},{"location":"content/p14/#32-metodo-2-usando-vercel-cli","title":"3.2 M\u00e9todo 2: Usando Vercel CLI","text":"<pre><code># Instalar Vercel CLI globalmente\nnpm i -g vercel\n\n# Iniciar sesi\u00f3n\nvercel login\n\n# Desplegar desde el directorio del proyecto\nvercel\n\n# Para despliegues de producci\u00f3n\nvercel --prod\n</code></pre> <p>\u00a1Listo!</p> <p>Tu aplicaci\u00f3n estar\u00e1 disponible en una URL como: <code>https://tu-proyecto.vercel.app</code></p>"},{"location":"content/p14/#paso-4-configurar-variables-de-entorno","title":"Paso 4: Configurar Variables de Entorno","text":""},{"location":"content/p14/#41-en-el-dashboard-de-vercel","title":"4.1 En el Dashboard de Vercel","text":"<ol> <li>Ve a tu proyecto en el dashboard de Vercel</li> <li>Navega a Settings \u2192 Environment Variables</li> <li>Agrega tus variables:</li> <li>Name: Nombre de la variable (ej: <code>DATABASE_URL</code>)</li> <li>Value: Valor de la variable</li> <li>Environment: Production, Preview, Development</li> </ol>"},{"location":"content/p14/#42-ejemplo-de-variables-comunes","title":"4.2 Ejemplo de Variables Comunes","text":"<pre><code># Variables de base de datos\nDATABASE_URL=postgresql://usuario:password@host:puerto/database\nMONGODB_URI=mongodb+srv://usuario:password@cluster.mongodb.net/database\n\n# APIs externas\nNEXT_PUBLIC_API_URL=https://api.miservicio.com\nSTRIPE_SECRET_KEY=sk_live_...\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=pk_live_...\n\n# Autenticaci\u00f3n\nNEXTAUTH_SECRET=tu-secreto-super-seguro\nNEXTAUTH_URL=https://tu-dominio.vercel.app\n</code></pre> <p>Importante</p> <ul> <li>Variables que empiecen con <code>NEXT_PUBLIC_</code> ser\u00e1n visibles en el cliente</li> <li>Nunca expongas claves secretas con el prefijo <code>NEXT_PUBLIC_</code></li> </ul>"},{"location":"content/p14/#paso-5-configuraciones-avanzadas","title":"Paso 5: Configuraciones Avanzadas","text":""},{"location":"content/p14/#51-dominios-personalizados","title":"5.1 Dominios Personalizados","text":"<ol> <li>Agregar Dominio:</li> <li>Ve a Settings \u2192 Domains</li> <li>Agrega tu dominio personalizado</li> <li> <p>Configura los DNS seg\u00fan las instrucciones</p> </li> <li> <p>Configuraci\u00f3n DNS:    <pre><code>Tipo: CNAME\nNombre: www (o @)\nValor: cname.vercel-dns.com\n</code></pre></p> </li> </ol>"},{"location":"content/p14/#52-redirects-y-rewrites","title":"5.2 Redirects y Rewrites","text":"<p>En <code>next.config.js</code>:</p> <pre><code>module.exports = {\n  async redirects() {\n    return [\n      {\n        source: '/old-page',\n        destination: '/new-page',\n        permanent: true,\n      },\n    ]\n  },\n  async rewrites() {\n    return [\n      {\n        source: '/api/:path*',\n        destination: 'https://api.externa.com/:path*',\n      },\n    ]\n  },\n}\n</code></pre>"},{"location":"content/p14/#53-headers-de-seguridad","title":"5.3 Headers de Seguridad","text":"<pre><code>module.exports = {\n  async headers() {\n    return [\n      {\n        source: '/(.*)',\n        headers: [\n          {\n            key: 'X-Frame-Options',\n            value: 'DENY',\n          },\n          {\n            key: 'X-Content-Type-Options',\n            value: 'nosniff',\n          },\n        ],\n      },\n    ]\n  },\n}\n</code></pre>"},{"location":"content/p14/#paso-6-monitoreo-y-optimizacion","title":"Paso 6: Monitoreo y Optimizaci\u00f3n","text":""},{"location":"content/p14/#61-analytics-de-vercel","title":"6.1 Analytics de Vercel","text":"<pre><code>// pages/_app.js o app/layout.js\nimport { Analytics } from '@vercel/analytics/react';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;&gt;\n      &lt;Component {...pageProps} /&gt;\n      &lt;Analytics /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"content/p14/#62-speed-insights","title":"6.2 Speed Insights","text":"<pre><code>import { SpeedInsights } from '@vercel/speed-insights/next';\n\nexport default function App({ Component, pageProps }) {\n  return (\n    &lt;&gt;\n      &lt;Component {...pageProps} /&gt;\n      &lt;SpeedInsights /&gt;\n    &lt;/&gt;\n  );\n}\n</code></pre>"},{"location":"content/p14/#automatizacion-con-github-actions","title":"Automatizaci\u00f3n con GitHub Actions","text":""},{"location":"content/p14/#61-despliegue-automatico","title":"6.1 Despliegue Autom\u00e1tico","text":"<p>Vercel se integra autom\u00e1ticamente con GitHub para:</p> <ul> <li>Push a main: Despliega a producci\u00f3n</li> <li>Pull Requests: Crea preview deployments</li> <li>Commits: Genera builds autom\u00e1ticos</li> </ul>"},{"location":"content/p14/#62-configuracion-personalizada","title":"6.2 Configuraci\u00f3n Personalizada","text":"<p>Crea <code>.github/workflows/vercel.yml</code>:</p> <pre><code>name: Vercel Production Deployment\nenv:\n  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}\n  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}\non:\n  push:\n    branches:\n      - main\njobs:\n  Deploy-Production:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Install Vercel CLI\n        run: npm install --global vercel@latest\n      - name: Pull Vercel Environment Information\n        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}\n      - name: Build Project Artifacts\n        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}\n      - name: Deploy Project Artifacts to Vercel\n        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}\n</code></pre>"},{"location":"content/p14/#solucion-de-problemas-comunes","title":"Soluci\u00f3n de Problemas Comunes","text":""},{"location":"content/p14/#error-module-not-found","title":"Error: \"Module not found\"","text":"<pre><code># Limpiar cach\u00e9 y reinstalar dependencias\nrm -rf .next node_modules package-lock.json\nnpm install\nnpm run build\n</code></pre>"},{"location":"content/p14/#error-de-variables-de-entorno","title":"Error de Variables de Entorno","text":"<ol> <li>Verifica que las variables est\u00e9n configuradas en Vercel</li> <li>Aseg\u00farate de usar el prefijo correcto (<code>NEXT_PUBLIC_</code> para cliente)</li> <li>Redespliega despu\u00e9s de agregar variables</li> </ol>"},{"location":"content/p14/#problemas-de-imagenes","title":"Problemas de Im\u00e1genes","text":"<pre><code>// next.config.js\nmodule.exports = {\n  images: {\n    domains: ['tu-dominio.com'],\n    formats: ['image/webp', 'image/avif'],\n  },\n}\n</code></pre>"},{"location":"content/p15/","title":"Semana 15 - Axios en Next.js con TypeScript","text":""},{"location":"content/p15/#introduccion","title":"Introducci\u00f3n","text":"<p>Axios es una librer\u00eda HTTP que facilita el consumo de APIs en aplicaciones web. Aunque Next.js incluye <code>fetch</code>, Axios ofrece ventajas como interceptores, cancelaci\u00f3n de solicitudes y manejo de errores m\u00e1s consistente. En esta gu\u00eda ver\u00e1s c\u00f3mo integrar Axios en un proyecto Next.js con TypeScript, crear una instancia reusable, tipar respuestas y consumir APIs desde cliente y servidor.</p>"},{"location":"content/p15/#prerrequisitos","title":"Prerrequisitos","text":"<ul> <li>Proyecto Next.js con TypeScript</li> <li>Node.js 18+</li> <li>Cuenta de API o endpoints disponibles (propios o externos)</li> </ul> <p>Instala Axios:</p> <pre><code>npm i axios\n</code></pre> <p>Estructura sugerida</p> <p>Coloca utilidades compartidas en <code>src/lib</code> y servicios en <code>src/services</code>.</p>"},{"location":"content/p15/#configurar-instancia-de-axios","title":"Configurar instancia de Axios","text":"<p>Crea <code>src/lib/axios.ts</code> con una instancia centralizada e interceptores:</p> <pre><code>// src/lib/axios.ts\nimport axios, { AxiosError, AxiosInstance } from 'axios'\n\nexport const apiBaseURL = process.env.NEXT_PUBLIC_API_URL || 'https://jsonplaceholder.typicode.com'\n\nconst axiosInstance: AxiosInstance = axios.create({\n  baseURL: apiBaseURL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n})\n\n// Interceptor de solicitudes: a\u00f1ade token si existe\naxiosInstance.interceptors.request.use((config) =&gt; {\n  // Ejemplo: obtener token desde localStorage o cookies\n  const token = typeof window !== 'undefined' ? localStorage.getItem('token') : undefined\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`\n  }\n  return config\n})\n\n// Interceptor de respuestas: manejo de errores\naxiosInstance.interceptors.response.use(\n  (response) =&gt; response,\n  (error: AxiosError) =&gt; {\n    // Puedes loguear o transformar el error\n    if (error.response?.status === 401) {\n      // opcional: redirigir al login o refrescar token\n    }\n    return Promise.reject(error)\n  }\n)\n\nexport default axiosInstance\n</code></pre>"},{"location":"content/p15/#tipado-de-respuestas","title":"Tipado de respuestas","text":"<p>Define tipos para respuestas y datos:</p> <pre><code>// src/types/api.ts\nexport type ApiResponse&lt;T&gt; = {\n  data: T\n  message?: string\n}\n\nexport type Post = {\n  userId: number\n  id: number\n  title: string\n  body: string\n}\n</code></pre>"},{"location":"content/p15/#consumo-en-cliente-csr-con-typescript","title":"Consumo en Cliente (CSR) con TypeScript","text":"<p>Ejemplo con <code>useEffect</code> y cancelaci\u00f3n usando <code>AbortController</code>:</p> <pre><code>// src/app/posts/page.tsx (App Router, Client Component)\n'use client'\n\nimport { useEffect, useState } from 'react'\nimport axiosInstance from '@/lib/axios'\nimport type { ApiResponse, Post } from '@/types/api'\n\nexport default function PostsPage() {\n  const [posts, setPosts] = useState&lt;Post[]&gt;([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState&lt;string | null&gt;(null)\n\n  useEffect(() =&gt; {\n    const controller = new AbortController()\n\n    async function load() {\n      try {\n        setLoading(true)\n        setError(null)\n        const res = await axiosInstance.get&lt;ApiResponse&lt;Post[]&gt;&gt;('/posts', {\n          signal: controller.signal,\n        })\n        // Si tu API devuelve directamente un arreglo, usa: axiosInstance.get&lt;Post[]&gt;('/posts')\n        const data = Array.isArray(res.data as any) ? (res.data as any) : (res.data as ApiResponse&lt;Post[]&gt;).data\n        setPosts(data)\n      } catch (err: unknown) {\n        setError(err instanceof Error ? err.message : 'Error desconocido')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    load()\n    return () =&gt; controller.abort()\n  }, [])\n\n  if (loading) return &lt;p&gt;Cargando...&lt;/p&gt;\n  if (error) return &lt;p style={{ color: 'crimson' }}&gt;Error: {error}&lt;/p&gt;\n\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Posts&lt;/h1&gt;\n      &lt;ul&gt;\n        {posts.map((p) =&gt; (\n          &lt;li key={p.id}&gt;\n            &lt;strong&gt;{p.title}&lt;/strong&gt;\n            &lt;p&gt;{p.body}&lt;/p&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  )\n}\n</code></pre> <p>Variables p\u00fablicas</p> <p>Usa <code>NEXT_PUBLIC_</code> para variables que necesitas en el cliente. Las variables sin ese prefijo no est\u00e1n disponibles en el navegador.</p>"},{"location":"content/p15/#crear-api-interna-con-nextjs-app-router","title":"Crear API interna con Next.js (App Router)","text":"<p>Puedes crear endpoints internos y consumirlos con Axios. Ejemplo:</p> <pre><code>// src/app/api/posts/route.ts\nimport { NextResponse } from 'next/server'\n\nexport async function GET() {\n  const data = [\n    { id: 1, userId: 1, title: 'Hola', body: 'Contenido' },\n    { id: 2, userId: 1, title: 'Mundo', body: 'M\u00e1s contenido' },\n  ]\n  return NextResponse.json(data)\n}\n\nexport async function POST(req: Request) {\n  const body = await req.json()\n  // Aqu\u00ed guardar\u00edas en BD; devolvemos eco\n  return NextResponse.json({ ok: true, data: body }, { status: 201 })\n}\n</code></pre> <p>Consumir el endpoint interno desde cliente:</p> <pre><code>// src/app/internal/page.tsx\n'use client'\n\nimport { useEffect, useState } from 'react'\nimport axiosInstance from '@/lib/axios'\nimport type { Post } from '@/types/api'\n\nexport default function InternalPage() {\n  const [posts, setPosts] = useState&lt;Post[]&gt;([])\n\n  useEffect(() =&gt; {\n    axiosInstance.get&lt;Post[]&gt;('/api/posts').then((res) =&gt; setPosts(res.data))\n  }, [])\n\n  return (\n    &lt;ul&gt;\n      {posts.map((p) =&gt; (\n        &lt;li key={p.id}&gt;{p.title}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  )\n}\n</code></pre>"},{"location":"content/p15/#manejo-de-errores-con-isaxioserror","title":"Manejo de errores con <code>isAxiosError</code>","text":"<pre><code>import axios, { isAxiosError } from 'axios'\n\nasync function getUser(id: string) {\n  try {\n    const res = await axios.get(`/users/${id}`)\n    return res.data\n  } catch (err) {\n    if (isAxiosError(err)) {\n      const status = err.response?.status\n      const message = err.response?.data?.message || err.message\n      throw new Error(`HTTP ${status ?? 'NA'}: ${message}`)\n    }\n    throw err\n  }\n}\n</code></pre>"},{"location":"content/p15/#variables-de-entorno","title":"Variables de entorno","text":"<p>Ejemplo <code>.env.local</code>:</p> <pre><code>NEXT_PUBLIC_API_URL=https://jsonplaceholder.typicode.com\n</code></pre>"},{"location":"content/p16/","title":"Semana 16 - Evaluaci\u00f3n Tercer Momento","text":""},{"location":"content/p16/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>https://seia-stalone.vercel.app/\n</code></pre></p>"},{"location":"content/p16/#codigo-8lg22fnz","title":"C\u00f3digo: 8LG22FNZ","text":""},{"location":"content/p17/","title":"Semana 17 - Presentaci\u00f3n Proyecto Integrador","text":""},{"location":"content/p17/#instrucciones-para-la-presentacion-del-proyecto-integrador","title":"Instrucciones para la presentaci\u00f3n del proyecto integrador:","text":"<ul> <li>Asistencia obligatoria de todos los participantes durante toda la jornada acad\u00e9mica.</li> <li>Subir la presentaci\u00f3n a la carpeta compartida de Google Drive con antelaci\u00f3n.</li> <li>Cumplir estrictamente con el horario de presentaci\u00f3n.</li> <li>La no participaci\u00f3n en el horario asignado implicar\u00e1 una exposici\u00f3n individual de recuperaci\u00f3n en la semana 18.</li> <li>La presentacion debe grabarse en audio para su evaluaci\u00f3n y el archivo de audio se almacenar\u00e1 como evidencia.</li> </ul>"},{"location":"content/p17/#horario-de-presentacion-del-proyecto-integrador-grupo-martes-noche","title":"Horario de presentaci\u00f3n del proyecto integrador. (Grupo Martes Noche)","text":"GRUPO NOMBRES DESDE HASTA 1 SANTIAGO DIAZ USMA 6:30 6:55 1 JAVIER ESTEBAN RESTREPO PARIAS 6:30 6:55 1 MATEO GONZALEZ VILLEGAS 6:30 6:55 1 LUIS FERNANDO MIRANDA RIVAS 6:30 6:55 1 LEANDRO ALBERTO ACEVEDO ZAPATA 6:30 6:55 2 SAMUEL ALVIS BORNACELLY 7:00 7:25 2 JULIAN ECHAVARRIA YEPES 7:00 7:25 2 VICTOR MANUEL POLO RUEDAS 7:00 7:25 3 JUAN MANUEL RIVERA RESTREPO 7:30 7:55 3 ANDRES DARIO VALLEJO UCHIMA 7:30 7:55 3 ALEJANDRO URREGO CARDONA 7:30 7:55 4 DANIEL CANDELARIO SALDARRIAGA 8:00 8:25 4 JUAN ESTEBAN ZAPATA TOBON 8:00 8:25 4 ANA SOFIA VELEZ MARULANDA 8:00 8:25 4 EDGARLY 8:00 8:25 5 JUAN MIGUEL SANTAMAR\u00cdA M\u00daNERA 8:30 8:55 5 JOEL STIVEN MARI\u00d1OS RIVERA 8:30 8:55 5 BRAHIAN ANGEL OSPINA 8:30 8:55 5 LEANDRO ALBERTO CESPEDES BEDOYA 8:30 8:55"},{"location":"content/p17/#horario-de-presentacion-del-proyecto-integrador-grupo-sabado","title":"Horario de presentaci\u00f3n del proyecto integrador. (Grupo S\u00e1bado)","text":"Group Nombres Hora 1 NATHALY ALVAREZ BEDOYA 11:30:00 am 1 GUSTAVO ANTONIO MONTOYA GOMEZ 11:30:00 am 1 JORGE MANUEL VALLE TORRES 11:30:00 am 1 JERONIMO GIRALDO 11:30:00 am 1 SANTIAGO CARDONA MENESES 11:30:00 am 2 LUIS MARIO ARCILA HIDALGO 2:30:00 pm 2 MICHEL LORENA ARANGO MARULANDA 2:30:00 pm 2 JESUS ALBERTO OSUNA GUILLEN 2:30:00 pm 2 ALEX YEISON CARDENAS MORA 2:30:00 pm 3 JUAN ESTABAN ZAPATA TOBON 2:00:00 pm 3 DANIEL CANDELARIO SALDARRIAGA 2:00:00 pm 3 OQUENDO HERN\u00c1NDEZ JUAN DAVID 2:00:00 pm 3 SERGIO ALEJANDRO TORRES ARANGO 2:00:00 pm 4 CARLOS DANIEL BLANCO PEREZ 10:30:00 am 4 JUAN DAVID CASTANO SALDARRIAGA 10:30:00 am 4 JULIAN SEGURO CORREA 10:30:00 am 4 JOSE DAVID PARRA 10:30:00 am 5 SANTIAGO RUA BARRERA 3:00:00 pm 5 JUAN DIEGO SERNA OCHOA 3:00:00 pm 5 SEBASTIAN CAMILO ARIAS BETANCUR 3:00:00 pm 6 MARTIN JOS\u00c9 AMARO SILVA 1:30:00 pm 6 DANIEL FELIPE MU\u00d1OZ GOMEZ 1:30:00 pm 6 C\u00c1RDENAS GARC\u00cdA DIEGO ALEJANDRO 1:30:00 pm 6 JONATHAN ZAPATA LONDO\u00d1O 1:30:00 pm 7 JULIAN VALLEJO OSORIO 11:00:00 am 7 CORREA MEJIA SANTIAGO 11:00:00 am"},{"location":"content/p18/","title":"Semana 18","text":"<p>Note</p> <p>El contenido se publicar\u00e1 en la fecha correspondiente.</p>"},{"location":"content/p2/","title":"Semana 2 - Componente en React","text":""},{"location":"content/p2/#1-que-es-un-componente-en-react","title":"1. \u00bfQu\u00e9 es un componente en React?","text":"<p>Un componente en React es como un bloque de Lego. Cada bloque tiene una funci\u00f3n espec\u00edfica (mostrar un bot\u00f3n, una lista, un formulario, etc.), y puedes combinarlos para construir interfaces de usuario completas. Los componentes son reutilizables, lo que significa que puedes usar el mismo componente en diferentes partes de tu aplicaci\u00f3n, y son modulares, lo que facilita mantener y organizar el c\u00f3digo.</p> <p>Piensa en una p\u00e1gina web como una casa: - La casa completa es tu aplicaci\u00f3n. - Cada habitaci\u00f3n (cocina, sala, ba\u00f1o) es un componente. - Dentro de cada habitaci\u00f3n, los muebles (mesa, sillas, l\u00e1mpara) son componentes m\u00e1s peque\u00f1os.</p> <p>En React, los componentes pueden ser desde algo tan simple como un bot\u00f3n hasta algo complejo como un formulario completo o una p\u00e1gina entera.</p>"},{"location":"content/p2/#2-tipos-de-componentes-en-react","title":"2. Tipos de componentes en React","text":"<p>Hay dos tipos principales de componentes en React:</p>"},{"location":"content/p2/#a-componentes-funcionales","title":"a) Componentes funcionales","text":"<p>Son la forma moderna y m\u00e1s sencilla de crear componentes. Se escriben como funciones de JavaScript que devuelven JSX (una sintaxis que mezcla HTML con JavaScript). Desde la introducci\u00f3n de los Hooks en React 16.8, los componentes funcionales son los m\u00e1s usados.</p> <p>Ejemplo de un componente funcional:</p> <pre><code>function Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#b-componentes-de-clase","title":"b) Componentes de clase","text":"<p>Son la forma antigua de crear componentes, usando clases de JavaScript. Aunque a\u00fan funcionan, no son tan comunes hoy porque los componentes funcionales son m\u00e1s simples y los Hooks reemplazan las funcionalidades que antes requer\u00edan clases.</p> <p>Ejemplo de un componente de clase:</p> <pre><code>import React from 'react';\n\nclass Saludo extends React.Component {\n  render() {\n    return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n  }\n}\n</code></pre> <p>En esta explicaci\u00f3n, nos enfocaremos en los componentes funcionales, ya que son los recomendados para proyectos nuevos.</p>"},{"location":"content/p2/#3-creando-un-componente-funcional","title":"3. Creando un componente funcional","text":"<p>Vamos a crear un componente paso a paso. Supongamos que queremos un componente que muestre un saludo personalizado.</p>"},{"location":"content/p2/#paso-1-crear-el-componente","title":"Paso 1: Crear el componente","text":"<p>Un componente funcional es simplemente una funci\u00f3n de JavaScript que devuelve JSX.</p> <pre><code>function Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#paso-2-exportar-el-componente","title":"Paso 2: Exportar el componente","text":"<p>Para usar el componente en otros archivos, debes exportarlo.</p> <pre><code>export default function Saludo() {\n  return &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#paso-3-importar-y-usar-el-componente","title":"Paso 3: Importar y usar el componente","text":"<p>En otro archivo (por ejemplo, <code>App.jsx</code>), puedes importar y usar el componente como si fuera una etiqueta HTML.</p> <pre><code>import Saludo from './Saludo';\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Saludo /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Cuando el navegador renderice esto, ver\u00e1s: \u00a1Hola, mundo! en la pantalla.</p>"},{"location":"content/p2/#4-que-es-jsx","title":"4. \u00bfQu\u00e9 es JSX?","text":"<p>JSX es una extensi\u00f3n de JavaScript que permite escribir c\u00f3digo que parece HTML dentro de archivos JavaScript. Es como una mezcla de HTML y JavaScript que React usa para definir la estructura de los componentes.</p> <p>Por ejemplo:</p> <pre><code>const elemento = &lt;h1&gt;\u00a1Hola, mundo!&lt;/h1&gt;;\n</code></pre> <p>Aunque parece HTML, en realidad JSX se convierte en llamadas a funciones de JavaScript. Por ejemplo, el c\u00f3digo anterior se transforma en:</p> <pre><code>const elemento = React.createElement('h1', null, '\u00a1Hola, mundo!');\n</code></pre> <p>No necesitas entender esto a fondo, solo saber que JSX hace que escribir interfaces sea m\u00e1s f\u00e1cil y legible.</p>"},{"location":"content/p2/#reglas-basicas-de-jsx","title":"Reglas b\u00e1sicas de JSX:","text":"<ol> <li>Siempre debe haber un elemento padre: Si devuelves varios elementos, envu\u00e9lvelos en un <code>&lt;div&gt;</code> o en un Fragment (<code>&lt;&gt;</code>).    <pre><code>return (\n  &lt;&gt;\n    &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n    &lt;p&gt;P\u00e1rrafo&lt;/p&gt;\n  &lt;/&gt;\n);\n</code></pre></li> <li>Atributos como en HTML, pero con camelCase: Por ejemplo, en vez de <code>class</code>, usas <code>className</code>.    <pre><code>&lt;div className=\"contenedor\"&gt;Contenido&lt;/div&gt;\n</code></pre></li> <li>C\u00f3digo JavaScript dentro de llaves <code>{}</code>: Puedes insertar variables o expresiones dentro de JSX usando llaves.    <pre><code>const nombre = \"Juan\";\nreturn &lt;h1&gt;\u00a1Hola, {nombre}!&lt;/h1&gt;;\n</code></pre></li> </ol>"},{"location":"content/p2/#5-props-hacer-componentes-dinamicos","title":"5. Props: Hacer componentes din\u00e1micos","text":"<p>Las props (propiedades) son como los par\u00e1metros de una funci\u00f3n. Permiten pasar datos a un componente para que sea din\u00e1mico y reutilizable.</p>"},{"location":"content/p2/#ejemplo-con-props","title":"Ejemplo con props:","text":"<pre><code>function Saludo(props) {\n  return &lt;h1&gt;\u00a1Hola, {props.nombre}!&lt;/h1&gt;;\n}\n</code></pre> <p>Usamos el componente as\u00ed:</p> <pre><code>&lt;Saludo nombre=\"Juan\" /&gt;\n&lt;Saludo nombre=\"Mar\u00eda\" /&gt;\n</code></pre> <p>Esto renderizar\u00e1: - \u00a1Hola, Juan! - \u00a1Hola, Mar\u00eda!</p>"},{"location":"content/p2/#desestructuracion-de-props","title":"Desestructuraci\u00f3n de props","text":"<p>Para que el c\u00f3digo sea m\u00e1s limpio, puedes desestructurar las props directamente en los par\u00e1metros de la funci\u00f3n:</p> <pre><code>function Saludo({ nombre }) {\n  return &lt;h1&gt;\u00a1Hola, {nombre}!&lt;/h1&gt;;\n}\n</code></pre>"},{"location":"content/p2/#props-multiples","title":"Props m\u00faltiples","text":"<p>Puedes pasar tantas props como quieras, como si fueran atributos HTML:</p> <pre><code>function Saludo({ nombre, edad }) {\n  return &lt;h1&gt;\u00a1Hola, {nombre}! Tienes {edad} a\u00f1os.&lt;/h1&gt;;\n}\n</code></pre> <p>Uso:</p> <pre><code>&lt;Saludo nombre=\"Juan\" edad={25} /&gt;\n</code></pre>"},{"location":"content/p2/#6-estado-state-en-componentes","title":"6. Estado (State) en componentes","text":"<p>El estado es una forma de almacenar datos que pueden cambiar con el tiempo dentro de un componente. Por ejemplo, si quieres contar cu\u00e1ntas veces alguien hace clic en un bot\u00f3n, necesitas un estado para almacenar ese n\u00famero.</p> <p>En componentes funcionales, usamos el Hook <code>useState</code> para manejar el estado.</p>"},{"location":"content/p2/#ejemplo-con-usestate","title":"Ejemplo con <code>useState</code>:","text":"<pre><code>import { useState } from 'react';\n\nfunction Contador() {\n  const [contador, setContador] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Has hecho clic {contador} veces&lt;/p&gt;\n      &lt;button onClick={() =&gt; setContador(contador + 1)}&gt;\n        Haz clic\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p2/#explicacion","title":"Explicaci\u00f3n:","text":"<ol> <li><code>useState(0)</code>: Crea una variable de estado (<code>contador</code>) con un valor inicial de <code>0</code> y una funci\u00f3n (<code>setContador</code>) para actualizarla.</li> <li>Evento <code>onClick</code>: Cuando haces clic en el bot\u00f3n, llamas a <code>setContador</code> para incrementar el valor de <code>contador</code>.</li> <li>React re-renderiza: Cada vez que el estado cambia, React actualiza el componente para reflejar el nuevo valor.</li> </ol>"},{"location":"content/p2/#7-manejo-de-eventos","title":"7. Manejo de eventos","text":"<p>En React, los eventos (como clics, cambios en un input, etc.) se manejan con atributos que empiezan con <code>on</code>, como <code>onClick</code>, <code>onChange</code>, etc. Los valores de estos atributos son funciones.</p> <p>Ejemplo con un formulario:</p> <pre><code>import { useState } from 'react';\n\nfunction Formulario() {\n  const [nombre, setNombre] = useState('');\n\n  const manejarCambio = (evento) =&gt; {\n    setNombre(evento.target.value);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input\n        type=\"text\"\n        value={nombre}\n        onChange={manejarCambio}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;p&gt;Hola, {nombre}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p2/#explicacion_1","title":"Explicaci\u00f3n:","text":"<ul> <li><code>onChange</code>: Se dispara cada vez que el usuario escribe en el input.</li> <li><code>evento.target.value</code>: Obtiene el valor actual del input.</li> <li><code>setNombre</code>: Actualiza el estado con el nuevo valor.</li> </ul>"},{"location":"content/p2/#8-componentes-anidados-y-composicion","title":"8. Componentes anidados y composici\u00f3n","text":"<p>Los componentes pueden contener otros componentes, lo que permite crear interfaces complejas. Esto se llama composici\u00f3n.</p> <p>Ejemplo:</p> <pre><code>function Boton() {\n  return &lt;button&gt;Haz clic&lt;/button&gt;;\n}\n\nfunction Tarjeta() {\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;T\u00edtulo de la tarjeta&lt;/h2&gt;\n      &lt;Boton /&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;Tarjeta /&gt;\n      &lt;Tarjeta /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>En este ejemplo: - <code>Boton</code> es un componente peque\u00f1o. - <code>Tarjeta</code> usa <code>Boton</code> dentro de su JSX. - <code>App</code> usa <code>Tarjeta</code> dos veces, mostrando dos tarjetas con botones.</p>"},{"location":"content/p2/#9-props-children","title":"9. Props children","text":"<p>A veces, quieres que un componente act\u00fae como un \"contenedor\" que envuelva otros componentes o contenido. Para eso, usas la prop especial <code>children</code>.</p> <p>Ejemplo:</p> <pre><code>function Contenedor({ children }) {\n  return &lt;div className=\"contenedor\"&gt;{children}&lt;/div&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;Contenedor&gt;\n      &lt;h1&gt;T\u00edtulo&lt;/h1&gt;\n      &lt;p&gt;Este es el contenido dentro del contenedor.&lt;/p&gt;\n    &lt;/Contenedor&gt;\n  );\n}\n</code></pre> <p>Aqu\u00ed, <code>Contenedor</code> renderiza todo lo que se coloque entre sus etiquetas de apertura y cierre.</p>"},{"location":"content/p2/#10-ciclo-de-vida-en-componentes-funcionales","title":"10. Ciclo de vida en componentes funcionales","text":"<p>Aunque los componentes funcionales no tienen m\u00e9todos de ciclo de vida como los componentes de clase, puedes simularlos con el Hook <code>useEffect</code>.</p>"},{"location":"content/p2/#ejemplo-con-useeffect","title":"Ejemplo con <code>useEffect</code>:","text":"<pre><code>import { useState, useEffect } from 'react';\n\nfunction Temporizador() {\n  const [segundos, setSegundos] = useState(0);\n\n  useEffect(() =&gt; {\n    const intervalo = setInterval(() =&gt; {\n      setSegundos((prev) =&gt; prev + 1);\n    }, 1000);\n\n    return () =&gt; clearInterval(intervalo); // Limpieza\n  }, []); // [] significa que se ejecuta solo al montar el componente\n\n  return &lt;p&gt;Han pasado {segundos} segundos&lt;/p&gt;;\n}\n</code></pre>"},{"location":"content/p2/#explicacion_2","title":"Explicaci\u00f3n:","text":"<ul> <li><code>useEffect</code>: Ejecuta c\u00f3digo cuando el componente se monta, actualiza o desmonta.</li> <li><code>[]</code>: Indica que el efecto solo se ejecuta una vez (al montar).</li> <li>Funci\u00f3n de limpieza: El <code>return</code> dentro de <code>useEffect</code> limpia el intervalo cuando el componente se desmonta, evitando problemas de memoria.</li> </ul>"},{"location":"content/p2/#11-buenas-practicas-para-componentes","title":"11. Buenas pr\u00e1cticas para componentes","text":"<ol> <li>Nombra los componentes con may\u00fascula inicial: Por ejemplo, <code>Saludo</code>, no <code>saludo</code>.</li> <li>Mant\u00e9n los componentes peque\u00f1os y enfocados: Un componente debe hacer una sola cosa bien.</li> <li>Usa nombres descriptivos: <code>BotonPrimario</code> es mejor que <code>Boton1</code>.</li> <li>Reutiliza componentes: Si algo se repite, convi\u00e9rtelo en un componente.</li> <li>Evita l\u00f3gica compleja dentro de JSX: Mueve la l\u00f3gica a funciones o Hooks.</li> </ol>"},{"location":"content/p2/#12-ejemplo-completo-lista-de-tareas","title":"12. Ejemplo completo: Lista de tareas","text":"<p>Vamos a combinar todo en un ejemplo pr\u00e1ctico: una lista de tareas.</p> <pre><code>import { useState } from 'react';\n\nfunction Tarea({ texto, completada }) {\n  return (\n    &lt;li style={{ textDecoration: completada ? 'line-through' : 'none' }}&gt;\n      {texto}\n    &lt;/li&gt;\n  );\n}\n\nfunction ListaTareas() {\n  const [tareas, setTareas] = useState([\n    { texto: 'Aprender React', completada: false },\n    { texto: 'Hacer la compra', completada: true },\n  ]);\n  const [nuevaTarea, setNuevaTarea] = useState('');\n\n  const agregarTarea = () =&gt; {\n    if (nuevaTarea.trim()) {\n      setTareas([...tareas, { texto: nuevaTarea, completada: false }]);\n      setNuevaTarea('');\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Lista de tareas&lt;/h2&gt;\n      &lt;input\n        type=\"text\"\n        value={nuevaTarea}\n        onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n        placeholder=\"Nueva tarea\"\n      /&gt;\n      &lt;button onClick={agregarTarea}&gt;Agregar&lt;/button&gt;\n      &lt;ul&gt;\n        {tareas.map((tarea, index) =&gt; (\n          &lt;Tarea key={index} texto={tarea.texto} completada={tarea.completada} /&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return &lt;ListaTareas /&gt;;\n}\n\nexport default App;\n</code></pre>"},{"location":"content/p2/#explicacion_3","title":"Explicaci\u00f3n:","text":"<ul> <li><code>Tarea</code>: Un componente que muestra una tarea con estilo condicional (tachado si est\u00e1 completada).</li> <li><code>ListaTareas</code>: Maneja el estado de las tareas y el formulario para agregar nuevas.</li> <li><code>.map</code>: Renderiza una lista de componentes <code>Tarea</code> bas\u00e1ndose en el array <code>tareas</code>.</li> <li><code>key</code>: Cada elemento en una lista necesita una prop <code>key</code> \u00fanica para que React pueda optimizar los cambios.</li> </ul>"},{"location":"content/p2/#tutorial-de-nextjs-app","title":"Tutorial de Next.js (App)","text":""},{"location":"content/p2/#requisitos-previos","title":"Requisitos previos","text":"<ul> <li>Node.js: Aseg\u00farate de tener Node.js instalado (versi\u00f3n 18 o superior recomendada). Desc\u00e1rgalo desde nodejs.org.</li> <li>Editor de c\u00f3digo: Usa Visual Studio Code o cualquier editor de tu preferencia.</li> <li>Conocimientos b\u00e1sicos de JavaScript y React.</li> </ul>"},{"location":"content/p2/#paso-1-crear-un-proyecto-de-nextjs","title":"Paso 1: Crear un proyecto de Next.js","text":"<ol> <li>Abre una terminal y ejecuta el siguiente comando para crear un nuevo proyecto de Next.js:    <pre><code>npx create-next-app@latest mi-proyecto-next\n</code></pre></li> <li>Responde las preguntas que aparecer\u00e1n:</li> <li>\u00bfQuieres usar TypeScript? No (para mantenerlo simple, pero puedes elegir S\u00ed si prefieres).</li> <li>\u00bfUsar ESLint? S\u00ed.</li> <li>\u00bfUsar Tailwind CSS? S\u00ed (opcional, facilita los estilos).</li> <li>\u00bfUsar <code>src/</code> directory? No (para mantener la estructura simple).</li> <li>\u00bfUsar App Router? S\u00ed (es la opci\u00f3n recomendada).</li> <li> <p>\u00bfImport alias? Selecciona la opci\u00f3n predeterminada.</p> </li> <li> <p>Navega al directorio del proyecto:    <pre><code>cd mi-proyecto-next\n</code></pre></p> </li> <li> <p>Inicia el servidor de desarrollo:    <pre><code>npm run dev\n</code></pre>    Abre tu navegador en <code>http://localhost:3000</code> y ver\u00e1s la p\u00e1gina inicial de Next.js.</p> </li> </ol>"},{"location":"content/p2/#paso-2-entender-la-estructura-del-proyecto","title":"Paso 2: Entender la estructura del proyecto","text":"<p>Next.js con App Router utiliza la carpeta <code>app/</code> para definir las rutas y componentes de tu aplicaci\u00f3n. Aqu\u00ed est\u00e1 la estructura b\u00e1sica:</p> <pre><code>mi-proyecto-next/\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 layout.js       # Dise\u00f1o global de la aplicaci\u00f3n\n\u2502   \u251c\u2500\u2500 page.js         # P\u00e1gina principal (ruta ra\u00edz: /)\n\u2502   \u251c\u2500\u2500 globals.css     # Estilos globales\n\u251c\u2500\u2500 public/             # Archivos est\u00e1ticos (im\u00e1genes, fuentes, etc.)\n\u251c\u2500\u2500 package.json        # Depend\uff0c\u5feb# Dependencias y configuraci\u00f3n del proyecto\n</code></pre> <ul> <li>app/layout.js: Define el dise\u00f1o global (HTML base, navegaci\u00f3n, etc.).</li> <li>app/page.js: Componente que renderiza la p\u00e1gina principal (<code>/</code>).</li> <li>public/: Carpeta para archivos est\u00e1ticos como im\u00e1genes.</li> </ul>"},{"location":"content/p2/#paso-3-crear-una-pagina-simple","title":"Paso 3: Crear una p\u00e1gina simple","text":"<ol> <li>Abre <code>app/page.js</code> y reemplaza su contenido con lo siguiente:    <pre><code>export default function Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;\u00a1Bienvenido a mi aplicaci\u00f3n Next.js!&lt;/h1&gt;\n      &lt;p&gt;Este es un tutorial b\u00e1sico para aprender Next.js con App Router.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda el archivo. El navegador se actualizar\u00e1 autom\u00e1ticamente (gracias a la recarga en caliente) y ver\u00e1s tu nueva p\u00e1gina en <code>http://localhost:3000</code>.</li> </ol>"},{"location":"content/p2/#paso-4-agregar-una-nueva-ruta","title":"Paso 4: Agregar una nueva ruta","text":"<p>Con App Router, las rutas se crean autom\u00e1ticamente seg\u00fan la estructura de carpetas en <code>app/</code>.</p> <ol> <li>Crea una nueva carpeta dentro de <code>app/</code> llamada <code>acerca</code>.</li> <li>Dentro de <code>app/acerca/</code>, crea un archivo <code>page.js</code> con el siguiente contenido:    <pre><code>export default function Acerca() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Acerca de Nosotros&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina de informaci\u00f3n sobre nuestra aplicaci\u00f3n.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda y visita <code>http://localhost:3000/acerca</code>. Ver\u00e1s la nueva p\u00e1gina.</li> </ol>"},{"location":"content/p2/#paso-5-agregar-estilos-con-tailwind-css","title":"Paso 5: Agregar estilos con Tailwind CSS","text":"<p>Si seleccionaste Tailwind CSS al crear el proyecto, puedes usarlo para estilizar tus componentes.</p> <ol> <li>Modifica <code>app/page.js</code> para agregar clases de Tailwind:    <pre><code>export default function Home() {\n  return (\n    &lt;div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\"&gt;\n      &lt;h1 className=\"text-4xl font-bold text-blue-600\"&gt;\u00a1Bienvenido a mi aplicaci\u00f3n Next.js!&lt;/h1&gt;\n      &lt;p className=\"mt-4 text-lg text-gray-700\"&gt;\n        Este es un tutorial b\u00e1sico para aprender Next.js con App Router.\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></li> <li>Guarda y observa c\u00f3mo la p\u00e1gina ahora tiene un dise\u00f1o m\u00e1s atractivo.</li> </ol>"},{"location":"content/p2/#paso-6-agregar-un-componente-reutilizable","title":"Paso 6: Agregar un componente reutilizable","text":"<ol> <li>Crea una carpeta <code>components/</code> en la ra\u00edz del proyecto.</li> <li>Dentro de <code>components/</code>, crea un archivo <code>Navbar.js</code>:    <pre><code>export default function Navbar() {\n  return (\n    &lt;nav className=\"bg-blue-600 p-4\"&gt;\n      &lt;ul className=\"flex space-x-4 text-white\"&gt;\n        &lt;li&gt;&lt;a href=\"/\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;a href=\"/acerca\"&gt;Acerca&lt;/a&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/nav&gt;\n  );\n}\n</code></pre></li> <li>Modifica <code>app/layout.js</code> para incluir el componente <code>Navbar</code>:    <pre><code>import Navbar from '../components/Navbar';\nimport './globals.css';\n\nexport const metadata = {\n  title: 'Mi App Next.js',\n  description: 'Tutorial b\u00e1sico de Next.js',\n};\n\nexport default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"es\"&gt;\n      &lt;body&gt;\n        &lt;Navbar /&gt;\n        {children}\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n</code></pre></li> <li>Guarda y verifica que la barra de navegaci\u00f3n aparece en todas las p\u00e1ginas.</li> </ol>"},{"location":"content/p2/#paso-7-agregar-datos-dinamicos-api-simple","title":"Paso 7: Agregar datos din\u00e1micos (API simple)","text":"<p>Next.js permite crear rutas de API en la carpeta <code>app/api/</code>.</p> <ol> <li>Crea una carpeta <code>app/api/hola/</code> y dentro un archivo <code>route.js</code>:    <pre><code>export async function GET() {\n  return Response.json({ mensaje: \"\u00a1Hola desde la API de Next.js!\" });\n}\n</code></pre></li> <li> <p>Abre el navegador o usa una herramienta como Postman para visitar <code>http://localhost:3000/api/hola</code>. Ver\u00e1s el JSON: <code>{\"mensaje\": \"\u00a1Hola desde la API de Next.js!\"}</code>.</p> </li> <li> <p>Para mostrar estos datos en la p\u00e1gina principal, modifica <code>app/page.js</code>:    <pre><code>export default async function Home() {\n  const res = await fetch('http://localhost:3000/api/hola');\n  const data = await res.json();\n\n  return (\n    &lt;div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100\"&gt;\n      &lt;h1 className=\"text-4xl font-bold text-blue-600\"&gt;\u00a1Bienvenido a mi aplicaci\u00f3n Next.js!&lt;/h1&gt;\n      &lt;p className=\"mt-4 text-lg text-gray-700\"&gt;{data.mensaje}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre></p> </li> <li>Guarda y verifica que el mensaje de la API aparece en la p\u00e1gina principal.</li> </ol>"},{"location":"content/p3/","title":"Semana 3 -  Crear Componentes en React con Next.js (JavaScript) y Estilizar con CSS","text":""},{"location":"content/p3/#que-son-las-props-en-react","title":"\u00bfQu\u00e9 son las props en React?","text":"<p>Las props (propiedades) son un mecanismo en React para pasar datos de un componente padre a un componente hijo. Son inmutables desde el componente hijo, lo que significa que el hijo no puede modificar las props directamente. Las props permiten que los componentes sean reutilizables y din\u00e1micos.</p> <ul> <li>Caracter\u00edsticas principales:</li> <li>Son un objeto (<code>props</code>) que contiene los datos pasados al componente.</li> <li>Pueden incluir cualquier tipo de dato: cadenas, n\u00fameros, objetos, arreglos, funciones, componentes, etc.</li> <li>Son unidireccionales (del padre al hijo).</li> <li>Son opcionales, pero se pueden establecer valores por defecto.</li> </ul>"},{"location":"content/p3/#formas-de-usar-props-en-react","title":"Formas de usar props en React","text":""},{"location":"content/p3/#1-pasar-props-basicas-cadenas-numeros-booleanos","title":"1. Pasar props b\u00e1sicas (cadenas, n\u00fameros, booleanos)","text":"<p>Las props m\u00e1s simples son valores primitivos como cadenas, n\u00fameros o booleanos.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Saludo(props) {\n  return &lt;h1&gt;Hola, {props.nombre}!&lt;/h1&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo nombre=\"Juan\" /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>El componente padre <code>App</code> pasa la prop <code>nombre</code> con el valor <code>\"Juan\"</code>.</li> <li>El componente hijo <code>Saludo</code> accede a la prop a trav\u00e9s del objeto <code>props</code> (<code>props.nombre</code>).</li> <li>En el renderizado, se muestra \"Hola, Juan!\".</li> </ul> <p>Salida: <pre><code>Hola, Juan!\n</code></pre></p>"},{"location":"content/p3/#2-desestructuracion-de-props","title":"2. Desestructuraci\u00f3n de props","text":"<p>En componentes funcionales, puedes desestructurar las props directamente en los par\u00e1metros para escribir un c\u00f3digo m\u00e1s limpio.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo con desestructuraci\u00f3n\nfunction Saludo({ nombre, edad }) {\n  return &lt;h1&gt;Hola, {nombre}. Tienes {edad} a\u00f1os.&lt;/h1&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo nombre=\"Ana\" edad={25} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>En lugar de usar <code>props.nombre</code> y <code>props.edad</code>, desestructuramos <code>{ nombre, edad }</code> en los par\u00e1metros.</li> <li>Esto hace que el c\u00f3digo sea m\u00e1s legible y evita repetir <code>props.</code>.</li> </ul> <p>Salida: <pre><code>Hola, Ana. Tienes 25 a\u00f1os.\n</code></pre></p>"},{"location":"content/p3/#3-pasar-objetos-o-arreglos-como-props","title":"3. Pasar objetos o arreglos como props","text":"<p>Puedes pasar estructuras de datos m\u00e1s complejas, como objetos o arreglos, como props.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Perfil({ usuario }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{usuario.nombre}&lt;/h2&gt;\n      &lt;p&gt;Hobbies: {usuario.hobbies.join(\", \")}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente padre\nfunction App() {\n  const usuario = {\n    nombre: \"Mar\u00eda\",\n    hobbies: [\"leer\", \"caminar\", \"programar\"],\n  };\n  return &lt;Perfil usuario={usuario} /&gt;;\n}\n</code></pre> <p>chatbot Explicaci\u00f3n:</p> <ul> <li>La prop <code>usuario</code> es un objeto que contiene <code>nombre</code> y <code>hobbies</code>.</li> <li>En el componente hijo, accedemos a las propiedades del objeto con <code>usuario.nombre</code> y <code>usuario.hobbies</code>.</li> <li>Usamos <code>join(\", \")</code> para convertir el arreglo de hobbies en una cadena separada por comas.</li> </ul> <p>Salida: <pre><code>Mar\u00eda\nHobbies: leer, caminar, programar\n</code></pre></p>"},{"location":"content/p3/#4-pasar-funciones-como-props","title":"4. Pasar funciones como props","text":"<p>Puedes pasar funciones como props para permitir que el componente hijo ejecute l\u00f3gica definida en el componente padre.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Boton({ onClick, texto }) {\n  return &lt;button onClick={onClick}&gt;{texto}&lt;/button&gt;;\n}\n\n// Componente padre\nfunction App() {\n  const manejarClick = () =&gt; {\n    alert(\"\u00a1Bot\u00f3n clicado!\");\n  };\n\n  return &lt;Boton onClick={manejarClick} texto=\"Clic aqu\u00ed\" /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>onClick</code> es una funci\u00f3n que se pasa desde el componente padre.</li> <li>Cuando el usuario hace clic en el bot\u00f3n, se ejecuta la funci\u00f3n <code>manejarClick</code> definida en el componente padre.</li> </ul> <p>Salida: Un bot\u00f3n con el texto \"Clic aqu\u00ed\" que muestra una alerta al hacer clic.</p>"},{"location":"content/p3/#5-pasar-componentes-como-props-render-props","title":"5. Pasar componentes como props (Render Props)","text":"<p>Puedes pasar un componente como prop, lo que permite renderizar contenido din\u00e1mico en el componente hijo.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Contenedor({ contenido }) {\n  return &lt;div&gt;{contenido}&lt;/div&gt;;\n}\n\n// Componente padre\nfunction App() {\n  const ContenidoDinamico = &lt;h1&gt;\u00a1Este es un componente din\u00e1mico!&lt;/h1&gt;;\n  return &lt;Contenedor contenido={ContenidoDinamico} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>contenido</code> es un elemento JSX que se renderiza directamente en el componente hijo. - Esto es \u00fatil para patrones como \"render props\", donde el hijo decide c\u00f3mo renderizar contenido pasado por el padre.</p> <p>Salida: <pre><code>\u00a1Este es un componente din\u00e1mico!\n</code></pre></p>"},{"location":"content/p3/#6-props-con-children","title":"6. Props con children","text":"<p>La prop especial <code>children</code> permite pasar contenido entre las etiquetas de apertura y cierre de un componente.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Caja({ children }) {\n  return &lt;div style={{ border: \"1px solid black\", padding: \"10px\" }}&gt;{children}&lt;/div&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return (\n    &lt;Caja&gt;\n      &lt;h1&gt;T\u00edtulo dentro de la caja&lt;/h1&gt;\n      &lt;p&gt;Este es un p\u00e1rrafo.&lt;/p&gt;\n    &lt;/Caja&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Todo lo que se coloca entre <code>&lt;Caja&gt;</code> y <code>&lt;/Caja&gt;</code> se pasa como la prop <code>children</code>.</li> <li>El componente hijo renderiza <code>children</code> donde desee.</li> </ul> <p>Salida: Un <code>div</code> con borde que contiene un t\u00edtulo y un p\u00e1rrafo.</p>"},{"location":"content/p3/#7-valores-por-defecto-con-defaultprops","title":"7. Valores por defecto con defaultProps","text":"<p>Puedes definir valores por defecto para las props usando <code>defaultProps</code> en componentes funcionales o de clase.</p> <p>Ejemplo (Componente funcional):</p> <pre><code>// Componente hijo\nfunction Saludo({ nombre }) {\n  return &lt;h1&gt;Hola, {nombre}!&lt;/h1&gt;;\n}\n\nSaludo.defaultProps = {\n  nombre: \"Invitado\",\n};\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Si no se pasa la prop <code>nombre</code>, se usa el valor por defecto <code>\"Invitado\"</code>.</li> <li>Esto es \u00fatil para evitar errores cuando las props no se proporcionan.</li> </ul> <p>Salida: <pre><code>Hola, Invitado!\n</code></pre></p>"},{"location":"content/p3/#8-validacion-de-props-con-proptypes","title":"8. Validaci\u00f3n de props con PropTypes","text":"<p>Para asegurar que las props tengan el tipo y formato correctos, puedes usar la librer\u00eda <code>prop-types</code>.</p> <p>Instalaci\u00f3n: <pre><code>npm install prop-types\n</code></pre></p> <p>Ejemplo:</p> <pre><code>import PropTypes from 'prop-types';\n\n// Componente hijo\nfunction Perfil({ nombre, edad, activo }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {edad}&lt;/p&gt;\n      &lt;p&gt;{activo ? \"Activo\" : \"Inactivo\"}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\nPerfil.propTypes = {\n  nombre: PropTypes.string.isRequired,\n  edad: PropTypes.number.isRequired,\n  activo: PropTypes.bool,\n};\n\nPerfil.defaultProps = {\n  activo: false,\n};\n\n// Componente padre\nfunction App() {\n  return &lt;Perfil nombre=\"Carlos\" edad={30} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>PropTypes.string.isRequired</code> asegura que <code>nombre</code> sea una cadena y sea obligatorio.</li> <li><code>PropTypes.number.isRequired</code> asegura que <code>edad</code> sea un n\u00famero y obligatorio.</li> <li><code>PropTypes.bool</code> indica que <code>activo</code> debe ser un booleano, pero es opcional.</li> <li>Si no se pasa <code>activo</code>, se usa el valor por defecto <code>false</code>.</li> </ul> <p>Salida: <pre><code>Carlos\nEdad: 30\nInactivo\n</code></pre></p>"},{"location":"content/p3/#9-props-en-componentes-de-clase","title":"9. Props en componentes de clase","text":"<p>Aunque los componentes funcionales son m\u00e1s comunes, las props tambi\u00e9n funcionan en componentes de clase.</p> <p>Ejemplo:</p> <pre><code>import React from 'react';\n\nclass Saludo extends React.Component {\n  render() {\n    return &lt;h1&gt;Hola, {this.props.nombre}!&lt;/h1&gt;;\n  }\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Saludo nombre=\"Sof\u00eda\" /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>En componentes de clase, las props se acceden con <code>this.props</code>.</li> <li>El resto del comportamiento es id\u00e9ntico a los componentes funcionales.</li> </ul> <p>Salida: <pre><code>Hola, Sof\u00eda!\n</code></pre></p>"},{"location":"content/p3/#10-props-con-funciones-de-renderizado-render-props-pattern","title":"10. Props con funciones de renderizado (Render Props Pattern)","text":"<p>El patr\u00f3n de \"render props\" consiste en pasar una funci\u00f3n como prop que el componente hijo usa para renderizar contenido.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction RenderProp({ render }) {\n  const datos = { nombre: \"Luc\u00eda\", edad: 28 };\n  return &lt;div&gt;{render(datos)}&lt;/div&gt;;\n}\n\n// Componente padre\nfunction App() {\n  return (\n    &lt;RenderProp\n      render={(datos) =&gt; (\n        &lt;h1&gt;\n          {datos.nombre} tiene {datos.edad} a\u00f1os\n        &lt;/h1&gt;\n      )}\n    /&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>render</code> es una funci\u00f3n que recibe datos del componente hijo y devuelve JSX.</li> <li>Esto permite que el componente padre controle c\u00f3mo se renderizan los datos del hijo.</li> </ul> <p>Salida: <pre><code>Luc\u00eda tiene 28 a\u00f1os\n</code></pre></p>"},{"location":"content/p3/#11-pasar-multiples-props-con-el-operador-spread","title":"11. Pasar m\u00faltiples props con el operador spread","text":"<p>El operador spread (<code>...</code>) permite pasar m\u00faltiples props de forma concisa.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Perfil({ nombre, edad, ciudad }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {edad}&lt;/p&gt;\n      &lt;p&gt;Ciudad: {ciudad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente padre\nfunction App() {\n  const props = { nombre: \"Pedro\", edad: 35, ciudad: \"Madrid\" };\n  return &lt;Perfil {...props} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n: - El operador spread (<code>...props</code>) descompone el objeto <code>props</code> en props individuales. - Es equivalente a escribir <code>&lt;Perfil nombre=\"Pedro\" edad={35} ciudad=\"Madrid\" /&gt;</code>.</p> <p>Salida: <pre><code>Pedro\nEdad: 35\nCiudad: Madrid\n</code></pre></p>"},{"location":"content/p3/#12-props-condicionales","title":"12. Props condicionales","text":"<p>Puedes pasar props condicionalmente usando operadores ternarios o l\u00f3gicos.</p> <p>Ejemplo:</p> <pre><code>// Componente hijo\nfunction Boton({ texto, deshabilitado }) {\n  return &lt;button disabled={deshabilitado}&gt;{texto}&lt;/button&gt;;\n}\n\n// Componente padre\nfunction App() {\n  const estaDeshabilitado = true;\n  return &lt;Boton texto=\"Enviar\" deshabilitado={estaDeshabilitado} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>deshabilitado</code> se pasa condicionalmente seg\u00fan el estado o l\u00f3gica del componente padre.</li> <li>Esto permite controlar el comportamiento del componente hijo din\u00e1micamente.</li> </ul> <p>Salida: Un bot\u00f3n con el texto \"Enviar\" que est\u00e1 deshabilitado.</p>"},{"location":"content/p3/#13-props-con-hooks-y-estado","title":"13. Props con hooks y estado","text":"<p>Puedes combinar props con el estado interno del componente usando hooks como <code>useState</code>.</p> <p>Ejemplo:</p> <pre><code>import { useState } from 'react';\n\n// Componente hijo\nfunction Contador({ incremento }) {\n  const [cuenta, setCuenta] = useState(0);\n\n  const manejarClick = () =&gt; {\n    setCuenta(cuenta + incremento);\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;Cuenta: {cuenta}&lt;/p&gt;\n      &lt;button onClick={manejarClick}&gt;Incrementar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente padre\nfunction App() {\n  return &lt;Contador incremento={2} /&gt;;\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>La prop <code>incremento</code> determina cu\u00e1nto se incrementa el contador cada vez que se hace clic.</li> <li>El componente hijo usa <code>useState</code> para manejar su propio estado, pero la prop influye en la l\u00f3gica.</li> </ul> <p>Salida: Un contador que empieza en 0 y aumenta en 2 con cada clic.</p>"},{"location":"content/p3/#buenas-practicas-con-props","title":"Buenas pr\u00e1cticas con props","text":"<ol> <li>Nombres descriptivos: Usa nombres claros para las props (e.g., <code>nombre</code> en lugar de <code>n</code>).</li> <li>Validaci\u00f3n con PropTypes: Siempre valida las props en componentes reutilizables.</li> <li>Evita modificar props: Las props son inmutables; usa el estado para datos que cambian.</li> <li>Desestructura cuando sea posible: Mejora la legibilidad del c\u00f3digo.</li> <li>Evita pasar demasiadas props: Si un componente recibe muchas props, considera usar un objeto o el patr\u00f3n de composici\u00f3n.</li> </ol>"},{"location":"content/p3/#props-en-react-con-typescript","title":"Props en React con TypeScript","text":""},{"location":"content/p3/#introduccion","title":"Introducci\u00f3n","text":"<p>En React, los props son el mecanismo principal para pasar datos de un componente padre a un componente hijo. Con TypeScript, se puede a\u00f1adir tipado est\u00e1tico para mejorar la seguridad y mantenibilidad del c\u00f3digo, asegurando que los props tengan el tipo correcto y evitando errores en tiempo de ejecuci\u00f3n. </p> <p>TypeScript permite definir interfaces o tipos para los props, proporcionando autocompletado, validaci\u00f3n de tipos y mejor documentaci\u00f3n. A continuaci\u00f3n, se presentan ejemplos pr\u00e1cticos en formato MkDocs Material, en espa\u00f1ol.</p>"},{"location":"content/p3/#configuracion-basica","title":"Configuraci\u00f3n B\u00e1sica","text":"<p>Para usar React con TypeScript, aseg\u00farate de tener un proyecto configurado con las siguientes dependencias:</p> <pre><code>npm install typescript @types/react @types/react-dom\n</code></pre> <p>Los archivos de componentes deben tener la extensi\u00f3n <code>.tsx</code>.</p>"},{"location":"content/p3/#definicion-de-props-con-typescript","title":"Definici\u00f3n de Props con TypeScript","text":"<p>Sin usar <code>React.FC</code>, definimos los props mediante una interfaz y tipamos expl\u00edcitamente los par\u00e1metros de la funci\u00f3n del componente.</p>"},{"location":"content/p3/#ejemplo-1-componente-con-props-basicos","title":"Ejemplo 1: Componente con Props B\u00e1sicos","text":"<p>Un componente que muestra el nombre y la edad de una persona.</p> <pre><code>// Definimos la interfaz para los props\ninterface PersonaProps {\n  nombre: string;\n  edad: number;\n}\n\n// Componente funcional con props tipadas\nfunction Persona({ nombre, edad }: PersonaProps) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Edad: {edad}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Uso del componente\nfunction App() {\n  return &lt;Persona nombre=\"Ana\" edad={25} /&gt;;\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La interfaz <code>PersonaProps</code> define las propiedades <code>nombre</code> (string) y <code>edad</code> (number). - En lugar de <code>React.FC</code>, tipamos los props directamente en la desestructuraci\u00f3n de la funci\u00f3n (<code>{ nombre, edad }: PersonaProps</code>). - TypeScript asegura que al usar el componente <code>Persona</code>, se pasen las props con los tipos correctos.</p>"},{"location":"content/p3/#props-opcionales","title":"Props Opcionales","text":"<p>Las props opcionales se marcan con <code>?</code> en la interfaz.</p>"},{"location":"content/p3/#ejemplo-2-props-opcionales","title":"Ejemplo 2: Props Opcionales","text":"<pre><code>interface SaludoProps {\n  mensaje: string;\n  nombre?: string; // Prop opcional\n}\n\nfunction Saludo({ mensaje, nombre }: SaludoProps) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;{mensaje}&lt;/h1&gt;\n      {nombre &amp;&amp; &lt;p&gt;Dirigido a: {nombre}&lt;/p&gt;}\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Saludo mensaje=\"\u00a1Hola, mundo!\" /&gt;\n      &lt;Saludo mensaje=\"\u00a1Bienvenido!\" nombre=\"Carlos\" /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>nombre</code> es opcional (<code>nombre?: string</code>). - Usamos una condici\u00f3n (<code>nombre &amp;&amp; ...</code>) para manejar el caso en que <code>nombre</code> no se pase.</p>"},{"location":"content/p3/#props-con-valores-por-defecto","title":"Props con Valores por Defecto","text":"<p>Los valores por defecto se asignan mediante desestructuraci\u00f3n en los par\u00e1metros de la funci\u00f3n.</p>"},{"location":"content/p3/#ejemplo-3-props-con-valores-por-defecto","title":"Ejemplo 3: Props con Valores por Defecto","text":"<pre><code>interface BotonProps {\n  texto: string;\n  color?: string;\n}\n\nfunction Boton({ texto, color = \"azul\" }: BotonProps) {\n  return &lt;button style={{ backgroundColor: color }}&gt;{texto}&lt;/button&gt;;\n}\n\nfunction App() {\n  return (\n    &lt;&gt;\n      &lt;Boton texto=\"Clic aqu\u00ed\" /&gt; {/* Usa color por defecto: azul */}\n      &lt;Boton texto=\"Enviar\" color=\"verde\" /&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>color</code> es opcional y tiene un valor por defecto de <code>\"azul\"</code> en la desestructuraci\u00f3n. - Esto elimina la necesidad de verificar si <code>color</code> existe en el componente.</p>"},{"location":"content/p3/#props-con-tipos-complejos","title":"Props con Tipos Complejos","text":"<p>TypeScript permite definir props con estructuras m\u00e1s complejas, como objetos, arrays o funciones.</p>"},{"location":"content/p3/#ejemplo-4-props-con-objetos-y-funciones","title":"Ejemplo 4: Props con Objetos y Funciones","text":"<pre><code>interface Producto {\n  id: number;\n  nombre: string;\n  precio: number;\n}\n\ninterface CarritoProps {\n  productos: Producto[];\n  onEliminar: (id: number) =&gt; void;\n}\n\nfunction Carrito({ productos, onEliminar }: CarritoProps) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Carrito de Compras&lt;/h2&gt;\n      &lt;ul&gt;\n        {productos.map((producto) =&gt; (\n          &lt;li key={producto.id}&gt;\n            {producto.nombre} - ${producto.precio}\n            &lt;button onClick={() =&gt; onEliminar(producto.id)}&gt;Eliminar&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  const productosEjemplo: Producto[] = [\n    { id: 1, nombre: \"Laptop\", precio: 1000 },\n    { id: 2, nombre: \"Tel\u00e9fono\", precio: 500 },\n  ];\n\n  const handleEliminar = (id: number) =&gt; {\n    console.log(`Eliminando producto con ID: ${id}`);\n  };\n\n  return &lt;Carrito productos={productosEjemplo} onEliminar={handleEliminar} /&gt;;\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La interfaz <code>Producto</code> define la estructura de un objeto producto. - <code>CarritoProps</code> incluye un array de productos (<code>productos</code>) y una funci\u00f3n (<code>onEliminar</code>). - TypeScript garantiza que la funci\u00f3n <code>onEliminar</code> y los elementos de <code>productos</code> cumplan con los tipos definidos.</p>"},{"location":"content/p3/#props-de-componentes-como-props-children","title":"Props de Componentes como Props (Children)","text":"<p>Los componentes pueden recibir otros componentes o elementos como props a trav\u00e9s de <code>children</code>.</p>"},{"location":"content/p3/#ejemplo-5-usando-children","title":"Ejemplo 5: Usando Children","text":"<pre><code>interface ContenedorProps {\n  children: React.ReactNode;\n  titulo: string;\n}\n\nfunction Contenedor({ children, titulo }: ContenedorProps) {\n  return (\n    &lt;div className=\"contenedor\"&gt;\n      &lt;h2&gt;{titulo}&lt;/h2&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}\n\nfunction App() {\n  return (\n    &lt;Contenedor titulo=\"Mi Contenedor\"&gt;\n      &lt;p&gt;Este es el contenido dentro del contenedor.&lt;/p&gt;\n      &lt;button&gt;Acci\u00f3n&lt;/button&gt;\n    &lt;/Contenedor&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p>Explicaci\u00f3n: - La prop <code>children</code> usa el tipo <code>React.ReactNode</code>, que permite pasar cualquier contenido React v\u00e1lido. - El componente <code>Contenedor</code> renderiza el t\u00edtulo y el contenido pasado como <code>children</code>.</p>"},{"location":"content/p3/#tutorial-crear-componentes-en-react-con-nextjs-javascript-y-estilizar-con-css","title":"Tutorial: Crear Componentes en React con Next.js (JavaScript) y Estilizar con CSS","text":""},{"location":"content/p3/#1-introduccion-a-nextjs-y-react","title":"1. Introducci\u00f3n a Next.js y React","text":"<p>Next.js es un framework basado en React que facilita la creaci\u00f3n de aplicaciones web modernas con renderizado del lado del servidor (SSR), generaci\u00f3n de sitios est\u00e1ticos (SSG) y una experiencia de desarrollo optimizada. Los componentes en React son bloques reutilizables que estructuran la interfaz de usuario de manera modular.</p> <p>En este tutorial, usaremos JavaScript puro (sin TypeScript) para crear un componente <code>ProductCard</code> que muestre informaci\u00f3n de un producto (imagen, t\u00edtulo, descripci\u00f3n y precio). Exploraremos tres m\u00e9todos de estilizaci\u00f3n:</p> <ul> <li>CSS puro (hojas de estilo globales).</li> <li>M\u00f3dulos CSS (estilos locales para evitar conflictos).</li> <li>Tailwind CSS (utilidades CSS para estilizaci\u00f3n r\u00e1pida).</li> </ul>"},{"location":"content/p3/#2-configuracion-del-proyecto-en-nextjs","title":"2. Configuraci\u00f3n del Proyecto en Next.js","text":""},{"location":"content/p3/#paso-1-crear-un-proyecto-en-nextjs","title":"Paso 1: Crear un Proyecto en Next.js","text":"<ol> <li>Aseg\u00farate de tener Node.js instalado (versi\u00f3n 18 o superior recomendada).</li> <li>Abre una terminal y ejecuta el siguiente comando para crear un nuevo proyecto:</li> </ol> <p><pre><code>npx create-next-app@latest my-next-app\n</code></pre> 3. Durante la configuraci\u00f3n, selecciona:</p> <ul> <li>\u00bfTypeScript? No (usaremos JavaScript).</li> <li>\u00bfESLint? S\u00ed (para mantener el c\u00f3digo limpio).</li> <li>\u00bfTailwind CSS? S\u00ed (lo usaremos m\u00e1s adelante).</li> <li>\u00bfApp Router? S\u00ed (la nueva arquitectura de Next.js).</li> <li> <p>\u00bfImport alias? Usa el valor predeterminado (<code>@/*</code>).</p> </li> <li> <p>Navega al directorio del proyecto:</p> </li> </ul> <p><pre><code>cd my-next-app\n</code></pre> 5. Inicia el servidor de desarrollo:</p> <p><pre><code>npm run dev\n</code></pre> 6. Abre tu navegador en <code>http://localhost:3000</code> para verificar que el proyecto funciona.</p>"},{"location":"content/p3/#paso-2-estructura-del-proyecto","title":"Paso 2: Estructura del Proyecto","text":"<p>Con App Router, Next.js organiza las p\u00e1ginas en la carpeta <code>app/</code>. Crearemos los componentes en una carpeta <code>components/</code> en la ra\u00edz del proyecto para mantener la modularidad.</p>"},{"location":"content/p3/#3-creacion-de-un-componente-en-react","title":"3. Creaci\u00f3n de un Componente en React","text":"<p>Crearemos un componente reutilizable llamado <code>ProductCard</code> que mostrar\u00e1 informaci\u00f3n de un producto.</p>"},{"location":"content/p3/#paso-1-crear-el-componente","title":"Paso 1: Crear el Componente","text":"<ol> <li>Crea una carpeta <code>components/</code> en la ra\u00edz del proyecto.</li> <li>Dentro de <code>components/</code>, crea un archivo <code>ProductCard.js</code> con el siguiente c\u00f3digo:</li> </ol> <pre><code>import React from 'react';\n\nconst ProductCard = ({ title, description, price, imageUrl }) =&gt; {\n  return (\n    &lt;div className=\"product-card\"&gt;\n      &lt;img src={imageUrl} alt={title} className=\"product-image\" /&gt;\n      &lt;div className=\"product-content\"&gt;\n        &lt;h2 className=\"product-title\"&gt;{title}&lt;/h2&gt;\n        &lt;p className=\"product-description\"&gt;{description}&lt;/p&gt;\n        &lt;p className=\"product-price\"&gt;${price.toFixed(2)}&lt;/p&gt;\n        &lt;button className=\"product-button\"&gt;Add to Cart&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductCard;\n</code></pre> <p>Explicaci\u00f3n del C\u00f3digo:</p> <ul> <li>Componente Funcional: Usamos un componente funcional en JavaScript que recibe <code>title</code>, <code>description</code>, <code>price</code> y <code>imageUrl</code> como props.</li> <li>JSX: El componente renderiza una imagen, un t\u00edtulo, una descripci\u00f3n, un precio y un bot\u00f3n.</li> <li>Clases CSS: Usamos clases como <code>product-card</code>, <code>product-image</code>, etc., que estilizaremos m\u00e1s adelante.</li> </ul>"},{"location":"content/p3/#paso-2-usar-el-componente-en-una-pagina","title":"Paso 2: Usar el Componente en una P\u00e1gina","text":"<ol> <li>Edita el archivo <code>app/page.js</code> para incluir el componente <code>ProductCard</code>:</li> </ol> <pre><code>import ProductCard from '@/components/ProductCard';\n\nexport default function Home() {\n  return (\n    &lt;main className=\"container\"&gt;\n      &lt;h1&gt;Product Catalog&lt;/h1&gt;\n      &lt;div className=\"product-grid\"&gt;\n        &lt;ProductCard\n          title=\"Sample Product\"\n          description=\"This is a sample product description.\"\n          price={29.99}\n          imageUrl=\"https://via.placeholder.com/150\"\n        /&gt;\n        &lt;ProductCard\n          title=\"Another Product\"\n          description=\"This is another product description.\"\n          price={49.99}\n          imageUrl=\"https://via.placeholder.com/150\"\n        /&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Importamos <code>ProductCard</code> usando el alias <code>@</code> configurado por Next.js.</li> <li>Mostramos dos instancias de <code>ProductCard</code> con diferentes datos.</li> <li>Usamos una clase <code>product-grid</code> para el contenedor, que estilizaremos m\u00e1s adelante.</li> </ul>"},{"location":"content/p3/#4-estilizacion-con-css","title":"4. Estilizaci\u00f3n con CSS","text":"<p>Next.js soporta varias formas de estilizar componentes. Exploraremos tres enfoques: CSS puro, M\u00f3dulos CSS, y Tailwind CSS.</p>"},{"location":"content/p3/#enfoque-1-css-puro-global","title":"Enfoque 1: CSS Puro (Global)","text":"<ol> <li>Edita el archivo <code>app/globals.css</code> (ya creado si seleccionaste Tailwind CSS): <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.container {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n}\n\n.product-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));\n  gap: 20px;\n}\n\n.product-card {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s;\n}\n\n.product-card:hover {\n  transform: translateY(-5px);\n}\n\n.product-image {\n  width: 100%;\n  height: 150px;\n  object-fit: cover;\n}\n\n.product-content {\n  padding: 15px;\n}\n\n.product-title {\n  font-size: 1.5rem;\n  margin: 0 0 10px;\n}\n\n.product-description {\n  font-size: 1rem;\n  color: #555;\n  margin: 0 0 10px;\n}\n\n.product-price {\n  font-size: 1.2rem;\n  color: #2ecc71;\n  margin: 0 0 10px;\n}\n\n.product-button {\n  background-color: #3498db;\n  color: white;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  width: 100%;\n}\n\n.product-button:hover {\n  background-color: #2980b9;\n}\n</code></pre></li> </ol> <p>Explicaci\u00f3n:</p> <ul> <li>Estilos Globales: Estas clases se aplican a todo el proyecto y estilizan el componente <code>ProductCard</code> y la p\u00e1gina principal.</li> <li>Grid Layout: Usamos CSS Grid para una cuadr\u00edcula responsive.</li> <li>Efectos: A\u00f1adimos un efecto de hover y sombras para un dise\u00f1o moderno.</li> </ul> <p>Ventajas:</p> <ul> <li>F\u00e1cil de implementar para estilos globales.</li> <li>Ideal para proyectos peque\u00f1os.</li> </ul> <p>Desventajas:</p> <ul> <li>Riesgo de conflictos de nombres de clases en proyectos grandes.</li> <li>Los estilos no est\u00e1n encapsulados.</li> </ul>"},{"location":"content/p3/#enfoque-2-modulos-css-estilos-locales","title":"Enfoque 2: M\u00f3dulos CSS (Estilos Locales)","text":"<p>Los m\u00f3dulos CSS encapsulan los estilos para evitar conflictos, generando nombres de clases \u00fanicos.</p> <ol> <li> <p>Crea un archivo <code>components/ProductCard.module.css</code>: <pre><code>.card {\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n  transition: transform 0.2s;\n}\n\n.card:hover {\n  transform: translateY(-5px);\n}\n\n.image {\n  width: 100%;\n  height: 150px;\n  object-fit: cover;\n}\n\n.content {\n  padding: 15px;\n}\n\n.title {\n  font-size: 1.5rem;\n  margin: 0 0 10px;\n}\n\n.description {\n  font-size: 1rem;\n  color: #555;\n  margin: 0 0 10px;\n}\n\n.price {\n  font-size: 1.2rem;\n  color: #2ecc71;\n  margin: 0 0 10px;\n}\n\n.button {\n  background-color: #3498db;\n  color: white;\n  padding: 10px;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n  width: 100%;\n}\n\n.button:hover {\n  background-color: #2980b9;\n}\n</code></pre></p> </li> <li> <p>Actualiza <code>ProductCard.js</code> para usar los m\u00f3dulos CSS: <pre><code>import React from 'react';\nimport styles from './ProductCard.module.css';\n\nconst ProductCard = ({ title, description, price, imageUrl }) =&gt; {\n  return (\n    &lt;div className={styles.card}&gt;\n      &lt;img src={imageUrl} alt={title} className={styles.image} /&gt;\n      &lt;div className={styles.content}&gt;\n        &lt;h2 className={styles.title}&gt;{title}&lt;/h2&gt;\n        &lt;p className={styles.description}&gt;{description}&lt;/p&gt;\n        &lt;p className={styles.price}&gt;${price.toFixed(2)}&lt;/p&gt;\n        &lt;button className={styles.button}&gt;Add to Cart&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductCard;\n</code></pre></p> </li> </ol> <p>Explicaci\u00f3n: - Importaci\u00f3n de M\u00f3dulos CSS: Los estilos se importan como un objeto (<code>styles</code>) desde <code>ProductCard.module.css</code>. - Clases Esc\u00f3picas: Las clases como <code>styles.card</code> son \u00fanicas para el componente, evitando conflictos. - Mantenimiento: Los estilos est\u00e1n vinculados al componente, facilitando la modularidad.</p> <p>Ventajas: - Encapsulaci\u00f3n de estilos. - Ideal para proyectos grandes y componentes reutilizables.</p> <p>Desventajas: - Requiere un archivo CSS por componente. - Configuraci\u00f3n inicial m\u00e1s lenta para proyectos peque\u00f1os.</p>"},{"location":"content/p3/#enfoque-3-tailwind-css","title":"Enfoque 3: Tailwind CSS","text":"<p>Tailwind CSS permite estilizar directamente en el JSX usando clases de utilidades. Como seleccionamos Tailwind al crear el proyecto, ya est\u00e1 configurado.</p> <ol> <li> <p>Actualiza <code>ProductCard.js</code> para usar Tailwind CSS: <pre><code>import React from 'react';\n\nconst ProductCard = ({ title, description, price, imageUrl }) =&gt; {\n  return (\n    &lt;div className=\"border border-gray-200 rounded-lg overflow-hidden shadow-md hover:-translate-y-1 transition-transform\"&gt;\n      &lt;img src={imageUrl} alt={title} className=\"w-full h-40 object-cover\" /&gt;\n      &lt;div className=\"p-4\"&gt;\n        &lt;h2 className=\"text-xl font-semibold mb-2\"&gt;{title}&lt;/h2&gt;\n        &lt;p className=\"text-gray-600 mb-2\"&gt;{description}&lt;/p&gt;\n        &lt;p className=\"text-green-500 text-lg mb-2\"&gt;${price.toFixed(2)}&lt;/p&gt;\n        &lt;button className=\"w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600\"&gt;\n          Add to Cart\n        &lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductCard;\n</code></pre></p> </li> <li> <p>Actualiza <code>app/page.js</code> para usar Tailwind en la cuadr\u00edcula: <pre><code>import ProductCard from '@/components/ProductCard';\n\nexport default function Home() {\n  return (\n    &lt;main className=\"max-w-7xl mx-auto p-6\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6\"&gt;Product Catalog&lt;/h1&gt;\n      &lt;div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\"&gt;\n        &lt;ProductCard\n          title=\"Sample Product\"\n          description=\"This is a sample product description.\"\n          price={29.99}\n          imageUrl=\"https://via.placeholder.com/150\"\n        /&gt;\n        &lt;ProductCard\n          title=\"Another Product\"\n          description=\"This is another product description.\"\n          price={49.99}\n          imageUrl=\"https://via.placeholder.com/150\"\n        /&gt;\n      &lt;/div&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre></p> </li> </ol> <p>Explicaci\u00f3n:</p> <ul> <li>Clases de Tailwind: Usamos clases como <code>border</code>, <code>rounded-lg</code>, <code>shadow-md</code>, <code>hover:-translate-y-1</code> para estilizar.</li> <li>Responsive Design: Clases como <code>sm:grid-cols-2</code> hacen la cuadr\u00edcula adaptable.</li> <li>Ventajas:</li> <li>Prototipado r\u00e1pido.</li> <li>No requiere archivos CSS adicionales.</li> <li>Estilos consistentes.</li> <li>Desventajas:</li> <li>JSX m\u00e1s largo y potencialmente menos legible.</li> <li>Curva de aprendizaje para las clases de Tailwind.</li> </ul>"},{"location":"content/p3/#5-generacion-de-una-aplicacion-completa-standalone","title":"5. Generaci\u00f3n de una Aplicaci\u00f3n Completa (Standalone)","text":"<p>Si prefieres un archivo HTML \u00fanico con React y Tailwind CSS (usando CDNs), aqu\u00ed tienes un ejemplo:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\" /&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" /&gt;\n  &lt;title&gt;React Product Card&lt;/title&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/react@18/umd/react.development.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/react-dom@18/umd/react-dom.development.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.tailwindcss.com\"&gt;&lt;/script&gt;\n  &lt;script src=\"https://cdn.jsdelivr.net/npm/@babel/standalone/babel.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"root\"&gt;&lt;/div&gt;\n  &lt;script type=\"text/babel\"&gt;\n    const ProductCard = ({ title, description, price, imageUrl }) =&gt; {\n      return (\n        &lt;div className=\"border border-gray-200 rounded-lg overflow-hidden shadow-md hover:-translate-y-1 transition-transform\"&gt;\n          &lt;img src={imageUrl} alt={title} className=\"w-full h-40 object-cover\" /&gt;\n          &lt;div className=\"p-4\"&gt;\n            &lt;h2 className=\"text-xl font-semibold mb-2\"&gt;{title}&lt;/h2&gt;\n            &lt;p className=\"text-gray-600 mb-2\"&gt;{description}&lt;/p&gt;\n            &lt;p className=\"text-green-500 text-lg mb-2\"&gt;${price.toFixed(2)}&lt;/p&gt;\n            &lt;button className=\"w-full bg-blue-500 text-white py-2 rounded-md hover:bg-blue-600\"&gt;\n              Add to Cart\n            &lt;/button&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      );\n    };\n\n    const App = () =&gt; {\n      return (\n        &lt;main className=\"max-w-7xl mx-auto p-6\"&gt;\n          &lt;h1 className=\"text-3xl font-bold mb-6\"&gt;Product Catalog&lt;/h1&gt;\n          &lt;div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6\"&gt;\n            &lt;ProductCard\n              title=\"Sample Product\"\n              description=\"This is a sample product description.\"\n              price={29.99}\n              imageUrl=\"https://via.placeholder.com/150\"\n            /&gt;\n            &lt;ProductCard\n              title=\"Another Product\"\n              description=\"This is another product description.\"\n              price={49.99}\n              imageUrl=\"https://via.placeholder.com/150\"\n            /&gt;\n          &lt;/div&gt;\n        &lt;/main&gt;\n      );\n    };\n\n    const root = ReactDOM.createRoot(document.getElementById('root'));\n    root.render(&lt;App /&gt;);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Nota: Este enfoque con CDN es \u00fatil para prototipos r\u00e1pidos, pero para proyectos reales, usa la estructura de Next.js, que optimiza el rendimiento y el empaquetado.</p>"},{"location":"content/p3/#6-mejores-practicas","title":"6. Mejores Pr\u00e1cticas","text":"<ul> <li>Reutilizaci\u00f3n: Dise\u00f1a componentes con props para hacerlos flexibles.</li> <li>Modularidad: Mant\u00e9n los componentes peque\u00f1os y enfocados.</li> <li>Estilos Encapsulados: Usa m\u00f3dulos CSS o Tailwind para evitar conflictos.</li> <li>Optimizaci\u00f3n: Aprovecha las caracter\u00edsticas de Next.js como el componente <code>Image</code> para im\u00e1genes optimizadas.</li> </ul>"},{"location":"content/p4/","title":"Semana 4 - Componentes Funcionales en React (Sin Hooks)","text":"<p>Info</p> <p>Esta gu\u00eda presenta ejemplos completos de componentes funcionales en React sin usar hooks, junto con todas las formas de exportar e importar componentes. Los ejemplos incluyen manejo de eventos y props complejas, optimizados para MkDocs Material.</p>"},{"location":"content/p4/#formas-de-crear-componentes-funcionales","title":"Formas de Crear Componentes Funcionales","text":"<p>A continuaci\u00f3n, se presentan las diferentes maneras de definir componentes funcionales en React, cada una con un ejemplo completo que incluye manejo de eventos y props.</p>"},{"location":"content/p4/#1-funcion-declarativa-function-declaration","title":"1. Funci\u00f3n Declarativa (Function Declaration)","text":"<pre><code>function TarjetaUsuario(props) {\n  const manejarClic = () =&gt; {\n    alert(`\u00a1Hola, ${props.nombre}! Tu rol es ${props.rol}.`);\n  };\n\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;{props.nombre}&lt;/h2&gt;\n      &lt;p&gt;Rol: {props.rol}&lt;/p&gt;\n      &lt;p&gt;Edad: {props.edad} a\u00f1os&lt;/p&gt;\n      &lt;button onClick={manejarClic}&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p4/#2-funcion-expresada-function-expression","title":"2. Funci\u00f3n Expresada (Function Expression)","text":"<pre><code>const TarjetaUsuario = function (props) {\n  const manejarClic = () =&gt; {\n    alert(`\u00a1Bienvenido, ${props.nombre}! Tu correo es ${props.correo}.`);\n  };\n\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;{props.nombre}&lt;/h2&gt;\n      &lt;p&gt;Correo: {props.correo}&lt;/p&gt;\n      &lt;p&gt;Activo: {props.activo ? 'S\u00ed' : 'No'}&lt;/p&gt;\n      &lt;button onClick={manejarClic}&gt;Contactar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"content/p4/#3-arrow-function-funcion-flecha","title":"3. Arrow Function (Funci\u00f3n Flecha)","text":"<pre><code>const TarjetaUsuario = (props) =&gt; {\n  const manejarClic = () =&gt; {\n    alert(`Usuario ${props.nombre} tiene ${props.puntos} puntos.`);\n  };\n\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;{props.nombre}&lt;/h2&gt;\n      &lt;p&gt;Puntos: {props.puntos}&lt;/p&gt;\n      &lt;p&gt;Miembro desde: {props.fechaRegistro}&lt;/p&gt;\n      &lt;button onClick={manejarClic}&gt;Ver Puntos&lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n</code></pre>"},{"location":"content/p4/#4-arrow-function-con-retorno-implicito","title":"4. Arrow Function con Retorno Impl\u00edcito","text":"<pre><code>const TarjetaUsuario = (props) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{props.nombre}&lt;/h2&gt;\n    &lt;p&gt;Departamento: {props.departamento}&lt;/p&gt;\n    &lt;p&gt;Tel\u00e9fono: {props.telefono}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`Llamando a ${props.nombre} al ${props.telefono}`)}&gt;\n      Llamar\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"content/p4/#5-arrow-function-con-desestructuracion-de-props","title":"5. Arrow Function con Desestructuraci\u00f3n de Props","text":"<pre><code>const TarjetaUsuario = ({ nombre, hobbies = [], ciudad }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Ciudad: {ciudad}&lt;/p&gt;\n    &lt;p&gt;Hobbies: {hobbies.join(', ') || 'Ninguno'}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} vive en ${ciudad}`)}&gt;\n      Ver Detalles\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"content/p4/#6-funcion-con-props-por-defecto","title":"6. Funci\u00f3n con Props por Defecto","text":"<pre><code>const TarjetaUsuario = ({ nombre = \"Invitado\", rol = \"Usuario\", experiencia = 0 }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Rol: {rol}&lt;/p&gt;\n    &lt;p&gt;A\u00f1os de experiencia: {experiencia}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} tiene ${experiencia} a\u00f1os de experiencia`)}&gt;\n      Ver Experiencia\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"content/p4/#formas-de-exportar-componentes","title":"Formas de Exportar Componentes","text":"<p>A continuaci\u00f3n, se muestran las formas de exportar componentes utilizando ES Modules, con ejemplos completos.</p>"},{"location":"content/p4/#1-exportacion-por-defecto-default-export","title":"1. Exportaci\u00f3n por Defecto (Default Export)","text":"<pre><code>const TarjetaUsuario = ({ nombre, rol }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Rol: {rol}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`Rol de ${nombre}: ${rol}`)}&gt;Ver Rol&lt;/button&gt;\n  &lt;/div&gt;\n);\nexport default TarjetaUsuario;\n</code></pre>"},{"location":"content/p4/#2-exportacion-nombrada-named-export","title":"2. Exportaci\u00f3n Nombrada (Named Export)","text":"<pre><code>export const TarjetaUsuario = ({ nombre, departamento }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Departamento: {departamento}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} trabaja en ${departamento}`)}&gt;\n      Ver Departamento\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"content/p4/#3-exportacion-nombrada-multiple","title":"3. Exportaci\u00f3n Nombrada M\u00faltiple","text":"<pre><code>export const TarjetaUsuario1 = ({ nombre, correo }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Correo: {correo}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`Enviando correo a ${correo}`)}&gt;Enviar Correo&lt;/button&gt;\n  &lt;/div&gt;\n);\n\nexport const TarjetaUsuario2 = ({ nombre, telefono }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Tel\u00e9fono: {telefono}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`Llamando a ${telefono}`)}&gt;Llamar&lt;/button&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"content/p4/#4-exportacion-por-defecto-con-nombre-diferente","title":"4. Exportaci\u00f3n por Defecto con Nombre Diferente","text":"<pre><code>const TarjetaUsuario = ({ nombre, equipo }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Equipo: {equipo}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} pertenece al equipo ${equipo}`)}&gt;\n      Ver Equipo\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\nexport default TarjetaUsuario as ComponenteUsuario;\n</code></pre>"},{"location":"content/p4/#5-exportacion-al-final-del-archivo","title":"5. Exportaci\u00f3n al Final del Archivo","text":"<pre><code>const TarjetaUsuario1 = ({ nombre, rol }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Rol: {rol}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`Rol de ${nombre}: ${rol}`)}&gt;Ver Rol&lt;/button&gt;\n  &lt;/div&gt;\n);\n\nconst TarjetaUsuario2 = ({ nombre, proyecto }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Proyecto: {proyecto}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} trabaja en ${proyecto}`)}&gt;\n      Ver Proyecto\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\n\nexport { TarjetaUsuario1, TarjetaUsuario2 };\n</code></pre> <p>Note</p> <p>Las exportaciones nombradas son ideales para archivos que contienen m\u00faltiples componentes relacionados.</p>"},{"location":"content/p4/#formas-de-importar-componentes","title":"Formas de Importar Componentes","text":"<p>Dependiendo de c\u00f3mo se exportaron los componentes, hay varias formas de importarlos.</p>"},{"location":"content/p4/#1-importacion-por-defecto","title":"1. Importaci\u00f3n por Defecto","text":"<pre><code>import TarjetaUsuario from './TarjetaUsuario';\n</code></pre>"},{"location":"content/p4/#2-importacion-nombrada","title":"2. Importaci\u00f3n Nombrada","text":"<pre><code>import { TarjetaUsuario } from './TarjetaUsuario';\n</code></pre>"},{"location":"content/p4/#3-importacion-nombrada-multiple","title":"3. Importaci\u00f3n Nombrada M\u00faltiple","text":"<pre><code>import { TarjetaUsuario1, TarjetaUsuario2 } from './TarjetaUsuario';\n</code></pre>"},{"location":"content/p4/#4-importacion-con-alias","title":"4. Importaci\u00f3n con Alias","text":"<pre><code>import { TarjetaUsuario as ComponenteUsuario } from './TarjetaUsuario';\n</code></pre>"},{"location":"content/p4/#5-importacion-por-defecto-con-alias","title":"5. Importaci\u00f3n por Defecto con Alias","text":"<pre><code>import ComponenteUsuario from './TarjetaUsuario';\n</code></pre>"},{"location":"content/p4/#6-importacion-de-todo-el-modulo","title":"6. Importaci\u00f3n de Todo el M\u00f3dulo","text":"<pre><code>import * as Componentes from './TarjetaUsuario';\n// Uso: Componentes.TarjetaUsuario1, Componentes.TarjetaUsuario2\n</code></pre>"},{"location":"content/p4/#7-importacion-dinamica-lazy-loading","title":"7. Importaci\u00f3n Din\u00e1mica (Lazy Loading)","text":"<pre><code>import { lazy } from 'react';\n\nconst TarjetaUsuario = lazy(() =&gt; import('./TarjetaUsuario'));\n</code></pre> <p>Warning</p> <p>Al usar <code>lazy</code>, envuelve el componente en un <code>&lt;Suspense&gt;</code> con un <code>fallback</code> para manejar el tiempo de carga.</p>"},{"location":"content/p4/#ejemplo-completo","title":"Ejemplo Completo","text":""},{"location":"content/p4/#archivo-tarjetausuariojsx","title":"Archivo <code>TarjetaUsuario.jsx</code>","text":"<pre><code>// Componente con funci\u00f3n declarativa\nexport function TarjetaUsuario1({ nombre, rol }) {\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Rol: {rol}&lt;/p&gt;\n      &lt;button onClick={() =&gt; alert(`Rol de ${nombre}: ${rol}`)}&gt;Ver Rol&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\n// Componente con arrow function\nexport const TarjetaUsuario2 = ({ nombre, proyecto }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Proyecto: {proyecto}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} trabaja en ${proyecto}`)}&gt;\n      Ver Proyecto\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\n\n\n// Componente por defecto\nconst TarjetaPorDefecto = ({ nombre, equipo = \"Sin equipo\" }) =&gt; (\n  &lt;div className=\"tarjeta\"&gt;\n    &lt;h2&gt;{nombre}&lt;/h2&gt;\n    &lt;p&gt;Equipo: {equipo}&lt;/p&gt;\n    &lt;button onClick={() =&gt; alert(`${nombre} pertenece al equipo ${equipo}`)}&gt;\n      Ver Equipo\n    &lt;/button&gt;\n  &lt;/div&gt;\n);\nexport default TarjetaPorDefecto;\n</code></pre>"},{"location":"content/p4/#archivo-appjsx","title":"Archivo <code>App.jsx</code>","text":"<pre><code>import TarjetaPorDefecto from './TarjetaUsuario';\nimport { TarjetaUsuario1, TarjetaUsuario2, TarjetaUsuario3 } from './TarjetaUsuario';\nimport * as TodosComponentes from './TarjetaUsuario';\n\nfunction App() {\n  return (\n    &lt;div className=\"contenedor\"&gt;\n      &lt;TarjetaPorDefecto nombre=\"Ana\" equipo=\"Desarrollo\" /&gt;\n      &lt;TarjetaUsuario1 nombre=\"Carlos\" rol=\"Dise\u00f1ador\" /&gt;\n      &lt;TarjetaUsuario2 nombre=\"Mar\u00eda\" proyecto=\"Web App\" /&gt;\n      &lt;TarjetaUsuario3 nombre=\"Luis\" correo=\"luis@ejemplo.com\" /&gt;\n      &lt;TodosComponentes.TarjetaUsuario1 nombre=\"Sof\u00eda\" rol=\"Desarrolladora\" /&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"content/p4/#estilo-css-de-ejemplo","title":"Estilo CSS de Ejemplo","text":"<p>Para que los componentes se vean bien, aqu\u00ed hay un CSS b\u00e1sico:</p> <pre><code>.tarjeta {\n  border: 1px solid #ccc;\n  padding: 16px;\n  margin: 8px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n}\n\n.contenedor {\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n}\n\nbutton {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #0056b3;\n}\n</code></pre>"},{"location":"content/p5/","title":"Semana 5 - Agregar CSS a Componentes en Next.js","text":"<p>Info</p> <p>Este tutorial explica de forma sencilla las maneras de agregar estilos CSS a componentes en Next.js, excluyendo Styled-Components. Incluye ejemplos pr\u00e1cticos y est\u00e1 optimizado para MkDocs Material, con una estructura clara y ejemplos de componentes funcionales.</p>"},{"location":"content/p5/#introduccion","title":"Introducci\u00f3n","text":"<p>En Next.js, hay varias formas de aplicar estilos CSS a tus componentes React. Este tutorial cubre los m\u00e9todos m\u00e1s comunes (excepto CSS-in-JS con Styled-Components), con ejemplos simples para que puedas entender y aplicar cada uno. Los ejemplos usan componentes funcionales y se centran en una tarjeta de usuario estilizada.</p> <p>Note</p> <p>Aseg\u00farate de tener una aplicaci\u00f3n Next.js configurada (<code>npx create-next-app@latest</code>). Los ejemplos asumen que est\u00e1s usando la carpeta <code>app</code> (App Router) de Next.js.</p>"},{"location":"content/p5/#1-css-global-archivo-css-en-appglobalscss","title":"1. CSS Global (Archivo CSS en <code>/app/globals.css</code>)","text":"<p>Explicaci\u00f3n: Los estilos globales se definen en un archivo CSS general (como <code>globals.css</code>) y afectan a toda la aplicaci\u00f3n. \u00datil para estilos base o temas generales.</p> <p>Pasos:</p> <ol> <li>Usa el archivo <code>/app/globals.css</code> (creado por defecto en Next.js).</li> <li>Importa <code>globals.css</code> en el archivo <code>layout.js</code> (ya est\u00e1 importado por defecto).</li> <li>Aplica clases a tus componentes.</li> </ol> <p>Ejemplo:</p>"},{"location":"content/p5/#archivo-appglobalscss","title":"Archivo: <code>app/globals.css</code>","text":"<pre><code>.tarjeta {\n  border: 1px solid #ccc;\n  padding: 16px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  text-align: center;\n}\n\n.tarjeta h2 {\n  color: #007bff;\n}\n\n.tarjeta button {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.tarjeta button:hover {\n  background-color: #0056b3;\n}\n</code></pre>"},{"location":"content/p5/#archivo-apppagejsx","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>export default function Home() {\n  return (\n    &lt;div className=\"tarjeta\"&gt;\n      &lt;h2&gt;Usuario&lt;/h2&gt;\n      &lt;p&gt;\u00a1Bienvenido a Next.js!&lt;/p&gt;\n      &lt;button&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Tip</p> <p>Los estilos globales son ideales para temas generales, pero evita usarlos para estilos espec\u00edficos para no sobrecargar el archivo.</p>"},{"location":"content/p5/#2-modulos-css-archivos-modulecss","title":"2. M\u00f3dulos CSS (Archivos <code>.module.css</code>)","text":"<p>Explicaci\u00f3n: Los m\u00f3dulos CSS permiten estilos locales y evitan conflictos al generar nombres de clases \u00fanicos. Cada componente tiene su propio archivo <code>.module.css</code>.</p> <p>Pasos: 1. Crea un archivo CSS con la extensi\u00f3n <code>.module.css</code> (ejemplo: <code>Tarjeta.module.css</code>). 2. Importa el m\u00f3dulo en tu componente y usa las clases como propiedades de un objeto.</p> <p>Ejemplo:</p>"},{"location":"content/p5/#archivo-appcomponentstarjetamodulecss","title":"Archivo: <code>app/components/Tarjeta.module.css</code>","text":"<pre><code>.tarjeta {\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 10px;\n  background-color: #f0f4f8;\n  text-align: center;\n}\n\n.titulo {\n  color: #28a745;\n  font-size: 1.5rem;\n}\n\n.boton {\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.boton:hover {\n  background-color: #218838;\n}\n</code></pre>"},{"location":"content/p5/#archivo-appcomponentstarjetajsx","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>import styles from './Tarjeta.module.css';\n\nexport default function Tarjeta({ nombre }) {\n  return (\n    &lt;div className={styles.tarjeta}&gt;\n      &lt;h2 className={styles.titulo}&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Componente con m\u00f3dulo CSS&lt;/p&gt;\n      &lt;button className={styles.boton}&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p5/#archivo-apppagejsx_1","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>import Tarjeta from './components/Tarjeta';\n\nexport default function Home() {\n  return &lt;Tarjeta nombre=\"Ana\" /&gt;;\n}\n</code></pre> <p>Note</p> <p>Los m\u00f3dulos CSS son ideales para componentes reutilizables, ya que los estilos son locales y no afectan a otros componentes.</p>"},{"location":"content/p5/#3-estilos-en-linea-inline-css","title":"3. Estilos en L\u00ednea (Inline CSS)","text":"<p>Explicaci\u00f3n: Los estilos en l\u00ednea se aplican directamente en los elementos JSX usando el atributo <code>style</code> con un objeto JavaScript. \u00datil para estilos din\u00e1micos, pero menos escalable.</p> <p>Ejemplo:</p>"},{"location":"content/p5/#archivo-appcomponentstarjetajsx_1","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>export default function Tarjeta({ nombre }) {\n  const tarjetaEstilo = {\n    border: '1px solid #aaa',\n    padding: '16px',\n    borderRadius: '8px',\n    backgroundColor: '#f9f9f9',\n    textAlign: 'center',\n  };\n\n  const botonEstilo = {\n    padding: '8px 16px',\n    backgroundColor: '#dc3545',\n    color: 'white',\n    border: 'none',\n    borderRadius: '4px',\n    cursor: 'pointer',\n  };\n\n  return (\n    &lt;div style={tarjetaEstilo}&gt;\n      &lt;h2 style={{ color: '#dc3545' }}&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Estilos en l\u00ednea&lt;/p&gt;\n      &lt;button style={botonEstilo}&gt;Saludar&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Warning</p> <p>Los estilos en l\u00ednea no admiten pseudoclases como <code>:hover</code>. \u00dasalos solo para casos simples o din\u00e1micos.</p>"},{"location":"content/p5/#4-tailwind-css-integrado-en-nextjs","title":"4. Tailwind CSS (Integrado en Next.js)","text":"<p>Explicaci\u00f3n: Tailwind CSS es una biblioteca de utilidad que permite estilizar directamente en el JSX con clases predefinidas. Next.js tiene soporte nativo para Tailwind.</p> <p>Pasos: 1. Instala Tailwind: <code>npm install -D tailwindcss postcss autoprefixer</code>, luego ejecuta <code>npx tailwindcss init -p</code>. 2. Configura <code>tailwind.config.js</code> y a\u00f1ade las directivas en <code>app/globals.css</code>. 3. Usa clases de Tailwind en tus componentes.</p> <p>Ejemplo:</p>"},{"location":"content/p5/#archivo-tailwindconfigjs","title":"Archivo: <code>tailwind.config.js</code>","text":"<pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx}',\n    './pages/**/*.{js,ts,jsx,tsx}',\n    './components/**/*.{js,ts,jsx,tsx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre>"},{"location":"content/p5/#archivo-appglobalscss_1","title":"Archivo: <code>app/globals.css</code>","text":"<pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre>"},{"location":"content/p5/#archivo-appcomponentstarjetajsx_2","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>export default function Tarjeta({ nombre }) {\n  return (\n    &lt;div className=\"border border-gray-300 p-4 rounded-lg bg-gray-50 text-center\"&gt;\n      &lt;h2 className=\"text-2xl text-blue-600\"&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Estilizado con Tailwind CSS&lt;/p&gt;\n      &lt;button className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"&gt;\n        Saludar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Tip</p> <p>Tailwind es ideal para desarrollo r\u00e1pido y consistente. Usa la documentaci\u00f3n oficial para explorar todas las clases disponibles.</p>"},{"location":"content/p5/#ejemplo-completo-con-todos-los-metodos","title":"Ejemplo Completo con Todos los M\u00e9todos","text":""},{"location":"content/p5/#archivo-appcomponentstarjetajsx_3","title":"Archivo: <code>app/components/Tarjeta.jsx</code>","text":"<pre><code>import styles from './Tarjeta.module.css';\n\nexport default function Tarjeta({ nombre, metodo }) {\n  if (metodo === 'global') {\n    return (\n      &lt;div className=\"tarjeta\"&gt;\n        &lt;h2&gt;{nombre}&lt;/h2&gt;\n        &lt;p&gt;Estilos Globales&lt;/p&gt;\n        &lt;button&gt;Saludar&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  if (metodo === 'modulo') {\n    return (\n      &lt;div className={styles.tarjeta}&gt;\n        &lt;h2 className={styles.titulo}&gt;{nombre}&lt;/h2&gt;\n        &lt;p&gt;Estilos con M\u00f3dulo CSS&lt;/p&gt;\n        &lt;button className={styles.boton}&gt;Saludar&lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  if (metodo === 'inline') {\n    return (\n      &lt;div\n        style={{\n          border: '1px solid #aaa',\n          padding: '16px',\n          borderRadius: '8px',\n          backgroundColor: '#f9f9f9',\n          textAlign: 'center',\n        }}\n      &gt;\n        &lt;h2 style={{ color: '#dc3545' }}&gt;{nombre}&lt;/h2&gt;\n        &lt;p&gt;Estilos en L\u00ednea&lt;/p&gt;\n        &lt;button\n          style={{\n            padding: '8px 16px',\n            backgroundColor: '#dc3545',\n            color: 'white',\n            border: 'none',\n            borderRadius: '4px',\n            cursor: 'pointer',\n          }}\n        &gt;\n          Saludar\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n\n  return (\n    &lt;div className=\"border border-gray-300 p-4 rounded-lg bg-gray-50 text-center\"&gt;\n      &lt;h2 className=\"text-2xl text-blue-600\"&gt;{nombre}&lt;/h2&gt;\n      &lt;p&gt;Estilizado con Tailwind CSS&lt;/p&gt;\n      &lt;button className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"&gt;\n        Saludar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p5/#archivo-apppagejsx_2","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>import Tarjeta from './components/Tarjeta';\n\nexport default function Home() {\n  return (\n    &lt;div className=\"flex flex-wrap gap-4 p-4\"&gt;\n      &lt;Tarjeta nombre=\"Ana\" metodo=\"global\" /&gt;\n      &lt;Tarjeta nombre=\"Carlos\" metodo=\"modulo\" /&gt;\n      &lt;Tarjeta nombre=\"Mar\u00eda\" metodo=\"inline\" /&gt;\n      &lt;Tarjeta nombre=\"Luis\" metodo=\"tailwind\" /&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p5/#archivo-appcomponentstarjetamodulecss_1","title":"Archivo: <code>app/components/Tarjeta.module.css</code>","text":"<pre><code>.tarjeta {\n  border: 1px solid #ddd;\n  padding: 20px;\n  border-radius: 10px;\n  background-color: #f0f4f8;\n  text-align: center;\n}\n\n.titulo {\n  color: #28a745;\n  font-size: 1.5rem;\n}\n\n.boton {\n  padding: 10px 20px;\n  background-color: #28a745;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n\n.boton:hover {\n  background-color: #218838;\n}\n</code></pre>"},{"location":"content/p5/#archivo-appglobalscss_2","title":"Archivo: <code>app/globals.css</code>","text":"<pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n.tarjeta {\n  border: 1px solid #ccc;\n  padding: 16px;\n  border-radius: 8px;\n  background-color: #f9f9f9;\n  text-align: center;\n}\n\n.tarjeta h2 {\n  color: #007bff;\n}\n\n.tarjeta button {\n  padding: 8px 16px;\n  background-color: #007bff;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\n.tarjeta button:hover {\n  background-color: #0056b3;\n}\n</code></pre>"},{"location":"content/p5/#conclusion","title":"Conclusi\u00f3n","text":"<ul> <li>CSS Global: \u00datil para estilos generales, pero puede causar conflictos si no se organiza bien.</li> <li>M\u00f3dulos CSS: Ideal para estilos locales y reutilizables, con nombres de clases \u00fanicos.</li> <li>Estilos en L\u00ednea: Bueno para casos din\u00e1micos, pero limitado para pseudoclases como <code>:hover</code>.</li> <li>Tailwind CSS: R\u00e1pido y consistente, perfecto para proyectos que priorizan velocidad de desarrollo.</li> </ul> <p>Tip</p> <p>Para proyectos grandes, combina M\u00f3dulos CSS o Tailwind para mantener los estilos organizados y escalables. Evita estilos en l\u00ednea para componentes complejos.</p>"},{"location":"content/p5/#actividad-creacion-de-componentes-funcionales-y-estilizado-en-nextjs","title":"Actividad: Creaci\u00f3n de Componentes Funcionales y Estilizado en Next.js","text":"<p>Info</p> <p>Esta actividad est\u00e1 dise\u00f1ada para que los estudiantes practiquen la creaci\u00f3n de componentes funcionales en React (usando Next.js) en todas sus formas y apliquen diferentes m\u00e9todos de estilizado CSS (global, m\u00f3dulos CSS, en l\u00ednea y Tailwind CSS). La actividad fomenta la creatividad y el aprendizaje pr\u00e1ctico.</p>"},{"location":"content/p5/#objetivos","title":"Objetivos","text":"<ul> <li>Crear componentes funcionales en React usando todas las formas de declaraci\u00f3n (funci\u00f3n declarativa, expresada, arrow function, etc.).</li> <li>Aplicar estilos a los componentes usando CSS global, m\u00f3dulos CSS, estilos en l\u00ednea y Tailwind CSS.</li> <li>Reforzar la comprensi\u00f3n de la exportaci\u00f3n e importaci\u00f3n de componentes en Next.js.</li> <li>Desarrollar habilidades de organizaci\u00f3n de c\u00f3digo y documentaci\u00f3n.</li> </ul>"},{"location":"content/p5/#renderizado-dinamico-de-arreglos-locales-en-react","title":"Renderizado Din\u00e1mico de Arreglos Locales en React","text":""},{"location":"content/p5/#introduccion_1","title":"Introducci\u00f3n","text":"<p>En React, el renderizado din\u00e1mico es una t\u00e9cnica fundamental para mostrar datos de manera eficiente, especialmente cuando se trabaja con colecciones de datos como arreglos. Este proceso implica transformar un arreglo de datos en elementos JSX que se renderizan en la interfaz de usuario. Para lograr esto, se utilizan herramientas como el m\u00e9todo <code>.map</code>, fragmentos (<code>&lt;&gt;</code>) y las claves (<code>key</code>) para optimizar el rendimiento y garantizar un renderizado correcto.</p> <p>En este art\u00edculo, exploraremos en detalle c\u00f3mo renderizar din\u00e1micamente arreglos locales en componentes de React, con ejemplos pr\u00e1cticos y explicaciones paso a paso. Tambi\u00e9n proporcionaremos un ejemplo completo en formato de c\u00f3digo que puedes integrar en un proyecto con MkDocs Material.</p>"},{"location":"content/p5/#conceptos-clave","title":"Conceptos Clave","text":""},{"location":"content/p5/#1-renderizado-de-listas-con-map","title":"1. Renderizado de Listas con <code>.map</code>","text":"<p>El m\u00e9todo <code>.map</code> de JavaScript es una herramienta poderosa para iterar sobre un arreglo y transformarlo en una lista de elementos JSX. En React, <code>.map</code> se utiliza com\u00fanmente para generar componentes din\u00e1micos a partir de un arreglo de datos.</p> <p>\u00bfPor qu\u00e9 usar <code>.map</code>? - Permite iterar sobre un arreglo y devolver un nuevo arreglo de elementos JSX. - Es declarativo, lo que se alinea con la filosof\u00eda de React. - Simplifica la generaci\u00f3n de listas din\u00e1micas sin necesidad de bucles tradicionales como <code>for</code> o <code>while</code>.</p> <p>Ejemplo B\u00e1sico: Supongamos que tenemos un arreglo de nombres y queremos renderizar una lista (<code>&lt;ul&gt;</code>) con cada nombre como un elemento (<code>&lt;li&gt;</code>).</p> <pre><code>const nombres = ['Ana', 'Juan', 'Mar\u00eda'];\n\nfunction ListaNombres() {\n  return (\n    &lt;ul&gt;\n      {nombres.map((nombre, index) =&gt; (\n        &lt;li key={index}&gt;{nombre}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n: - <code>nombres.map</code> recorre el arreglo <code>nombres</code> y por cada elemento devuelve un <code>&lt;li&gt;</code> con el nombre. - El atributo <code>key={index}</code> asigna una clave \u00fanica a cada elemento (m\u00e1s detalles sobre <code>key</code> m\u00e1s adelante). - El resultado es una lista HTML con los nombres: Ana, Juan, Mar\u00eda.</p>"},{"location":"content/p5/#2-uso-de-fragmentos","title":"2. Uso de Fragmentos (<code>&lt;&gt;</code>)","text":"<p>En React, cada componente debe devolver un solo elemento JSX. Cuando renderizamos listas con <code>.map</code>, a menudo necesitamos envolver los elementos generados en un contenedor, como un <code>&lt;div&gt;</code>. Sin embargo, esto puede agregar elementos innecesarios al DOM. Los fragmentos (<code>&lt;&gt;</code> o <code>&lt;React.Fragment&gt;</code>) resuelven este problema al permitir agrupar elementos sin introducir nodos adicionales en el DOM.</p> <p>Ejemplo con Fragmentos: <pre><code>function ListaConFragmentos() {\n  const items = ['Item 1', 'Item 2', 'Item 3'];\n\n  return (\n    &lt;&gt;\n      {items.map((item, index) =&gt; (\n        &lt;p key={index}&gt;{item}&lt;/p&gt;\n      ))}\n    &lt;/&gt;\n  );\n}\n</code></pre></p> <p>Explicaci\u00f3n: - Los fragmentos (<code>&lt;&gt;...</code>) envuelven los elementos <code>&lt;p&gt;</code> sin agregar un <code>&lt;div&gt;</code> extra al DOM. - Esto es \u00fatil para mantener el DOM limpio y evitar estilos no deseados causados por contenedores adicionales.</p>"},{"location":"content/p5/#3-claves-key-en-listas","title":"3. Claves (<code>key</code>) en Listas","text":"<p>React utiliza el atributo <code>key</code> para identificar de manera \u00fanica cada elemento en una lista renderizada din\u00e1micamente. Esto permite a React optimizar las actualizaciones del DOM al comparar elementos entre renderizados.</p> <p>Importancia de <code>key</code>: - Ayuda a React a determinar qu\u00e9 elementos han cambiado, se han agregado o eliminado. - Mejora el rendimiento al evitar re-renderizados innecesarios. - Debe ser \u00fanico dentro de la lista y estable (es decir, no debe cambiar entre renderizados).</p> <p>Buenas Pr\u00e1cticas para <code>key</code>: - Usa un identificador \u00fanico del dato, como un ID de base de datos, en lugar de \u00edndices (<code>index</code>) si es posible. - Los \u00edndices pueden causar problemas si los elementos del arreglo cambian de orden o se eliminan.</p> <p>Ejemplo con Claves \u00danicas: Supongamos que tenemos un arreglo de objetos con IDs \u00fanicos:</p> <pre><code>const usuarios = [\n  { id: 1, nombre: 'Ana' },\n  { id: 2, nombre: 'Juan' },\n  { id: 3, nombre: 'Mar\u00eda' }\n];\n\nfunction ListaUsuarios() {\n  return (\n    &lt;ul&gt;\n      {usuarios.map((usuario) =&gt; (\n        &lt;li key={usuario.id}&gt;{usuario.nombre}&lt;/li&gt;\n      ))}\n    &lt;/ul&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n: - <code>key={usuario.id}</code> utiliza el ID \u00fanico del objeto <code>usuario</code> como clave. - Esto asegura que React pueda rastrear cada elemento incluso si el orden del arreglo cambia.</p>"},{"location":"content/p5/#ejemplo-completo-aplicacion-de-lista-de-tareas","title":"Ejemplo Completo: Aplicaci\u00f3n de Lista de Tareas","text":"<p>A continuaci\u00f3n, presentamos un ejemplo completo de una aplicaci\u00f3n de lista de tareas que utiliza <code>.map</code>, fragmentos y claves. Este ejemplo incluye un componente React que renderiza una lista din\u00e1mica de tareas con la capacidad de agregar y eliminar tareas.</p>"},{"location":"content/p5/#codigo-del-ejemplo","title":"C\u00f3digo del Ejemplo","text":"<pre><code>import React, { useState } from 'react';\n\nfunction ListaTareas() {\n  const [tareas, setTareas] = useState([\n    { id: 1, texto: 'Aprender React' },\n    { id: 2, texto: 'Construir una app' },\n    { id: 3, texto: 'Estudiar JavaScript' }\n  ]);\n  const [nuevaTarea, setNuevaTarea] = useState('');\n\n  const agregarTarea = () =&gt; {\n    if (nuevaTarea.trim() === '') return;\n    const nueva = {\n      id: tareas.length + 1,\n      texto: nuevaTarea\n    };\n    setTareas([...tareas, nueva]);\n    setNuevaTarea('');\n  };\n\n  const eliminarTarea = (id) =&gt; {\n    setTareas(tareas.filter((tarea) =&gt; tarea.id !== id));\n  };\n\n  return (\n    &lt;&gt;\n      &lt;h1&gt;Lista de Tareas&lt;/h1&gt;\n      &lt;div&gt;\n        &lt;input\n          type=\"text\"\n          value={nuevaTarea}\n          onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n          placeholder=\"Nueva tarea\"\n        /&gt;\n        &lt;button onClick={agregarTarea}&gt;Agregar&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;ul&gt;\n        {tareas.map((tarea) =&gt; (\n          &lt;li key={tarea.id}&gt;\n            {tarea.texto}\n            &lt;button onClick={() =&gt; eliminarTarea(tarea.id)}&gt;Eliminar&lt;/button&gt;\n          &lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/&gt;\n  );\n}\n\nexport default ListaTareas;\n</code></pre>"},{"location":"content/p5/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del Ejemplo","text":"<ol> <li>Estado Local (<code>useState</code>):</li> <li><code>tareas</code> almacena el arreglo de tareas, inicializado con tres tareas de ejemplo.</li> <li> <p><code>nuevaTarea</code> almacena el texto ingresado en el campo de entrada.</p> </li> <li> <p>Renderizado Din\u00e1mico con <code>.map</code>:</p> </li> <li>El m\u00e9todo <code>tareas.map</code> genera un elemento <code>&lt;li&gt;</code> por cada tarea en el arreglo.</li> <li> <p>Cada <code>&lt;li&gt;</code> incluye el texto de la tarea y un bot\u00f3n para eliminarla.</p> </li> <li> <p>Fragmentos (<code>&lt;&gt;</code>):</p> </li> <li>El componente devuelve un fragmento que contiene el t\u00edtulo (<code>&lt;h1&gt;</code>), el formulario de entrada y la lista de tareas.</li> <li> <p>Esto evita agregar un <code>&lt;div&gt;</code> innecesario al DOM.</p> </li> <li> <p>Claves (<code>key</code>):</p> </li> <li> <p>Cada tarea utiliza su <code>id</code> como clave (<code>key={tarea.id}</code>) para garantizar un seguimiento eficiente por parte de React.</p> </li> <li> <p>Interactividad:</p> </li> <li>La funci\u00f3n <code>agregarTarea</code> a\u00f1ade una nueva tarea al arreglo.</li> <li>La funci\u00f3n <code>eliminarTarea</code> filtra las tareas para eliminar la seleccionada seg\u00fan su <code>id</code>.</li> </ol>"},{"location":"content/p5/#configuracion-para-mkdocs-material","title":"Configuraci\u00f3n para MkDocs Material","text":"<p>Para integrar este contenido en un proyecto con MkDocs Material, aseg\u00farate de tener un proyecto MkDocs configurado. A continuaci\u00f3n, se explica c\u00f3mo incluir el ejemplo en tu documentaci\u00f3n.</p>"},{"location":"content/p5/#estructura-del-proyecto","title":"Estructura del Proyecto","text":"<pre><code>mkdocs-project/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u251c\u2500\u2500 renderizado_dinamico_react.md\n\u251c\u2500\u2500 mkdocs.yml\n</code></pre>"},{"location":"content/p5/#configuracion-de-mkdocsyml","title":"Configuraci\u00f3n de <code>mkdocs.yml</code>","text":"<p>Aseg\u00farate de que tu archivo <code>mkdocs.yml</code> incluya el tema Material y habilite el resaltado de c\u00f3digo para JSX:</p> <pre><code>site_name: Gu\u00eda de React\ntheme:\n  name: material\n  features:\n    - content.code.copy\nmarkdown_extensions:\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.superfences\n  - pymdownx.tabbed\n</code></pre>"},{"location":"content/p5/#guardar-el-contenido","title":"Guardar el Contenido","text":"<p>Guarda el contenido de este art\u00edculo en <code>docs/renderizado_dinamico_react.md</code>. Luego, ejecuta <code>mkdocs serve</code> para visualizar la documentaci\u00f3n localmente.</p>"},{"location":"content/p5/#mejores-practicas","title":"Mejores Pr\u00e1cticas","text":"<ol> <li>Usa Claves \u00danicas y Estables:</li> <li>Evita usar \u00edndices como claves si los elementos del arreglo pueden cambiar de orden o eliminarse.</li> <li> <p>Prefiere identificadores \u00fanicos como IDs generados por una base de datos o una librer\u00eda como <code>uuid</code>.</p> </li> <li> <p>Minimiza Elementos en el DOM:</p> </li> <li> <p>Usa fragmentos (<code>&lt;&gt;</code>) en lugar de <code>&lt;div&gt;</code> innecesarios para mantener el DOM limpio.</p> </li> <li> <p>Optimiza el Rendimiento:</p> </li> <li>Si la lista es grande, considera usar t\u00e9cnicas como paginaci\u00f3n o virtualizaci\u00f3n (por ejemplo, con <code>react-window</code>).</li> <li> <p>Evita realizar operaciones costosas dentro de <code>.map</code>.</p> </li> <li> <p>Valida los Datos:</p> </li> <li>Aseg\u00farate de que los datos del arreglo sean v\u00e1lidos antes de renderizarlos para evitar errores.</li> </ol>"},{"location":"content/p6/","title":"Semana 6 - Evaluaci\u00f3n Primer Momento","text":""},{"location":"content/p6/#evaluacion-de-conocimiento","title":"Evaluaci\u00f3n de Conocimiento","text":"<p>La evaluaci\u00f3n de conocimiento se realizar\u00e1 a trav\u00e9s de la plataforma: <pre><code>http://seia.space\n</code></pre></p>"},{"location":"content/p7/","title":"Semana 7: Renderizado Din\u00e1mico de Arreglos Locales en React y Next.js","text":"<p>El renderizado din\u00e1mico de arreglos locales es una pr\u00e1ctica com\u00fan en React y Next.js para mostrar listas de datos en la interfaz de usuario. Esto se logra principalmente utilizando el m\u00e9todo <code>.map()</code> de JavaScript, fragmentos (<code>&lt;&gt;</code>) para agrupar elementos sin nodos adicionales en el DOM, y la prop <code>key</code> para optimizar el rendimiento y evitar problemas de reconciliaci\u00f3n en el DOM virtual. Este documento explica en detalle c\u00f3mo implementar el renderizado din\u00e1mico de arreglos locales en componentes de React dentro de un proyecto Next.js, incluyendo ejemplos pr\u00e1cticos, buenas pr\u00e1cticas y el uso de Tailwind CSS para estilos. Los ejemplos se basan en una aplicaci\u00f3n de tienda en l\u00ednea que muestra una lista de productos.</p>"},{"location":"content/p7/#conceptos-clave","title":"Conceptos clave","text":""},{"location":"content/p7/#1-renderizado-dinamico-con-map","title":"1. Renderizado din\u00e1mico con <code>.map()</code>","text":"<p>El m\u00e9todo <code>.map()</code> de JavaScript itera sobre un arreglo y devuelve un nuevo arreglo con los elementos transformados. En React, se usa para generar elementos JSX din\u00e1micamente a partir de un arreglo de datos.</p> <ul> <li>Uso: Transforma cada elemento del arreglo en un componente o elemento JSX.</li> <li>Ejemplo: <code>array.map(item =&gt; &lt;div&gt;{item}&lt;/div&gt;)</code></li> </ul>"},{"location":"content/p7/#2-fragmentos-o-reactfragment","title":"2. Fragmentos (<code>&lt;&gt;</code> o <code>&lt;React.Fragment&gt;</code>)","text":"<p>Los fragmentos permiten agrupar m\u00faltiples elementos JSX sin introducir un nodo adicional en el DOM (como un <code>&lt;div&gt;</code>).</p> <ul> <li>Uso: Envolver m\u00faltiples elementos devueltos por <code>.map()</code> para cumplir con la regla de React de devolver un solo elemento.</li> <li>Ventaja: Reduce el clutter en el DOM, mejorando el rendimiento y la sem\u00e1ntica.</li> <li>Ejemplo: <code>&lt;&gt;{array.map(item =&gt; &lt;div&gt;{item}&lt;/div&gt;)}</code></li> </ul>"},{"location":"content/p7/#3-prop-key","title":"3. Prop <code>key</code>","text":"<p>La prop <code>key</code> es un identificador \u00fanico que React usa para optimizar la reconciliaci\u00f3n del DOM virtual, evitando renders innecesarios y manteniendo el estado de los componentes.</p> <ul> <li>Uso: Se asigna a cada elemento generado por <code>.map()</code> usando un valor \u00fanico (como un ID).</li> <li>Regla: No uses \u00edndices del arreglo (<code>index</code>) como <code>key</code> si los datos pueden cambiar (ordenar, agregar, eliminar), ya que puede causar problemas de rendimiento o comportamiento inesperado.</li> <li>Ejemplo: <code>&lt;div key={item.id}&gt;{item.nombre}&lt;/div&gt;</code></li> </ul>"},{"location":"content/p7/#configuracion-del-proyecto-en-nextjs","title":"Configuraci\u00f3n del proyecto en Next.js","text":"<p>Antes de los ejemplos, configuraremos un proyecto Next.js con Tailwind CSS para estilizar los componentes.</p>"},{"location":"content/p7/#crear-un-proyecto-nextjs","title":"Crear un proyecto Next.js","text":"<ol> <li> <p>Crea un nuevo proyecto Next.js:    <pre><code>npx create-next-app@latest mi-tienda\ncd mi-tienda\n</code></pre></p> </li> <li> <p>Instala Tailwind CSS:    <pre><code>npm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n</code></pre></p> </li> <li> <p>Configura <code>tailwind.config.js</code>:    <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./app/**/*.{js,ts,jsx,tsx}\",\n    \"./pages/**/*.{js,ts,jsx,tsx}\",\n    \"./components/**/*.{js,ts,jsx,tsx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n</code></pre></p> </li> <li> <p>Agrega las directivas de Tailwind en <code>app/globals.css</code>:    <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre></p> </li> <li> <p>Aseg\u00farate de que <code>package.json</code> incluya las dependencias necesarias:    <pre><code>{\n  \"dependencies\": {\n    \"next\": \"14.2.14\",\n    \"react\": \"18.3.1\",\n    \"react-dom\": \"18.3.1\"\n  },\n  \"devDependencies\": {\n    \"tailwindcss\": \"^3.4.13\",\n    \"postcss\": \"^8.4.47\",\n    \"autoprefixer\": \"^10.4.20\"\n  }\n}\n</code></pre></p> </li> </ol>"},{"location":"content/p7/#ejemplo-practico-lista-de-productos","title":"Ejemplo pr\u00e1ctico: Lista de productos","text":"<p>Crearemos un componente que renderiza din\u00e1micamente una lista de productos almacenada en un arreglo local. Usaremos <code>.map()</code>, fragmentos, y la prop <code>key</code>, con estilos de Tailwind CSS.</p>"},{"location":"content/p7/#codigo-del-componente","title":"C\u00f3digo del componente","text":""},{"location":"content/p7/#archivo-componentsproductlistjsx","title":"Archivo: <code>components/ProductList.jsx</code>","text":"<pre><code>import React from 'react';\n\nconst products = [\n  { id: 1, name: 'Laptop', price: 999.99, category: 'Electr\u00f3nica' },\n  { id: 2, name: 'Smartphone', price: 699.99, category: 'Electr\u00f3nica' },\n  { id: 3, name: 'Zapatillas', price: 89.99, category: 'Moda' },\n  { id: 4, name: 'Libro', price: 19.99, category: 'Libros' },\n];\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Lista de Productos&lt;/h1&gt;\n      &lt;&gt;\n        {products.map((product) =&gt; (\n          &lt;div\n            key={product.id}\n            className=\"bg-white shadow-md rounded-lg p-4 mb-4 flex justify-between items-center\"\n          &gt;\n            &lt;div&gt;\n              &lt;h2 className=\"text-xl font-semibold\"&gt;{product.name}&lt;/h2&gt;\n              &lt;p className=\"text-gray-600\"&gt;Categor\u00eda: {product.category}&lt;/p&gt;\n            &lt;/div&gt;\n            &lt;p className=\"text-lg font-bold text-green-600\"&gt;${product.price.toFixed(2)}&lt;/p&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p7/#archivo-apppagejsx","title":"Archivo: <code>app/page.jsx</code>","text":"<pre><code>import ProductList from '../components/ProductList';\n\nexport default function Home() {\n  return (\n    &lt;main&gt;\n      &lt;ProductList /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"content/p7/#explicacion-del-ejemplo","title":"Explicaci\u00f3n del ejemplo","text":"<ul> <li>Arreglo local (<code>products</code>):</li> <li>Definimos un arreglo est\u00e1tico de objetos que representan productos, cada uno con <code>id</code>, <code>name</code>, <code>price</code> y <code>category</code>.</li> <li> <p>En un escenario real, este arreglo podr\u00eda provenir de una API o base de datos.</p> </li> <li> <p>Uso de <code>.map()</code>:</p> </li> <li>Iteramos sobre <code>products</code> con <code>.map()</code> para generar un <code>&lt;div&gt;</code> por cada producto.</li> <li> <p>Cada <code>&lt;div&gt;</code> muestra el nombre, categor\u00eda y precio del producto.</p> </li> <li> <p>Fragmentos (<code>&lt;&gt;</code>):</p> </li> <li>Envolvemos los elementos generados por <code>.map()</code> en un fragmento (<code>&lt;&gt;</code>) para cumplir con la regla de React de devolver un solo elemento ra\u00edz.</li> <li> <p>Esto evita agregar un <code>&lt;div&gt;</code> innecesario en el DOM.</p> </li> <li> <p>Prop <code>key</code>:</p> </li> <li>Usamos <code>key={product.id}</code> para asignar un identificador \u00fanico a cada <code>&lt;div&gt;</code>.</li> <li> <p>El <code>id</code> es \u00fanico y estable, lo que ayuda a React a rastrear los elementos y optimizar las actualizaciones.</p> </li> <li> <p>Estilos con Tailwind CSS:</p> </li> <li>Usamos clases de Tailwind como <code>max-w-4xl</code>, <code>mx-auto</code>, <code>p-4</code>, <code>shadow-md</code>, etc., para centrar el contenido, agregar sombras, bordes redondeados y estilos responsivos.</li> <li> <p>Los productos se muestran en tarjetas con un dise\u00f1o limpio y moderno.</p> </li> <li> <p>Estructura del DOM:</p> </li> <li>El componente genera una lista de tarjetas, cada una representando un producto, sin nodos adicionales gracias al fragmento.</li> </ul>"},{"location":"content/p7/#variaciones-y-casos-avanzados","title":"Variaciones y casos avanzados","text":""},{"location":"content/p7/#1-renderizado-condicional-dentro-de-map","title":"1. Renderizado condicional dentro de <code>.map()</code>","text":"<p>A veces, necesitas renderizar elementos solo si cumplen ciertas condiciones. Por ejemplo, mostrar solo productos de una categor\u00eda espec\u00edfica.</p>"},{"location":"content/p7/#codigo","title":"C\u00f3digo","text":"<pre><code>import React from 'react';\n\nconst products = [\n  { id: 1, name: 'Laptop', price: 999.99, category: 'Electr\u00f3nica' },\n  { id: 2, name: 'Smartphone', price: 699.99, category: 'Electr\u00f3nica' },\n  { id: 3, name: 'Zapatillas', price: 89.99, category: 'Moda' },\n  { id: 4, name: 'Libro', price: 19.99, category: 'Libros' },\n];\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Productos Electr\u00f3nicos&lt;/h1&gt;\n      &lt;&gt;\n        {products.map((product) =&gt;\n          product.category === 'Electr\u00f3nica' ? (\n            &lt;div\n              key={product.id}\n              className=\"bg-white shadow-md rounded-lg p-4 mb-4 flex justify-between items-center\"\n            &gt;\n              &lt;div&gt;\n                &lt;h2 className=\"text-xl font-semibold\"&gt;{product.name}&lt;/h2&gt;\n                &lt;p className=\"text-gray-600\"&gt;Categor\u00eda: {product.category}&lt;/p&gt;\n              &lt;/div&gt;\n              &lt;p className=\"text-lg font-bold text-green-600\"&gt;${product.price.toFixed(2)}&lt;/p&gt;\n            &lt;/div&gt;\n          ) : null\n        )}\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p7/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Condicional: Dentro de <code>.map()</code>, usamos un operador ternario (<code>?:</code>) para renderizar solo los productos de la categor\u00eda \"Electr\u00f3nica\". Si la condici\u00f3n no se cumple, devolvemos <code>null</code>, lo que no genera ning\u00fan elemento en el DOM.</li> <li>Fragmentos: Seguimos usando <code>&lt;&gt;</code> para envolver los elementos generados.</li> <li>Key: Cada elemento renderizado tiene un <code>key</code> basado en <code>product.id</code>.</li> </ul>"},{"location":"content/p7/#2-componente-reutilizable-para-cada-elemento","title":"2. Componente reutilizable para cada elemento","text":"<p>Para mejorar la modularidad, podemos extraer la l\u00f3gica de renderizado de cada producto a un componente separado.</p>"},{"location":"content/p7/#codigo_1","title":"C\u00f3digo","text":"<pre><code>// components/ProductItem.jsx\nimport React from 'react';\n\nconst ProductItem = ({ product }) =&gt; {\n  return (\n    &lt;div className=\"bg-white shadow-md rounded-lg p-4 mb-4 flex justify-between items-center\"&gt;\n      &lt;div&gt;\n        &lt;h2 className=\"text-xl font-semibold\"&gt;{product.name}&lt;/h2&gt;\n        &lt;p className=\"text-gray-600\"&gt;Categor\u00eda: {product.category}&lt;/p&gt;\n      &lt;/div&gt;\n      &lt;p className=\"text-lg font-bold text-green-600\"&gt;${product.price.toFixed(2)}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductItem;\n\n// components/ProductList.jsx\nimport React from 'react';\nimport ProductItem from './ProductItem';\n\nconst products = [\n  { id: 1, name: 'Laptop', price: 999.99, category: 'Electr\u00f3nica' },\n  { id: 2, name: 'Smartphone', price: 699.99, category: 'Electr\u00f3nica' },\n  { id: 3, name: 'Zapatillas', price: 89.99, category: 'Moda' },\n  { id: 4, name: 'Libro', price: 19.99, category: 'Libros' },\n];\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Lista de Productos&lt;/h1&gt;\n      &lt;&gt;\n        {products.map((product) =&gt; (\n          &lt;ProductItem key={product.id} product={product} /&gt;\n        ))}\n      &lt;/&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p7/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li>Componente <code>ProductItem</code>: Encapsula la l\u00f3gica de renderizado de un solo producto, recibiendo <code>product</code> como prop.</li> <li>Reutilizaci\u00f3n: <code>ProductList</code> usa <code>ProductItem</code> dentro de <code>.map()</code>, pasando cada <code>product</code> como prop.</li> <li>Key: La prop <code>key</code> se asigna en el nivel de <code>ProductItem</code> para mantener la optimizaci\u00f3n.</li> <li>Ventajas: Mejora la mantenibilidad y permite reutilizar <code>ProductItem</code> en otros contextos.</li> </ul>"},{"location":"content/p7/#3-manejo-de-arreglos-vacios","title":"3. Manejo de arreglos vac\u00edos","text":"<p>Es importante manejar casos donde el arreglo est\u00e9 vac\u00edo para evitar mostrar una lista vac\u00eda sin retroalimentaci\u00f3n al usuario.</p>"},{"location":"content/p7/#codigo_2","title":"C\u00f3digo","text":"<pre><code>import React from 'react';\nimport ProductItem from './ProductItem';\n\nconst products = []; // Arreglo vac\u00edo para este ejemplo\n\nconst ProductList = () =&gt; {\n  return (\n    &lt;div className=\"max-w-4xl mx-auto p-4\"&gt;\n      &lt;h1 className=\"text-3xl font-bold mb-6 text-center\"&gt;Lista de Productos&lt;/h1&gt;\n      {products.length === 0 ? (\n        &lt;p className=\"text-center text-gray-500\"&gt;No hay productos disponibles.&lt;/p&gt;\n      ) : (\n        &lt;&gt;\n          {products.map((product) =&gt; (\n            &lt;ProductItem key={product.id} product={product} /&gt;\n          ))}\n        &lt;/&gt;\n      )}\n    &lt;/div&gt;\n  );\n};\n\nexport default ProductList;\n</code></pre>"},{"location":"content/p7/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>Condicional: Usamos un operador ternario para verificar si <code>products.length === 0</code>. Si est\u00e1 vac\u00edo, mostramos un mensaje; si no, renderizamos la lista.</li> <li>Fragmentos: Cuando hay productos, usamos <code>&lt;&gt;</code> para envolver los elementos generados por <code>.map()</code>.</li> <li>Buena pr\u00e1ctica: Siempre proporcionar retroalimentaci\u00f3n al usuario cuando no hay datos.</li> </ul>"},{"location":"content/p8/","title":"Semana 8: Enrutamiento en Next.js 13+ (App Router)","text":"<p>Este tutorial explica de manera detallada c\u00f3mo funciona el enrutamiento en Next.js 13 o superior utilizando el App Router (directorio <code>app</code>). </p>"},{"location":"content/p8/#introduccion-al-app-router","title":"Introducci\u00f3n al App Router","text":"<p>El App Router, introducido en Next.js 13, es un sistema de enrutamiento basado en archivos que aprovecha los React Server Components para ofrecer un enrutamiento m\u00e1s flexible y potente. A diferencia del Pages Router (basado en el directorio <code>pages</code>), el App Router utiliza el directorio <code>app</code> y permite crear dise\u00f1os compartidos, manejar rutas din\u00e1micas, rutas paralelas, interceptaci\u00f3n de rutas, y m\u00e1s.</p> <p>El enrutamiento en el App Router se basa en la estructura de carpetas y archivos dentro del directorio <code>app</code>. Cada carpeta representa un segmento de ruta, y los archivos espec\u00edficos (como <code>page.js</code>) definen la interfaz de usuario para esa ruta.</p>"},{"location":"content/p8/#conceptos-fundamentales","title":"Conceptos Fundamentales","text":"<p>Antes de profundizar, es importante entender algunos t\u00e9rminos clave utilizados en el App Router:</p> <ul> <li>\u00c1rbol: Representa la estructura jer\u00e1rquica de las rutas, similar a un \u00e1rbol de componentes o carpetas.</li> <li>Segmento de ruta: Cada carpeta dentro de <code>app</code> representa un segmento de la URL (por ejemplo, <code>/dashboard/settings</code> tiene los segmentos <code>dashboard</code> y <code>settings</code>).</li> <li>Ra\u00edz: La carpeta <code>app</code> es la ra\u00edz del \u00e1rbol de enrutamiento.</li> <li>Hoja: El \u00faltimo segmento de una ruta, que suele contener un archivo <code>page.js</code> para renderizar la interfaz de usuario.</li> <li>Ruta URL: La parte de la URL despu\u00e9s del dominio, compuesta por segmentos (por ejemplo, <code>/dashboard/settings</code>).</li> </ul> <p>El App Router utiliza convenciones espec\u00edficas de nombres de archivos para definir comportamientos en las rutas, como <code>page.js</code> para p\u00e1ginas, <code>layout.js</code> para dise\u00f1os, y otros archivos especiales que veremos m\u00e1s adelante.</p>"},{"location":"content/p8/#estructura-basica-del-enrutamiento","title":"Estructura B\u00e1sica del Enrutamiento","text":"<p>El enrutamiento en Next.js 13+ se define autom\u00e1ticamente seg\u00fan la estructura de carpetas dentro del directorio <code>app</code>. A continuaci\u00f3n, se explica c\u00f3mo crear rutas b\u00e1sicas.</p>"},{"location":"content/p8/#crear-una-ruta-basica","title":"Crear una Ruta B\u00e1sica","text":"<p>Para crear una p\u00e1gina, a\u00f1ade un archivo <code>page.js</code> dentro del directorio <code>app</code>. Este archivo define el contenido principal de la ruta.</p> <p>Por ejemplo, para crear la p\u00e1gina de inicio (<code>/</code>):</p> <pre><code>app/\n\u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/page.js</code>:</p> <pre><code>export default function Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Bienvenido a mi aplicaci\u00f3n Next.js&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina de inicio.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Este archivo <code>page.js</code> se asigna autom\u00e1ticamente a la ruta ra\u00edz (<code>/</code>). Cuando un usuario visita <code>http://localhost:3000/</code>, ver\u00e1 el contenido definido en este archivo.</p>"},{"location":"content/p8/#rutas-anidadas","title":"Rutas Anidadas","text":"<p>Para crear rutas anidadas, simplemente crea carpetas dentro de <code>app</code> y a\u00f1ade un archivo <code>page.js</code> en cada una. Por ejemplo, para crear la ruta <code>/dashboard/settings</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 dashboard/\n    \u2514\u2500\u2500 settings/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/dashboard/settings/page.js</code>:</p> <pre><code>export default function Settings() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Configuraciones&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina de configuraciones.&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Al visitar <code>http://localhost:3000/dashboard/settings</code>, se renderizar\u00e1 el contenido de <code>page.js</code> en la carpeta <code>settings</code>. La estructura de carpetas define autom\u00e1ticamente la jerarqu\u00eda de la URL.</p>"},{"location":"content/p8/#disenos-layouts","title":"Dise\u00f1os (Layouts)","text":"<p>Los layouts son componentes que envuelven el contenido de las p\u00e1ginas y permiten compartir elementos comunes, como barras de navegaci\u00f3n o pies de p\u00e1gina, entre varias rutas. Se definen con un archivo <code>layout.js</code>.</p>"},{"location":"content/p8/#layout-raiz","title":"Layout Ra\u00edz","text":"<p>El layout ra\u00edz es obligatorio y se define en <code>app/layout.js</code>. Este layout envuelve todas las p\u00e1ginas de la aplicaci\u00f3n.</p> <p>Contenido de <code>app/layout.js</code>:</p> <pre><code>export default function RootLayout({ children }) {\n  return (\n    &lt;html lang=\"es\"&gt;\n      &lt;body&gt;\n        &lt;header&gt;\n          &lt;h1&gt;Mi Aplicaci\u00f3n&lt;/h1&gt;\n          &lt;nav&gt;\n            &lt;a href=\"/\"&gt;Inicio&lt;/a&gt; | &lt;a href=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n          &lt;/nav&gt;\n        &lt;/header&gt;\n        &lt;main&gt;{children}&lt;/main&gt;\n        &lt;footer&gt;\n          &lt;p&gt;\u00a9 2025 Mi Aplicaci\u00f3n&lt;/p&gt;\n        &lt;/footer&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  );\n}\n</code></pre> <ul> <li>El par\u00e1metro <code>children</code> contiene el contenido de las p\u00e1ginas hijas (por ejemplo, el contenido de <code>page.js</code>).</li> <li>Este layout se aplica a todas las rutas de la aplicaci\u00f3n.</li> </ul>"},{"location":"content/p8/#layouts-anidados","title":"Layouts Anidados","text":"<p>Puedes definir layouts anidados para rutas espec\u00edficas creando un archivo <code>layout.js</code> dentro de una carpeta. Por ejemplo, para aplicar un layout solo a las rutas bajo <code>/dashboard</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 dashboard/\n    \u2514\u2500\u2500 layout.js\n    \u2514\u2500\u2500 page.js\n    \u2514\u2500\u2500 settings/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/dashboard/layout.js</code>:</p> <pre><code>export default function DashboardLayout({ children }) {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Panel de Control&lt;/h2&gt;\n      &lt;nav&gt;\n        &lt;a href=\"/dashboard\"&gt;Inicio del Dashboard&lt;/a&gt; | &lt;a href=\"/dashboard/settings\"&gt;Configuraciones&lt;/a&gt;\n      &lt;/nav&gt;\n      &lt;main&gt;{children}&lt;/main&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Este layout envuelve todas las p\u00e1ginas dentro de la carpeta <code>dashboard</code> (por ejemplo, <code>/dashboard</code> y <code>/dashboard/settings</code>).</li> <li>El layout ra\u00edz (<code>app/layout.js</code>) seguir\u00e1 envolviendo este layout anidado, creando una jerarqu\u00eda.</li> </ul>"},{"location":"content/p8/#rutas-dinamicas","title":"Rutas Din\u00e1micas","text":"<p>Las rutas din\u00e1micas permiten manejar URLs con par\u00e1metros variables, como <code>/products/[id]</code>. En el App Router, las rutas din\u00e1micas se crean usando corchetes (<code>[]</code>) en los nombres de las carpetas.</p>"},{"location":"content/p8/#ejemplo-de-ruta-dinamica","title":"Ejemplo de Ruta Din\u00e1mica","text":"<p>Para crear una ruta din\u00e1mica como <code>/products/[id]</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 products/\n    \u2514\u2500\u2500 [id]/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/products/[id]/page.js</code>:</p> <pre><code>export default function Product({ params }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Producto {params.id}&lt;/h1&gt;\n      &lt;p&gt;Esta es la p\u00e1gina del producto con ID: {params.id}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>La carpeta <code>[id]</code> indica que el segmento de la URL es din\u00e1mico.</li> <li>El par\u00e1metro <code>params</code> contiene los valores din\u00e1micos (por ejemplo, <code>{ id: \"123\" }</code> para la URL <code>/products/123</code>).</li> </ul>"},{"location":"content/p8/#rutas-dinamicas-anidadas","title":"Rutas Din\u00e1micas Anidadas","text":"<p>Puedes anidar rutas din\u00e1micas. Por ejemplo, para <code>/users/[userId]/posts/[postId]</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 users/\n    \u2514\u2500\u2500 [userId]/\n        \u2514\u2500\u2500 posts/\n            \u2514\u2500\u2500 [postId]/\n                \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/users/[userId]/posts/[postId]/page.js</code>:</p> <pre><code>export default function Post({ params }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Post {params.postId} del usuario {params.userId}&lt;/h1&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Para la URL <code>/users/1/posts/42</code>, <code>params</code> ser\u00e1 <code>{ userId: \"1\", postId: \"42\" }</code>.</li> </ul>"},{"location":"content/p8/#rutas-de-captura-total-catch-all-routes","title":"Rutas de Captura Total (Catch-All Routes)","text":"<p>Las rutas de captura total permiten manejar m\u00faltiples segmentos de URL. Se definen usando <code>[...slug]</code>.</p> <p>Por ejemplo, para capturar todas las rutas bajo <code>/blog</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 blog/\n    \u2514\u2500\u2500 [...slug]/\n        \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/blog/[...slug]/page.js</code>:</p> <pre><code>export default function BlogPost({ params }) {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Blog&lt;/h1&gt;\n      &lt;p&gt;Segmentos: {params.slug.join('/')}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li>Para la URL <code>/blog/2023/octubre/mi-post</code>, <code>params.slug</code> ser\u00e1 <code>[\"2023\", \"octubre\", \"mi-post\"]</code>.</li> <li>\u00datil para manejar estructuras de URL profundas o indeterminadas.</li> </ul>"},{"location":"content/p8/#archivos-especiales","title":"Archivos Especiales","text":"<p>El App Router utiliza archivos especiales para definir comportamientos espec\u00edficos:</p> <ul> <li><code>page.js</code>: Define el contenido principal de una ruta.</li> <li><code>layout.js</code>: Define un dise\u00f1o que envuelve las p\u00e1ginas hijas.</li> <li><code>loading.js</code>: Muestra un estado de carga mientras se renderiza una p\u00e1gina.</li> <li><code>error.js</code>: Maneja errores en una ruta.</li> <li><code>not-found.js</code>: Muestra una p\u00e1gina personalizada para rutas no encontradas (404).</li> </ul> <p>Por ejemplo, para agregar un estado de carga a <code>/dashboard</code>:</p> <pre><code>app/\n\u2514\u2500\u2500 dashboard/\n    \u2514\u2500\u2500 loading.js\n    \u2514\u2500\u2500 page.js\n</code></pre> <p>Contenido de <code>app/dashboard/loading.js</code>:</p> <pre><code>export default function Loading() {\n  return &lt;div&gt;Cargando...&lt;/div&gt;;\n}\n</code></pre> <ul> <li>Este componente se muestra autom\u00e1ticamente mientras se carga el contenido de <code>/dashboard</code>.</li> </ul>"},{"location":"content/p8/#navegacion-con-el-componente-link","title":"Navegaci\u00f3n con el Componente Link","text":"<p>El componente <code>Link</code> de <code>next/link</code> permite realizar navegaci\u00f3n del lado del cliente, mejorando la experiencia de usuario al evitar recargas completas.</p> <p>Ejemplo de uso:</p> <pre><code>import Link from 'next/link';\n\nexport default function Home() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Inicio&lt;/h1&gt;\n      &lt;Link href=\"/dashboard\"&gt;Ir al Dashboard&lt;/Link&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <ul> <li><code>Link</code> precarga autom\u00e1ticamente las rutas visibles en la ventana gr\u00e1fica en modo producci\u00f3n, mejorando el rendimiento.</li> </ul>"},{"location":"content/p8/#enrutamiento-programatico","title":"Enrutamiento Program\u00e1tico","text":"<p>Para navegar program\u00e1ticamente, usa el hook <code>useRouter</code> de <code>next/router</code>:</p> <pre><code>'use client'; // Indica que es un componente del cliente\nimport { useRouter } from 'next/router';\n\nexport default function Button() {\n  const router = useRouter();\n\n  return (\n    &lt;button onClick={() =&gt; router.push('/dashboard')}&gt;\n      Ir al Dashboard\n    &lt;/button&gt;\n  );\n}\n</code></pre> <ul> <li>Aseg\u00farate de usar <code>'use client'</code> en componentes que utilicen hooks del lado del cliente.</li> </ul>"},{"location":"content/p8/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ol> <li>Organizaci\u00f3n de carpetas: Usa guiones bajos (<code>_</code>) para carpetas que no formen parte del enrutamiento (por ejemplo, <code>_components</code> o <code>_hooks</code>).</li> <li>Layouts compartidos: Aprovecha los layouts para mantener consistencia en la UI.</li> <li>Rutas din\u00e1micas: Usa nombres descriptivos para par\u00e1metros din\u00e1micos (por ejemplo, <code>[userId]</code> en lugar de <code>[id]</code>).</li> <li>Optimizaci\u00f3n: Habilita el precargado de rutas con <code>Link</code> y aprovecha la cach\u00e9 del App Router para mejorar el rendimiento.</li> </ol>"},{"location":"content/p9/","title":"Semana 9: Hook useState - Gu\u00eda Simple y Detallada","text":""},{"location":"content/p9/#que-es-usestate","title":"\u00bfQu\u00e9 es useState?","text":"<p>El hook <code>useState</code> es la forma m\u00e1s simple de agregar estado a un componente funcional en React. Piensa en el estado como la \"memoria\" de tu componente - informaci\u00f3n que puede cambiar y que React necesita recordar.</p>"},{"location":"content/p9/#concepto-simple","title":"Concepto Simple","text":"<pre><code>const [valor, setValor] = useState(valorInicial);\n</code></pre> <ul> <li><code>valor</code>: Lo que queremos recordar</li> <li><code>setValor</code>: Funci\u00f3n para cambiar ese valor</li> <li><code>valorInicial</code>: El valor al inicio</li> </ul>"},{"location":"content/p9/#importacion","title":"Importaci\u00f3n","text":"<p>Siempre debemos importar useState antes de usarlo:</p> <pre><code>import { useState } from 'react';\n</code></pre>"},{"location":"content/p9/#ejemplo-1-mi-primer-estado","title":"Ejemplo 1: Mi Primer Estado","text":"<p>Comencemos con algo s\u00faper simple - un contador:</p> <pre><code>import { useState } from 'react';\n\nfunction MiContador() {\n  // Creamos un estado que empieza en 0\n  const [numero, setNumero] = useState(0);\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;El n\u00famero es: {numero}&lt;/h2&gt;\n      &lt;button onClick={() =&gt; setNumero(numero + 1)}&gt;\n        Sumar 1\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00bfQu\u00e9 pasa aqu\u00ed? 1. <code>useState(0)</code> crea un estado que empieza en 0 2. <code>numero</code> contiene el valor actual 3. <code>setNumero</code> es la funci\u00f3n para cambiarlo 4. Cuando hacemos clic, <code>setNumero(numero + 1)</code> aumenta el n\u00famero 5. React autom\u00e1ticamente actualiza la pantalla</p>"},{"location":"content/p9/#ejemplo-2-texto-que-cambia","title":"Ejemplo 2: Texto que Cambia","text":"<p>Ahora veamos c\u00f3mo manejar texto:</p> <pre><code>function SaludoPersonalizado() {\n  const [nombre, setNombre] = useState('');\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"text\"\n        value={nombre}\n        onChange={(e) =&gt; setNombre(e.target.value)}\n        placeholder=\"Escribe tu nombre\"\n      /&gt;\n      &lt;h2&gt;\u00a1Hola {nombre}!&lt;/h2&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Explicaci\u00f3n paso a paso: 1. <code>useState('')</code> crea un estado de texto vac\u00edo 2. <code>value={nombre}</code> conecta el input con nuestro estado 3. <code>onChange</code> se ejecuta cada vez que escribimos 4. <code>e.target.value</code> es lo que escribi\u00f3 el usuario 5. <code>setNombre(e.target.value)</code> actualiza nuestro estado</p>"},{"location":"content/p9/#tipos-de-estados-comunes","title":"Tipos de Estados Comunes","text":""},{"location":"content/p9/#1-numeros","title":"1. N\u00fameros","text":"<pre><code>function Calculadora() {\n  const [precio, setPrecio] = useState(0);\n  const [cantidad, setCantidad] = useState(1);\n\n  const total = precio * cantidad;\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        type=\"number\" \n        value={precio}\n        onChange={(e) =&gt; setPrecio(Number(e.target.value))}\n        placeholder=\"Precio\"\n      /&gt;\n      &lt;input \n        type=\"number\" \n        value={cantidad}\n        onChange={(e) =&gt; setCantidad(Number(e.target.value))}\n        placeholder=\"Cantidad\"\n      /&gt;\n      &lt;h3&gt;Total: ${total}&lt;/h3&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p9/#2-verdaderofalso-boolean","title":"2. Verdadero/Falso (Boolean)","text":"<pre><code>function Interruptor() {\n  const [encendido, setEncendido] = useState(false);\n\n  return (\n    &lt;div&gt;\n      &lt;button onClick={() =&gt; setEncendido(!encendido)}&gt;\n        {encendido ? 'Apagar' : 'Encender'}\n      &lt;/button&gt;\n      &lt;p&gt;La luz est\u00e1 {encendido ? 'encendida' : 'apagada'}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p9/#3-listas-arrays","title":"3. Listas (Arrays)","text":"<pre><code>function ListaTareas() {\n  const [tareas, setTareas] = useState([]);\n  const [nuevaTarea, setNuevaTarea] = useState('');\n\n  const agregarTarea = () =&gt; {\n    if (nuevaTarea.trim()) {\n      setTareas([...tareas, nuevaTarea]);\n      setNuevaTarea('');\n    }\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        value={nuevaTarea}\n        onChange={(e) =&gt; setNuevaTarea(e.target.value)}\n        placeholder=\"Nueva tarea\"\n      /&gt;\n      &lt;button onClick={agregarTarea}&gt;Agregar&lt;/button&gt;\n\n      &lt;ul&gt;\n        {tareas.map((tarea, index) =&gt; (\n          &lt;li key={index}&gt;{tarea}&lt;/li&gt;\n        ))}\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Punto importante: <code>[...tareas, nuevaTarea]</code> crea una nueva lista con todos los elementos anteriores m\u00e1s el nuevo. \u00a1Nunca modifiques la lista directamente!</p>"},{"location":"content/p9/#4-objetos","title":"4. Objetos","text":"<pre><code>function PerfilUsuario() {\n  const [usuario, setUsuario] = useState({\n    nombre: '',\n    edad: 0,\n    email: ''\n  });\n\n  const actualizarNombre = (nuevoNombre) =&gt; {\n    setUsuario({\n      ...usuario,  // Mantener todo lo anterior\n      nombre: nuevoNombre  // Cambiar solo el nombre\n    });\n  };\n\n  return (\n    &lt;div&gt;\n      &lt;input \n        value={usuario.nombre}\n        onChange={(e) =&gt; actualizarNombre(e.target.value)}\n        placeholder=\"Nombre\"\n      /&gt;\n      &lt;p&gt;Hola {usuario.nombre}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p9/#reglas-importantes","title":"Reglas Importantes","text":""},{"location":"content/p9/#no-hagas-esto","title":"\u274c NO hagas esto:","text":"<pre><code>// MAL - Modificar directamente\nconst [lista, setLista] = useState([1, 2, 3]);\nlista.push(4);  // \u00a1NO!\nsetLista(lista);\n\n// MAL - Modificar objeto directamente\nconst [persona, setPersona] = useState({nombre: 'Juan'});\npersona.nombre = 'Pedro';  // \u00a1NO!\nsetPersona(persona);\n</code></pre>"},{"location":"content/p9/#si-haz-esto","title":"\u2705 S\u00cd haz esto:","text":"<pre><code>// BIEN - Crear nueva lista\nconst [lista, setLista] = useState([1, 2, 3]);\nsetLista([...lista, 4]);\n\n// BIEN - Crear nuevo objeto\nconst [persona, setPersona] = useState({nombre: 'Juan'});\nsetPersona({...persona, nombre: 'Pedro'});\n</code></pre>"},{"location":"content/p9/#ejemplo-practico-formulario-simple","title":"Ejemplo Pr\u00e1ctico: Formulario Simple","text":"<pre><code>function FormularioContacto() {\n  const [datos, setDatos] = useState({\n    nombre: '',\n    email: '',\n    mensaje: ''\n  });\n  const [enviado, setEnviado] = useState(false);\n\n  const manejarCambio = (campo, valor) =&gt; {\n    setDatos({\n      ...datos,\n      [campo]: valor\n    });\n  };\n\n  const enviarFormulario = () =&gt; {\n    console.log('Datos enviados:', datos);\n    setEnviado(true);\n  };\n\n  if (enviado) {\n    return &lt;h2&gt;\u00a1Mensaje enviado! Gracias {datos.nombre}&lt;/h2&gt;;\n  }\n\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Cont\u00e1ctanos&lt;/h2&gt;\n\n      &lt;input \n        type=\"text\"\n        value={datos.nombre}\n        onChange={(e) =&gt; manejarCambio('nombre', e.target.value)}\n        placeholder=\"Tu nombre\"\n      /&gt;\n\n      &lt;input \n        type=\"email\"\n        value={datos.email}\n        onChange={(e) =&gt; manejarCambio('email', e.target.value)}\n        placeholder=\"Tu email\"\n      /&gt;\n\n      &lt;textarea \n        value={datos.mensaje}\n        onChange={(e) =&gt; manejarCambio('mensaje', e.target.value)}\n        placeholder=\"Tu mensaje\"\n      /&gt;\n\n      &lt;button onClick={enviarFormulario}&gt;\n        Enviar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"content/p9/#consejos-practicos","title":"Consejos Pr\u00e1cticos","text":""},{"location":"content/p9/#1-multiples-estados","title":"1. M\u00faltiples Estados","text":"<p>Puedes tener varios estados en un componente:</p> <pre><code>function MiComponente() {\n  const [nombre, setNombre] = useState('');\n  const [edad, setEdad] = useState(0);\n  const [activo, setActivo] = useState(false);\n\n  // ... resto del componente\n}\n</code></pre>"},{"location":"content/p9/#2-estado-inicial-calculado","title":"2. Estado Inicial Calculado","text":"<p>Si el valor inicial requiere c\u00e1lculo, usa una funci\u00f3n:</p> <pre><code>const [datos, setDatos] = useState(() =&gt; {\n  // Esto solo se ejecuta una vez\n  return JSON.parse(localStorage.getItem('datos')) || [];\n});\n</code></pre>"},{"location":"content/p9/#3-actualizacion-basada-en-estado-anterior","title":"3. Actualizaci\u00f3n Basada en Estado Anterior","text":"<p>Cuando el nuevo valor depende del anterior, usa una funci\u00f3n:</p> <pre><code>const [contador, setContador] = useState(0);\n\n// Mejor pr\u00e1ctica\nconst incrementar = () =&gt; {\n  setContador(prevContador =&gt; prevContador + 1);\n};\n</code></pre>"},{"location":"content/p9/#ejercicios-para-practicar","title":"Ejercicios para Practicar","text":""},{"location":"content/p9/#ejercicio-1-contador-avanzado","title":"Ejercicio 1: Contador Avanzado","text":"<p>Crea un contador que: - Pueda sumar y restar - Tenga un bot\u00f3n de reset - Muestre si el n\u00famero es par o impar</p>"},{"location":"content/p9/#ejercicio-2-lista-de-compras","title":"Ejercicio 2: Lista de Compras","text":"<p>Crea una lista donde puedas: - Agregar productos - Eliminar productos - Marcar como comprado</p>"},{"location":"content/p9/#ejercicio-3-calculadora-de-propinas","title":"Ejercicio 3: Calculadora de Propinas","text":"<p>Crea una calculadora que: - Reciba el total de la cuenta - Permita elegir porcentaje de propina - Calcule el total final</p>"},{"location":"pi/p1/","title":"Pautas de Presentaci\u00f3n para Proyecto Integrador - Programaci\u00f3n Orientada a Objetos en Java o API Simple en Spring Boot","text":""},{"location":"pi/p1/#introduccion","title":"Introducci\u00f3n","text":"<p>Estas pautas est\u00e1n dise\u00f1adas para orientar la presentaci\u00f3n grupal de un proyecto de Programaci\u00f3n Orientada a Objetos (POO) en Java, con la opci\u00f3n alternativa de implementar una API simple en Spring Boot. La exposici\u00f3n debe ser clara, profesional y destacar los conceptos de POO aplicados, el dise\u00f1o t\u00e9cnico y los resultados obtenidos. La presentaci\u00f3n debe reflejar el trabajo t\u00e9cnico y la colaboraci\u00f3n del equipo.</p>"},{"location":"pi/p1/#estructura-de-la-presentacion","title":"Estructura de la Presentaci\u00f3n","text":"<p>La presentaci\u00f3n debe durar entre 12 y 15 minutos, seguida de una sesi\u00f3n de preguntas de 3-5 minutos. Se recomienda usar diapositivas (PowerPoint, Google Slides o similar) para apoyar la exposici\u00f3n. A continuaci\u00f3n, se detalla la estructura sugerida:</p>"},{"location":"pi/p1/#1-introduccion-1-2-minutos","title":"1. Introducci\u00f3n (1-2 minutos)","text":"<ul> <li>Objetivo: Presentar el proyecto y su prop\u00f3sito.</li> <li>Contenido:</li> <li>T\u00edtulo del proyecto.</li> <li>Breve descripci\u00f3n del problema que resuelve el proyecto.</li> <li>Especificar si se desarroll\u00f3 una aplicaci\u00f3n basada en POO en Java puro o una API simple en Spring Boot.</li> <li>Objetivos principales del proyecto (por ejemplo, modelado de objetos, funcionalidad de la API).</li> <li>Miembros del equipo y roles (por ejemplo, l\u00edder, dise\u00f1ador de clases, desarrollador backend).</li> <li>Recomendaciones:</li> <li>Usar una diapositiva inicial con el t\u00edtulo, logo del proyecto (si aplica) y nombres del equipo.</li> <li>Ser concisos para captar la atenci\u00f3n del p\u00fablico.</li> </ul>"},{"location":"pi/p1/#2-contexto-y-justificacion-2-3-minutos","title":"2. Contexto y Justificaci\u00f3n (2-3 minutos)","text":"<ul> <li>Objetivo: Explicar la relevancia del proyecto.</li> <li>Contenido:</li> <li>Problema o necesidad que aborda el proyecto.</li> <li>Contexto de la aplicaci\u00f3n (por ejemplo, dominio del problema, casos de uso).</li> <li>Justificaci\u00f3n de la elecci\u00f3n de Java puro (POO) o Spring Boot (API REST).</li> <li>Recomendaciones:</li> <li>Incluir ejemplos concretos del problema que resuelve el proyecto.</li> <li>Usar diagramas simples para ilustrar el contexto o el flujo del sistema.</li> </ul>"},{"location":"pi/p1/#3-diseno-tecnico-y-tecnologias-3-4-minutos","title":"3. Dise\u00f1o T\u00e9cnico y Tecnolog\u00edas (3-4 minutos)","text":"<ul> <li>Objetivo: Detallar la estructura t\u00e9cnica del proyecto.</li> <li>Contenido:</li> <li>Para proyectos de POO en Java:<ul> <li>Explicar los principios de POO aplicados (encapsulamiento, herencia, polimorfismo, abstracci\u00f3n).</li> <li>Describir las clases principales, sus atributos, m\u00e9todos y relaciones (por ejemplo, asociaciones, herencia).</li> <li>Mostrar un diagrama UML (diagrama de clases o de casos de uso) para ilustrar el dise\u00f1o.</li> <li>Detallar cualquier biblioteca adicional utilizada (por ejemplo, Java Collections, JDBC).</li> </ul> </li> <li>Para proyectos de API simple en Spring Boot:<ul> <li>Explicar la estructura de la API (endpoints principales, m\u00e9todos HTTP como GET, POST, etc.).</li> <li>Describir las entidades, controladores, servicios y repositorios implementados.</li> <li>Detallar la conexi\u00f3n con la base de datos (si aplica) y tecnolog\u00edas utilizadas (por ejemplo, Spring Data JPA, H2, MySQL).</li> </ul> </li> <li>Integraci\u00f3n:<ul> <li>Explicar c\u00f3mo se estructur\u00f3 el proyecto para cumplir con los requisitos funcionales.</li> <li>Mostrar un diagrama de arquitectura (por ejemplo, flujo de datos entre clases o entre cliente y API).</li> </ul> </li> <li>Recomendaciones:</li> <li>Usar diagramas UML o de arquitectura claros y bien etiquetados.</li> <li>Evitar tecnicismos excesivos; explicar los conceptos en t\u00e9rminos accesibles.</li> <li>Incluir fragmentos de c\u00f3digo relevantes (por ejemplo, una clase clave o un endpoint).</li> </ul>"},{"location":"pi/p1/#4-demostracion-4-5-minutos","title":"4. Demostraci\u00f3n (4-5 minutos)","text":"<ul> <li>Objetivo: Mostrar el funcionamiento del proyecto en acci\u00f3n.</li> <li>Contenido:</li> <li>Para proyectos de POO en Java:<ul> <li>Mostrar una demostraci\u00f3n en vivo (por ejemplo, ejecuci\u00f3n de la aplicaci\u00f3n en consola o con una interfaz gr\u00e1fica simple).</li> <li>Resaltar c\u00f3mo las clases interact\u00faan para cumplir con los requisitos.</li> </ul> </li> <li>Para proyectos de API en Spring Boot:<ul> <li>Mostrar una demostraci\u00f3n de los endpoints de la API (usando herramientas como Postman o cURL).</li> <li>Si hay una interfaz b\u00e1sica (por ejemplo, Swagger UI), mostrar su uso.</li> </ul> </li> <li>Incluir ejemplos de entrada y salida (por ejemplo, resultados en consola, respuestas JSON de la API).</li> <li>Recomendaciones:</li> <li>Asegurarse de que la demostraci\u00f3n sea fluida; probar todo previamente.</li> <li>Resaltar las funcionalidades m\u00e1s importantes y su relaci\u00f3n con los conceptos de POO o la API.</li> <li>Si no es posible una demo en vivo, preparar un v\u00eddeo corto (1-2 minutos) con una narraci\u00f3n clara.</li> </ul>"},{"location":"pi/p1/#5-resultados-y-logros-2-3-minutos","title":"5. Resultados y Logros (2-3 minutos)","text":"<ul> <li>Objetivo: Resaltar los resultados obtenidos y el impacto del proyecto.</li> <li>Contenido:</li> <li>Principales funcionalidades implementadas (por ejemplo, gesti\u00f3n de datos, procesamiento de solicitudes HTTP).</li> <li>Beneficios del dise\u00f1o orientado a objetos o de la API (por ejemplo, modularidad, escalabilidad).</li> <li>Retos t\u00e9cnicos o de equipo superados durante el desarrollo.</li> <li>Posibles aplicaciones pr\u00e1cticas del proyecto.</li> <li>Recomendaciones:</li> <li>Usar ejemplos concretos o capturas de pantalla para mostrar resultados.</li> <li>Destacar el trabajo en equipo y la resoluci\u00f3n de problemas.</li> </ul>"},{"location":"pi/p1/#6-conclusiones-y-cierre-1-2-minutos","title":"6. Conclusiones y Cierre (1-2 minutos)","text":"<ul> <li>Objetivo: Resumir el proyecto y cerrar la presentaci\u00f3n.</li> <li>Contenido:</li> <li>Resumen de los puntos clave (problema, soluci\u00f3n, resultados).</li> <li>Lecciones aprendidas durante el desarrollo (por ejemplo, sobre POO o Spring Boot).</li> <li>Posibles mejoras o trabajos futuros (por ejemplo, a\u00f1adir m\u00e1s endpoints, optimizar el dise\u00f1o de clases).</li> <li>Agradecimiento al p\u00fablico y apertura a preguntas.</li> <li>Recomendaciones:</li> <li>Terminar con una diapositiva de cierre que incluya un mensaje claro o una visi\u00f3n futura.</li> <li>Preparar respuestas para posibles preguntas t\u00e9cnicas (por ejemplo, sobre dise\u00f1o de clases, manejo de errores, o rendimiento).</li> </ul>"},{"location":"pi/p2/","title":"Avance 1","text":""},{"location":"tutorials/p1/","title":"1. Introducci\u00f3n: Por qu\u00e9 la Estructura de Carpetas es Crucial","text":"<p>La estructura de carpetas en un proyecto React es mucho m\u00e1s que solo una forma de organizar archivos.  Es la columna vertebral que sostiene tu c\u00f3digo, permiti\u00e9ndote navegar, mantener y escalar tu aplicaci\u00f3n con facilidad. Una estructura bien pensada:</p> <ul> <li>Mejora la legibilidad: Facilita la comprensi\u00f3n del proyecto por ti y por otros desarrolladores.</li> <li>Facilita la mantenibilidad: Simplifica la b\u00fasqueda y modificaci\u00f3n de componentes y archivos.</li> <li>Promueve la reutilizaci\u00f3n:  Fomenta la creaci\u00f3n de componentes reutilizables al estar claramente organizados.</li> <li>Escalabilidad:  Permite que el proyecto crezca sin convertirse en un caos inmanejable.</li> <li>Colaboraci\u00f3n:  Establece un est\u00e1ndar que facilita la colaboraci\u00f3n entre desarrolladores.</li> </ul> <p>Un proyecto mal organizado puede convertirse r\u00e1pidamente en una \"gran bola de barro\", donde es dif\u00edcil encontrar lo que necesitas, las dependencias son confusas y las modificaciones tienen efectos secundarios inesperados.</p>"},{"location":"tutorials/p1/#2-estructura-de-carpetas-base-el-esqueleto-de-tu-aplicacion","title":"2. Estructura de Carpetas Base: El Esqueleto de tu Aplicaci\u00f3n","text":"<p>Comencemos con una estructura b\u00e1sica que servir\u00e1 como punto de partida.  Esta estructura se adapta tanto a proyectos JSX como TSX.</p> <pre><code>my-react-app/\n\u251c\u2500\u2500 node_modules/         (Generado autom\u00e1ticamente por npm/yarn)\n\u251c\u2500\u2500 public/                (Archivos est\u00e1ticos: index.html, etc.)\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 components/       (Componentes React)\n\u2502   \u251c\u2500\u2500 pages/           (Componentes de p\u00e1gina/vista principal)\n\u2502   \u251c\u2500\u2500 App.js/tsx         (Componente principal de la aplicaci\u00f3n)\n\u2502   \u251c\u2500\u2500 App.css            (Estilos globales de la aplicaci\u00f3n)\n\u2502   \u251c\u2500\u2500 index.js/tsx       (Punto de entrada de la aplicaci\u00f3n)\n\u2502   \u251c\u2500\u2500 index.css          (Estilos globales)\n\u2502   \u2514\u2500\u2500 assets/           (Im\u00e1genes, fuentes, etc.)\n\u251c\u2500\u2500 package.json           (Informaci\u00f3n del proyecto y dependencias)\n\u251c\u2500\u2500 README.md              (Documentaci\u00f3n del proyecto)\n\u2514\u2500\u2500 .gitignore             (Archivos a ignorar en Git)\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>node_modules/</code>: Contiene las dependencias del proyecto instaladas a trav\u00e9s de npm o yarn.  No debes modificar esta carpeta directamente.</li> <li><code>public/</code>:  Alberga archivos est\u00e1ticos como <code>index.html</code>, im\u00e1genes, favicon, etc.  <code>index.html</code> es el punto de entrada del navegador a tu aplicaci\u00f3n.</li> <li><code>src/</code>:  El coraz\u00f3n de tu aplicaci\u00f3n React.  Aqu\u00ed reside todo el c\u00f3digo fuente.  Desglosaremos las subcarpetas de <code>src/</code> en las siguientes secciones.</li> <li><code>App.js/tsx</code>: El componente principal de tu aplicaci\u00f3n.  Enlaza los diferentes componentes y gestiona la l\u00f3gica principal.</li> <li><code>index.js/tsx</code>:  El punto de entrada de JavaScript para tu aplicaci\u00f3n.  Renderiza el componente <code>App</code> en el DOM.</li> <li><code>package.json</code>:  Contiene metadatos sobre tu proyecto, como el nombre, la versi\u00f3n, las dependencias y los scripts de ejecuci\u00f3n.</li> <li><code>README.md</code>:  Un archivo de documentaci\u00f3n para tu proyecto.  Describe la funcionalidad, la instalaci\u00f3n y las instrucciones de uso.</li> <li><code>.gitignore</code>:  Especifica qu\u00e9 archivos y carpetas deben ser ignorados por Git (por ejemplo, <code>node_modules/</code>).</li> </ul>"},{"location":"tutorials/p1/#3-profundizando-en-src-organizacion-de-componentes","title":"3. Profundizando en <code>src/</code>: Organizaci\u00f3n de Componentes","text":"<p>La carpeta <code>src/components/</code> es donde residen tus componentes React.  Hay varias formas de organizarlos.  Una de las m\u00e1s comunes y recomendadas es la organizaci\u00f3n por caracter\u00edstica/dominio.</p> <pre><code>src/\n\u2514\u2500\u2500 components/\n    \u251c\u2500\u2500 Auth/\n    \u2502   \u251c\u2500\u2500 Login/\n    \u2502   \u2502   \u251c\u2500\u2500 Login.jsx/tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Login.css\n    \u2502   \u2502   \u2514\u2500\u2500 index.js       (Opcional: para exportar el componente)\n    \u2502   \u251c\u2500\u2500 Register/\n    \u2502   \u2502   \u251c\u2500\u2500 Register.jsx/tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Register.css\n    \u2502   \u2502   \u2514\u2500\u2500 index.js       (Opcional: para exportar el componente)\n    \u2502   \u2514\u2500\u2500 AuthContext.js/tsx  (Contexto de autenticaci\u00f3n, si lo usas)\n    \u251c\u2500\u2500 Product/\n    \u2502   \u251c\u2500\u2500 ProductCard/\n    \u2502   \u2502   \u251c\u2500\u2500 ProductCard.jsx/tsx\n    \u2502   \u2502   \u251c\u2500\u2500 ProductCard.css\n    \u2502   \u2502   \u2514\u2500\u2500 index.js       (Opcional: para exportar el componente)\n    \u2502   \u251c\u2500\u2500 ProductList/\n    \u2502   \u2502   \u251c\u2500\u2500 ProductList.jsx/tsx\n    \u2502   \u2502   \u2514\u2500\u2500 ProductList.css\n    \u2502   \u2514\u2500\u2500 ProductDetails/\n    \u2502       \u251c\u2500\u2500 ProductDetails.jsx/tsx\n    \u2502       \u2514\u2500\u2500 ProductDetails.css\n    \u251c\u2500\u2500 Shared/             (Componentes reutilizables en toda la aplicaci\u00f3n)\n    \u2502   \u251c\u2500\u2500 Button/\n    \u2502   \u2502   \u251c\u2500\u2500 Button.jsx/tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Button.css\n    \u2502   \u2502   \u2514\u2500\u2500 index.js       (Opcional: para exportar el componente)\n    \u2502   \u251c\u2500\u2500 Input/\n    \u2502   \u2502   \u251c\u2500\u2500 Input.jsx/tsx\n    \u2502   \u2502   \u251c\u2500\u2500 Input.css\n    \u2502   \u2502   \u2514\u2500\u2500 index.js       (Opcional: para exportar el componente)\n    \u2502   \u2514\u2500\u2500 LoadingSpinner/\n    \u2502       \u251c\u2500\u2500 LoadingSpinner.jsx/tsx\n    \u2502       \u2514\u2500\u2500 LoadingSpinner.css\n    \u2514\u2500\u2500 index.js           (Opcional: para exportar todos los componentes)\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Carpetas por caracter\u00edstica/dominio:  Agrupa los componentes relacionados con una caracter\u00edstica espec\u00edfica (por ejemplo, <code>Auth</code>, <code>Product</code>, <code>User</code>).  Esto mejora la cohesi\u00f3n y facilita la b\u00fasqueda de componentes relacionados.</li> <li>Componentes dentro de sus propias carpetas: Cada componente complejo tiene su propia carpeta que contiene el componente (<code>.jsx</code> o <code>.tsx</code>), sus estilos (<code>.css</code>, <code>.module.css</code>, o archivos de estilos con otras tecnolog\u00edas como styled-components) y, opcionalmente, un archivo <code>index.js</code> para facilitar la importaci\u00f3n.</li> <li>Componentes <code>Shared</code> (o <code>Common</code>):  Alberga componentes reutilizables en toda la aplicaci\u00f3n, como botones, inputs, modales, etc.</li> <li> <p>Archivo <code>index.js</code> (Opcional):  En cada carpeta de componente (y en la ra\u00edz de <code>components/</code>), puedes crear un archivo <code>index.js</code> que exporte todos los componentes dentro de esa carpeta.  Esto te permite importar componentes de forma m\u00e1s concisa:</p> <pre><code>// Sin index.js:\nimport Login from './components/Auth/Login/Login';\n\n// Con index.js:\nimport { Login } from './components/Auth'; // Asumiendo que Login.js exporta Login\n</code></pre> </li> </ul> <p>Ventajas de esta estructura:</p> <ul> <li>Modularidad:  Los componentes est\u00e1n aislados y organizados, lo que facilita su reutilizaci\u00f3n y mantenimiento.</li> <li>Claridad:  Es f\u00e1cil encontrar los componentes relacionados con una caracter\u00edstica espec\u00edfica.</li> <li>Escalabilidad:  A medida que tu aplicaci\u00f3n crece, puedes agregar m\u00e1s carpetas de caracter\u00edsticas sin afectar la estructura general.</li> </ul> <p>Ejemplo Pr\u00e1ctico (JSX):</p> <p><code>src/components/Auth/Login/Login.jsx</code></p> <pre><code>import React, { useState } from 'react';\nimport './Login.css';\n\nfunction Login() {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = (event) =&gt; {\n    event.preventDefault();\n    console.log('Login submitted:', username, password);\n    // L\u00f3gica de autenticaci\u00f3n aqu\u00ed\n  };\n\n  return (\n    &lt;div className=\"login-container\"&gt;\n      &lt;h2&gt;Login&lt;/h2&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;div className=\"form-group\"&gt;\n          &lt;label htmlFor=\"username\"&gt;Username:&lt;/label&gt;\n          &lt;input type=\"text\" id=\"username\" value={username} onChange={(e) =&gt; setUsername(e.target.value)} /&gt;\n        &lt;/div&gt;\n        &lt;div className=\"form-group\"&gt;\n          &lt;label htmlFor=\"password\"&gt;Password:&lt;/label&gt;\n          &lt;input type=\"password\" id=\"password\" value={password} onChange={(e) =&gt; setPassword(e.target.value)} /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n}\n\nexport default Login;\n</code></pre> <p><code>src/components/Auth/Login/Login.css</code></p> <pre><code>.login-container {\n  width: 300px;\n  margin: 50px auto;\n  padding: 20px;\n  border: 1px solid #ccc;\n  border-radius: 5px;\n}\n\n.form-group {\n  margin-bottom: 10px;\n}\n\nlabel {\n  display: block;\n  margin-bottom: 5px;\n}\n\ninput[type=\"text\"],\ninput[type=\"password\"] {\n  width: 100%;\n  padding: 8px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n}\n\nbutton {\n  background-color: #4CAF50;\n  color: white;\n  padding: 10px 15px;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n}\n\nbutton:hover {\n  background-color: #3e8e41;\n}\n</code></pre> <p><code>src/components/Auth/index.js</code></p> <pre><code>export { default as Login } from './Login/Login';\nexport { default as Register } from './Register/Register';\n</code></pre> <p>Ejemplo Pr\u00e1ctico (TSX):</p> <p><code>src/components/Auth/Login/Login.tsx</code></p> <pre><code>import React, { useState, FormEvent } from 'react';\nimport './Login.css';\n\ninterface LoginProps {\n  // Define las props que recibe el componente, si las tiene\n}\n\nconst Login: React.FC&lt;LoginProps&gt; = () =&gt; {\n  const [username, setUsername] = useState&lt;string&gt;('');\n  const [password, setPassword] = useState&lt;string&gt;('');\n\n  const handleSubmit = (event: FormEvent) =&gt; {\n    event.preventDefault();\n    console.log('Login submitted:', username, password);\n    // L\u00f3gica de autenticaci\u00f3n aqu\u00ed\n  };\n\n  return (\n    &lt;div className=\"login-container\"&gt;\n      &lt;h2&gt;Login&lt;/h2&gt;\n      &lt;form onSubmit={handleSubmit}&gt;\n        &lt;div className=\"form-group\"&gt;\n          &lt;label htmlFor=\"username\"&gt;Username:&lt;/label&gt;\n          &lt;input type=\"text\" id=\"username\" value={username} onChange={(e) =&gt; setUsername(e.target.value)} /&gt;\n        &lt;/div&gt;\n        &lt;div className=\"form-group\"&gt;\n          &lt;label htmlFor=\"password\"&gt;Password:&lt;/label&gt;\n          &lt;input type=\"password\" id=\"password\" value={password} onChange={(e) =&gt; setPassword(e.target.value)} /&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Login;\n</code></pre> <p>La principal diferencia en TSX es la adici\u00f3n de tipos, lo que mejora la seguridad y la mantenibilidad del c\u00f3digo. Observa la definici\u00f3n de la interfaz <code>LoginProps</code> y la declaraci\u00f3n de los estados con sus respectivos tipos (<code>string</code> en este caso).</p>"},{"location":"tutorials/p1/#4-pages-componentes-de-paginavista-principal-screens","title":"4. <code>pages/</code>:  Componentes de P\u00e1gina/Vista Principal (Screens)","text":"<p>La carpeta <code>src/pages/</code> (tambi\u00e9n llamada <code>views/</code> o <code>screens/</code>) contiene los componentes que representan las diferentes p\u00e1ginas o vistas principales de tu aplicaci\u00f3n.  Estos componentes suelen ser de nivel superior y orquestan la interacci\u00f3n entre varios componentes.</p> <pre><code>src/\n\u2514\u2500\u2500 pages/\n    \u251c\u2500\u2500 Home/\n    \u2502   \u251c\u2500\u2500 Home.jsx/tsx\n    \u2502   \u2514\u2500\u2500 Home.css\n    \u251c\u2500\u2500 About/\n    \u2502   \u251c\u2500\u2500 About.jsx/tsx\n    \u2502   \u2514\u2500\u2500 About.css\n    \u251c\u2500\u2500 Products/\n    \u2502   \u251c\u2500\u2500 Products.jsx/tsx\n    \u2502   \u2514\u2500\u2500 Products.css\n    \u2514\u2500\u2500 NotFound/\n        \u251c\u2500\u2500 NotFound.jsx/tsx\n        \u2514\u2500\u2500 NotFound.css\n</code></pre> <p>Ejemplo:</p> <p><code>src/pages/Home/Home.jsx</code></p> <pre><code>import React from 'react';\nimport './Home.css';\nimport ProductList from '../../components/Product/ProductList/ProductList'; // Importa el componente ProductList\n\nfunction Home() {\n  return (\n    &lt;div className=\"home-container\"&gt;\n      &lt;h1&gt;Bienvenido a nuestra tienda online&lt;/h1&gt;\n      &lt;p&gt;Descubre nuestros productos destacados:&lt;/p&gt;\n      &lt;ProductList /&gt; {/* Renderiza el componente ProductList */}\n    &lt;/div&gt;\n  );\n}\n\nexport default Home;\n</code></pre> <p>En este ejemplo, el componente <code>Home</code> utiliza el componente <code>ProductList</code> para mostrar una lista de productos.  Los componentes en <code>pages/</code> act\u00faan como contenedores que organizan y presentan datos de otros componentes.</p>"},{"location":"tutorials/p1/#5-assets-recursos-estaticos","title":"5. <code>assets/</code>: Recursos Est\u00e1ticos","text":"<p>La carpeta <code>src/assets/</code> alberga recursos est\u00e1ticos como im\u00e1genes, fuentes, iconos, etc.</p> <pre><code>src/\n\u2514\u2500\u2500 assets/\n    \u251c\u2500\u2500 images/\n    \u2502   \u251c\u2500\u2500 logo.png\n    \u2502   \u2514\u2500\u2500 product1.jpg\n    \u251c\u2500\u2500 fonts/\n    \u2502   \u251c\u2500\u2500 Roboto-Regular.ttf\n    \u2502   \u2514\u2500\u2500 Roboto-Bold.ttf\n    \u2514\u2500\u2500 icons/\n        \u251c\u2500\u2500 cart.svg\n        \u2514\u2500\u2500 search.svg\n</code></pre> <p>Organizaci\u00f3n dentro de <code>assets/</code>:</p> <ul> <li><code>images/</code>: Im\u00e1genes utilizadas en la aplicaci\u00f3n.</li> <li><code>fonts/</code>: Fuentes personalizadas.</li> <li><code>icons/</code>: Iconos SVG u otros formatos.</li> </ul>"},{"location":"tutorials/p1/#6-utils-o-helpers-funciones-utilitarias","title":"6. <code>utils/</code> (o <code>helpers/</code>): Funciones Utilitarias","text":"<p>La carpeta <code>src/utils/</code> (o <code>src/helpers/</code>) contiene funciones utilitarias que se utilizan en varios lugares de la aplicaci\u00f3n.  Estas funciones no est\u00e1n directamente relacionadas con la interfaz de usuario, sino que realizan tareas como formatear fechas, realizar c\u00e1lculos, realizar peticiones a la API, etc.</p> <pre><code>src/\n\u2514\u2500\u2500 utils/\n    \u251c\u2500\u2500 api.js/ts          (Funciones para interactuar con la API)\n    \u251c\u2500\u2500 date-formatter.js/ts (Funciones para formatear fechas)\n    \u251c\u2500\u2500 currency-formatter.js/ts (Funciones para formatear moneda)\n    \u2514\u2500\u2500 index.js           (Para exportar todas las utilidades)\n</code></pre> <p>Ejemplo (TypeScript):</p> <p><code>src/utils/api.ts</code></p> <pre><code>import axios from 'axios';\n\nconst API_BASE_URL = 'https://api.example.com';\n\nexport const getProducts = async () =&gt; {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/products`);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching products:', error);\n    throw error;\n  }\n};\n\nexport const createProduct = async (productData: any) =&gt; { // Definir un tipo m\u00e1s espec\u00edfico para productData\n  try {\n    const response = await axios.post(`${API_BASE_URL}/products`, productData);\n    return response.data;\n  } catch (error) {\n    console.error('Error creating product:', error);\n    throw error;\n  }\n};\n</code></pre> <p>Este ejemplo muestra funciones para obtener y crear productos utilizando la biblioteca <code>axios</code> para realizar peticiones HTTP.  Observa el uso de TypeScript para definir el tipo de <code>productData</code>.</p>"},{"location":"tutorials/p1/#7-contexts-gestion-de-estado-global","title":"7. <code>contexts/</code>: Gesti\u00f3n de Estado Global","text":"<p>La carpeta <code>src/contexts/</code> se utiliza para almacenar contextos de React que gestionan el estado global de la aplicaci\u00f3n.  Esto es \u00fatil para compartir datos entre componentes sin tener que pasar props manualmente a trav\u00e9s de toda la jerarqu\u00eda de componentes (prop drilling).</p> <pre><code>src/\n\u2514\u2500\u2500 contexts/\n    \u251c\u2500\u2500 AuthContext.js/tsx     (Contexto de autenticaci\u00f3n)\n    \u251c\u2500\u2500 ThemeContext.js/tsx    (Contexto de tema)\n    \u2514\u2500\u2500 CartContext.js/tsx     (Contexto del carrito de compras)\n</code></pre> <p>Ejemplo (JSX):</p> <p><code>src/contexts/AuthContext.js</code></p> <pre><code>import React, { createContext, useState, useContext } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) =&gt; {\n  const [user, setUser] = useState(null);\n\n  const login = (userData) =&gt; {\n    setUser(userData);\n    localStorage.setItem('user', JSON.stringify(userData));\n  };\n\n  const logout = () =&gt; {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  const value = {\n    user,\n    login,\n    logout,\n  };\n\n  return (\n    &lt;AuthContext.Provider value={value}&gt;\n      {children}\n    &lt;/AuthContext.Provider&gt;\n  );\n};\n\nexport const useAuth = () =&gt; {\n  return useContext(AuthContext);\n};\n</code></pre> <p>Este ejemplo crea un contexto <code>AuthContext</code> que gestiona la informaci\u00f3n del usuario autenticado.  El componente <code>AuthProvider</code> proporciona el contexto a sus hijos, y el hook <code>useAuth</code> permite acceder al contexto desde cualquier componente hijo.</p>"},{"location":"tutorials/p1/#8-services-logica-de-negocio-y-comunicaciones-externas","title":"8. <code>services/</code>: L\u00f3gica de Negocio y Comunicaciones Externas","text":"<p>Aunque a veces se puede incluir la l\u00f3gica de negocio en <code>utils/</code>, si esta l\u00f3gica es compleja y est\u00e1 muy ligada a interacciones con un servidor o APIs externas, crear una carpeta <code>services/</code> puede ser m\u00e1s adecuado. Esta carpeta contendr\u00e1 clases o m\u00f3dulos que encapsulan la l\u00f3gica de interacci\u00f3n con el backend, la transformaci\u00f3n de datos, y la gesti\u00f3n de errores relacionados con estas interacciones.</p> <pre><code>src/\n\u2514\u2500\u2500 services/\n    \u251c\u2500\u2500 ProductService.js/ts    (Servicio para interactuar con la API de productos)\n    \u251c\u2500\u2500 UserService.js/ts       (Servicio para interactuar con la API de usuarios)\n    \u2514\u2500\u2500 AuthService.js/ts       (Servicio para autenticaci\u00f3n)\n</code></pre> <p>Esta organizaci\u00f3n separa la l\u00f3gica de presentaci\u00f3n de la l\u00f3gica de negocio, haciendo que los componentes sean m\u00e1s f\u00e1ciles de probar y mantener.</p>"},{"location":"tutorials/p1/#9-otras-consideraciones-y-mejoras","title":"9. Otras Consideraciones y Mejoras","text":"<ul> <li>Tests: Crea una carpeta <code>src/__tests__/</code> (o simplemente <code>__tests__/</code> en la ra\u00edz del proyecto) para almacenar tus archivos de test.  Organiza los tests de forma similar a la estructura de tu c\u00f3digo fuente (por componente o caracter\u00edstica).</li> <li>Hooks Personalizados: Puedes crear una carpeta <code>src/hooks/</code> para almacenar hooks personalizados que encapsulan l\u00f3gica reutilizable.</li> <li>Documentaci\u00f3n: Utiliza comentarios y herramientas como JSDoc o TypeDoc para documentar tu c\u00f3digo.</li> <li>Code Style: Utiliza un linter (como ESLint) y un formatter (como Prettier) para mantener un estilo de c\u00f3digo consistente en todo el proyecto.</li> <li> <p>Module Aliases: Configura aliases de m\u00f3dulo en tu webpack (o configuraci\u00f3n de bundler) para simplificar las importaciones:</p> <pre><code>// webpack.config.js\nresolve: {\n  alias: {\n    '@components': path.resolve(__dirname, 'src/components/'),\n    '@utils': path.resolve(__dirname, 'src/utils/'),\n    // ...otros aliases\n  }\n}\n</code></pre> <p>Esto te permite importar componentes as\u00ed:</p> <pre><code>import Button from '@components/Shared/Button/Button'; // en lugar de '../../components/Shared/Button/Button'\n</code></pre> </li> </ul>"},{"location":"tutorials/p2/","title":"Tutorial: Condicionales en React con JavaScript y Operador Ternario","text":""},{"location":"tutorials/p2/#introduccion","title":"Introducci\u00f3n","text":"<p>En React, las condicionales son fundamentales para crear interfaces din\u00e1micas que respondan al estado de la aplicaci\u00f3n. Este tutorial te ense\u00f1ar\u00e1 a usar funciones declarativas puras junto con JavaScript nativo para crear componentes que rendericen contenido de manera condicional.</p> <p>Aprender\u00e1s a: - Usar el operador ternario para renderizado condicional - Implementar l\u00f3gica compleja con JavaScript en JSX - Crear funciones declarativas que reciban props - Aplicar estilos din\u00e1micos basados en condiciones - Procesar datos usando m\u00e9todos de arrays nativos</p>"},{"location":"tutorials/p2/#1-fundamentos-del-renderizado-condicional","title":"1. Fundamentos del Renderizado Condicional","text":""},{"location":"tutorials/p2/#operador-ternario-basico","title":"Operador Ternario B\u00e1sico","text":"<p>El operador ternario es la forma m\u00e1s com\u00fan de renderizado condicional en React:</p> <pre><code>function MensajeBienvenida({ usuario }) {\n  return (\n    &lt;div&gt;\n      {usuario ? (\n        &lt;h1&gt;\u00a1Bienvenido, {usuario.nombre}!&lt;/h1&gt;\n      ) : (\n        &lt;h1&gt;Por favor, inicia sesi\u00f3n&lt;/h1&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"tutorials/p2/#renderizado-condicional-con","title":"Renderizado Condicional con &amp;&amp;","text":"<p>Para mostrar algo solo cuando una condici\u00f3n es verdadera:</p> <pre><code>function NotificacionError({ error }) {\n  return (\n    &lt;div&gt;\n      {error &amp;&amp; (\n        &lt;div style={{ color: 'red', padding: '10px', border: '1px solid red' }}&gt;\n          Error: {error}\n        &lt;/div&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"tutorials/p2/#2-javascript-avanzado-en-jsx","title":"2. JavaScript Avanzado en JSX","text":""},{"location":"tutorials/p2/#calculos-y-manipulacion-de-datos","title":"C\u00e1lculos y Manipulaci\u00f3n de Datos","text":"<pre><code>function EjemploJavaScript({ datos = [] }) {\n  // C\u00e1lculos usando JavaScript nativo\n  const fechaActual = new Date();\n  const horaActual = fechaActual.getHours();\n  const saludo = horaActual &lt; 12 ? 'Buenos d\u00edas' : horaActual &lt; 18 ? 'Buenas tardes' : 'Buenas noches';\n\n  // Procesamiento de arrays\n  const numerosPositivos = datos.filter(num =&gt; num &gt; 0);\n  const suma = numerosPositivos.reduce((acc, num) =&gt; acc + num, 0);\n  const promedio = numerosPositivos.length &gt; 0 ? suma / numerosPositivos.length : 0;\n\n  // Manipulaci\u00f3n de strings\n  const textoFormateado = `Hoy es ${fechaActual.toLocaleDateString('es-ES')}`;\n\n  return (\n    &lt;div style={{ padding: '20px', fontFamily: 'Arial, sans-serif' }}&gt;\n      &lt;h2&gt;{saludo} \ud83d\udc4b&lt;/h2&gt;\n      &lt;p&gt;{textoFormateado}&lt;/p&gt;\n\n      {datos.length &gt; 0 ? (\n        &lt;div&gt;\n          &lt;p&gt;Datos recibidos: {datos.join(', ')}&lt;/p&gt;\n          &lt;p&gt;N\u00fameros positivos: {numerosPositivos.join(', ')}&lt;/p&gt;\n          &lt;p&gt;Suma: {suma}&lt;/p&gt;\n          &lt;p&gt;Promedio: {promedio.toFixed(2)}&lt;/p&gt;\n        &lt;/div&gt;\n      ) : (\n        &lt;p&gt;No hay datos para mostrar&lt;/p&gt;\n      )}\n\n      {/* Condicional basada en la hora */}\n      &lt;div style={{\n        backgroundColor: horaActual &lt; 6 || horaActual &gt; 20 ? '#2c3e50' : '#3498db',\n        color: 'white',\n        padding: '10px',\n        borderRadius: '5px',\n        marginTop: '10px'\n      }}&gt;\n        {horaActual &lt; 6 || horaActual &gt; 20 ? '\ud83c\udf19 Modo nocturno' : '\u2600\ufe0f Modo diurno'}\n      &lt;/div&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"tutorials/p2/#3-ejemplo-practico","title":"3. Ejemplo Pr\u00e1ctico","text":""},{"location":"tutorials/p2/#sistema-de-autenticacion","title":"Sistema de Autenticaci\u00f3n","text":"<pre><code>function AppLogin({ usuario, onLogin, onLogout }) {\n  return (\n    &lt;div style={{ maxWidth: '400px', margin: '0 auto', padding: '20px' }}&gt;\n      &lt;h1&gt;Mi Aplicaci\u00f3n&lt;/h1&gt;\n      {usuario ? (\n        &lt;ComponenteBienvenida usuario={usuario} onLogout={onLogout} /&gt;\n      ) : (\n        &lt;ComponenteLogin onLogin={onLogin} /&gt;\n      )}\n    &lt;/div&gt;\n  );\n}\n\nfunction ComponenteBienvenida({ usuario, onLogout }) {\n  const tiempoConectado = Date.now() - usuario.tiempoLogin;\n  const minutosConectado = Math.floor(tiempoConectado / (1000 * 60));\n  const esUsuarioVIP = usuario.tipo === 'premium';\n\n  return (\n    &lt;div style={{\n      backgroundColor: esUsuarioVIP ? '#f8f9fa' : '#ffffff',\n      border: esUsuarioVIP ? '2px solid #ffd700' : '1px solid #dee2e6',\n      borderRadius: '8px',\n      padding: '20px'\n    }}&gt;\n      &lt;h2&gt;\u00a1Bienvenido, {usuario.nombre}! {esUsuarioVIP &amp;&amp; '\ud83d\udc51'}&lt;/h2&gt;\n      &lt;p&gt;Email: {usuario.email}&lt;/p&gt;\n      &lt;p&gt;Tiempo conectado: {minutosConectado} minutos&lt;/p&gt;\n\n      {esUsuarioVIP &amp;&amp; (\n        &lt;div style={{ backgroundColor: '#fff3cd', padding: '10px', borderRadius: '5px', marginBottom: '10px' }}&gt;\n          \ud83c\udf1f Tienes acceso a funciones premium\n        &lt;/div&gt;\n      )}\n\n      &lt;button \n        onClick={onLogout}\n        style={{\n          backgroundColor: '#dc3545',\n          color: 'white',\n          border: 'none',\n          padding: '10px 20px',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        }}\n      &gt;\n        Cerrar Sesi\u00f3n\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n\nfunction ComponenteLogin({ onLogin }) {\n  const handleLogin = () =&gt; {\n    const usuarioDemo = {\n      nombre: 'Juan P\u00e9rez',\n      email: 'juan@ejemplo.com',\n      tipo: Math.random() &gt; 0.5 ? 'premium' : 'regular',\n      tiempoLogin: Date.now()\n    };\n    onLogin(usuarioDemo);\n  };\n\n  return (\n    &lt;div style={{ textAlign: 'center' }}&gt;\n      &lt;h2&gt;Iniciar Sesi\u00f3n&lt;/h2&gt;\n      &lt;p&gt;Haz clic para acceder con un usuario demo&lt;/p&gt;\n      &lt;button \n        onClick={handleLogin}\n        style={{\n          backgroundColor: '#28a745',\n          color: 'white',\n          border: 'none',\n          padding: '12px 24px',\n          borderRadius: '5px',\n          cursor: 'pointer',\n          fontSize: '16px'\n        }}\n      &gt;\n        Acceder\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"tutorials/p3/","title":"Tutorial: Configurar Next.js con Clerk para autenticaci\u00f3n","text":"<p>Este tutorial se centra en el uso del App Router de Next.js y la integraci\u00f3n con Clerk para autenticaci\u00f3n de usuarios.</p> <p>https://clerk.com/docs/quickstarts/nextjs</p>"},{"location":"tutorials/p3/#configuracion-completa-con-rutas-publicas-y-protegidas","title":"Configuraci\u00f3n completa con rutas p\u00fablicas y protegidas","text":"<pre><code>import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\n\n// Definir rutas p\u00fablicas (accesibles sin autenticaci\u00f3n)\nconst isPublicRoute = createRouteMatcher([\n  '/',\n  '/about',\n  '/contact',\n  '/pricing',\n  '/sign-in(.*)',\n  '/sign-up(.*)',\n  '/api/public(.*)'\n])\n\n// Definir rutas que requieren autenticaci\u00f3n b\u00e1sica\nconst isProtectedRoute = createRouteMatcher([\n  '/dashboard(.*)',\n  '/profile(.*)',\n  '/settings(.*)'\n])\n\n// Definir rutas que requieren permisos de administrador\nconst isAdminRoute = createRouteMatcher([\n  '/admin(.*)',\n  '/management(.*)'\n])\n\nexport default clerkMiddleware(async (auth, req) =&gt; {\n  // Si es una ruta p\u00fablica, permitir acceso\n  if (isPublicRoute(req)) {\n    return\n  }\n\n  // Proteger rutas de administrador con permisos espec\u00edficos\n  if (isAdminRoute(req)) {\n    await auth.protect((has) =&gt; {\n      return has({ permission: 'org:admin:example1' }) || has({ permission: 'org:admin:example2' })\n    })\n    return\n  }\n\n  // Proteger rutas generales que requieren autenticaci\u00f3n\n  if (isProtectedRoute(req)) {\n    await auth.protect()\n    return\n  }\n\n  // Por defecto, proteger todas las dem\u00e1s rutas\n  await auth.protect()\n})\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n}\n</code></pre>"},{"location":"tutorials/p3/#ejemplo-alternativo-proteger-todo-excepto-rutas-publicas","title":"Ejemplo alternativo: Proteger todo excepto rutas p\u00fablicas","text":"<pre><code>import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\n\nconst isPublicRoute = createRouteMatcher(['/sign-in(.*)', '/sign-up(.*)'])\n\nexport default clerkMiddleware(async (auth, request) =&gt; {\n  if (!isPublicRoute(request)) {\n    await auth.protect()\n  }\n})\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n}\n</code></pre>"},{"location":"tutorials/p3/#ejemplo-con-multiples-grupos-de-rutas","title":"Ejemplo con m\u00faltiples grupos de rutas","text":"<pre><code>import { clerkMiddleware, createRouteMatcher } from '@clerk/nextjs/server'\n\nconst isTenantRoute = createRouteMatcher(['/organization-selector(.*)', '/orgid/(.*)'])\n\nconst isTenantAdminRoute = createRouteMatcher(['/orgId/(.*)/memberships', '/orgId/(.*)/domain'])\n\nexport default clerkMiddleware(async (auth, req) =&gt; {\n  // Restrict admin routes to users with specific permissions\n  if (isTenantAdminRoute(req)) {\n    await auth.protect((has) =&gt; {\n      return has({ permission: 'org:admin:example1' }) || has({ permission: 'org:admin:example2' })\n    })\n  }\n  // Restrict organization routes to signed in users\n  if (isTenantRoute(req)) await auth.protect()\n})\n\nexport const config = {\n  matcher: [\n    // Skip Next.js internals and all static files, unless found in search params\n    '/((?!_next|[^?]*\\\\.(?:html?|css|js(?!on)|jpe?g|webp|png|gif|svg|ttf|woff2?|ico|csv|docx?|xlsx?|zip|webmanifest)).*)',\n    // Always run for API routes\n    '/(api|trpc)(.*)',\n  ],\n}\n</code></pre>"},{"location":"tutorials/p3/#puntos-clave","title":"Puntos clave:","text":"<ul> <li>Rutas p\u00fablicas: Accesibles sin autenticaci\u00f3n usando <code>createRouteMatcher()</code> (1) </li> <li>Rutas protegidas: Requieren autenticaci\u00f3n usando <code>auth.protect()</code> </li> <li>Rutas con permisos: Requieren roles o permisos espec\u00edficos usando <code>auth.protect((has) =&gt; {...})</code> </li> <li>Comportamiento por defecto: <code>clerkMiddleware</code> no protege ninguna ruta por defecto, debes optar por la protecci\u00f3n </li> </ul>"},{"location":"tutorials/p4/","title":"Gu\u00edas de Prisma para Next.js","text":"<p>Aprende a integrar Prisma con Next.js para construir aplicaciones web modernas y escalables. Este tutorial te guiar\u00e1 paso a paso a trav\u00e9s de la configuraci\u00f3n de Prisma en un proyecto Next.js, la conexi\u00f3n con una base de datos, la definici\u00f3n de modelos y la realizaci\u00f3n de consultas eficientes, todo ello aprovechando las capacidades de ambas herramientas para optimizar el desarrollo full-stack.</p> <p>https://www.prisma.io/docs/guides/nextjs</p>"},{"location":"tutorials/p4/#tutorial-uso-de-prisma-con-nextjs","title":"Tutorial: Uso de Prisma con Next.js","text":"<p>Este tutorial se centra exclusivamente en el uso de Prisma en un proyecto Next.js existente, sin abordar la creaci\u00f3n ni configuraci\u00f3n inicial del proyecto Next.js. Cubriremos en detalle c\u00f3mo configurar Prisma, definir modelos, realizar consultas, manejar relaciones, implementar operaciones CRUD, gestionar migraciones y optimizar el uso de Prisma en una aplicaci\u00f3n full-stack. Este tutorial est\u00e1 dise\u00f1ado para ser extenso, detallado y pr\u00e1ctico, con ejemplos claros y mejores pr\u00e1cticas.</p>"},{"location":"tutorials/p4/#1-instalacion-de-prisma","title":"1. Instalaci\u00f3n de Prisma","text":"<p>Primero, aseg\u00farate de estar en el directorio ra\u00edz de tu proyecto Next.js. Vamos a instalar las dependencias necesarias para trabajar con Prisma.</p>"},{"location":"tutorials/p4/#11-instalar-prisma-cli-y-prisma-client","title":"1.1. Instalar Prisma CLI y Prisma Client","text":"<p>Ejecuta el siguiente comando para instalar Prisma CLI como dependencia de desarrollo y Prisma Client como dependencia de producci\u00f3n:</p> <pre><code>npm install @prisma/client\nnpm install prisma --save-dev\n</code></pre> <ul> <li>Prisma CLI (<code>prisma</code>): Herramienta para gestionar el esquema de la base de datos y ejecutar migraciones.</li> <li>Prisma Client (<code>@prisma/client</code>): Cliente generado autom\u00e1ticamente para interactuar con la base de datos desde tu c\u00f3digo.</li> </ul>"},{"location":"tutorials/p4/#12-inicializar-prisma","title":"1.2. Inicializar Prisma","text":"<p>Inicializa Prisma en tu proyecto ejecutando:</p> <pre><code>npx prisma init\n</code></pre> <p>Esto crear\u00e1: - Un archivo <code>prisma/schema.prisma</code>: Define los modelos de datos y la configuraci\u00f3n de la base de datos. - Un archivo <code>.env</code>: Contiene las variables de entorno, como la URL de conexi\u00f3n a la base de datos.</p>"},{"location":"tutorials/p4/#2-configuracion-del-archivo-schemaprisma","title":"2. Configuraci\u00f3n del archivo <code>schema.prisma</code>","text":"<p>El archivo <code>schema.prisma</code> es el coraz\u00f3n de Prisma, donde defines la conexi\u00f3n a la base de datos y los modelos de datos. Abre <code>prisma/schema.prisma</code> y config\u00faralo seg\u00fan tus necesidades.</p>"},{"location":"tutorials/p4/#21-configurar-el-proveedor-de-la-base-de-datos","title":"2.1. Configurar el proveedor de la base de datos","text":"<p>En el archivo <code>schema.prisma</code>, especifica el proveedor de la base de datos. Por ejemplo, para PostgreSQL:</p> <pre><code>datasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n</code></pre> <p>Aseg\u00farate de que la variable <code>DATABASE_URL</code> est\u00e9 definida en el archivo <code>.env</code>. Ejemplo para PostgreSQL:</p> <pre><code>DATABASE_URL=\"postgresql://username:password@localhost:5432/mydatabase?schema=public\"\n</code></pre> <p>Sustituye <code>username</code>, <code>password</code>, <code>localhost</code>, <code>5432</code> y <code>mydatabase</code> con los valores correspondientes a tu base de datos.</p>"},{"location":"tutorials/p4/#22-definir-el-generador-de-prisma-client","title":"2.2. Definir el generador de Prisma Client","text":"<p>Configura el generador para Prisma Client:</p> <pre><code>generator client {\n  provider = \"prisma-client-js\"\n}\n</code></pre> <p>Esto indica a Prisma que genere un cliente JavaScript/TypeScript para interactuar con la base de datos.</p>"},{"location":"tutorials/p4/#23-crear-modelos","title":"2.3. Crear modelos","text":"<p>Define los modelos que representan las tablas de tu base de datos. Por ejemplo, un modelo para <code>User</code> y <code>Post</code>:</p> <pre><code>model User {\n  id        Int      @id @default(autoincrement())\n  email     String   @unique\n  name      String\n  posts     Post[]\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\nmodel Post {\n  id        Int      @id @default(autoincrement())\n  title     String\n  content   String?\n  published Boolean  @default(false)\n  author    User     @relation(fields: [authorId], references: [id])\n  authorId  Int\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>@id</code>: Indica que el campo es la clave primaria.</li> <li><code>@default(autoincrement())</code>: Genera un ID \u00fanico autom\u00e1ticamente.</li> <li><code>@unique</code>: Asegura que el campo <code>email</code> sea \u00fanico.</li> <li><code>@relation</code>: Define una relaci\u00f3n uno-a-muchos entre <code>User</code> y <code>Post</code>.</li> <li><code>@default(now())</code>: Establece la fecha actual como valor predeterminado.</li> <li><code>@updatedAt</code>: Actualiza autom\u00e1ticamente el campo cuando se modifica el registro.</li> <li><code>String?</code>: Indica que el campo es opcional (puede ser <code>null</code>).</li> </ul>"},{"location":"tutorials/p4/#3-sincronizacion-con-la-base-de-datos-migraciones","title":"3. Sincronizaci\u00f3n con la base de datos (Migraciones)","text":"<p>Una vez definidos los modelos, sincroniza el esquema con la base de datos mediante migraciones.</p>"},{"location":"tutorials/p4/#31-crear-una-migracion-inicial","title":"3.1. Crear una migraci\u00f3n inicial","text":"<p>Ejecuta el siguiente comando para generar una migraci\u00f3n basada en tu esquema:</p> <pre><code>npx prisma migrate dev --name init\n</code></pre> <ul> <li><code>migrate dev</code>: Crea y aplica la migraci\u00f3n a la base de datos.</li> <li><code>--name init</code>: Asigna un nombre a la migraci\u00f3n (en este caso, \"init\").</li> <li>Esto genera un directorio <code>prisma/migrations/</code> con los archivos SQL correspondientes.</li> </ul>"},{"location":"tutorials/p4/#32-aplicar-migraciones-en-produccion","title":"3.2. Aplicar migraciones en producci\u00f3n","text":"<p>Para entornos de producci\u00f3n, usa:</p> <pre><code>npx prisma migrate deploy\n</code></pre> <p>Esto aplica las migraciones existentes sin generar nuevas.</p>"},{"location":"tutorials/p4/#33-generar-prisma-client","title":"3.3. Generar Prisma Client","text":"<p>Cada vez que actualices el esquema, regenera Prisma Client para reflejar los cambios:</p> <pre><code>npx prisma generate\n</code></pre> <p>Esto actualiza el cliente en <code>node_modules/@prisma/client</code>.</p>"},{"location":"tutorials/p4/#4-uso-de-prisma-client-en-tu-aplicacion","title":"4. Uso de Prisma Client en tu aplicaci\u00f3n","text":"<p>Prisma Client te permite realizar consultas a la base de datos de forma segura y tipada. Vamos a crear un m\u00f3dulo para inicializar Prisma Client y luego usarlo en rutas de Next.js.</p>"},{"location":"tutorials/p4/#41-inicializar-prisma-client","title":"4.1. Inicializar Prisma Client","text":"<p>Crea un archivo <code>lib/prisma.js</code> para inicializar Prisma Client de manera que se reutilice la misma instancia:</p> <pre><code>import { PrismaClient } from '@prisma/client';\n\nconst prisma = global.prisma || new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') {\n  global.prisma = prisma;\n}\n\nexport default prisma;\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li>Singleton Pattern: Reutiliza la misma instancia de Prisma Client para evitar m\u00faltiples conexiones.</li> <li>Entorno de desarrollo: Almacena la instancia en <code>global</code> solo en desarrollo para manejar recargas en caliente (hot-reloading).</li> </ul>"},{"location":"tutorials/p4/#42-operaciones-crud","title":"4.2. Operaciones CRUD","text":"<p>A continuaci\u00f3n, ejemplos detallados de operaciones CRUD usando Prisma Client en rutas API de Next.js.</p>"},{"location":"tutorials/p4/#421-crear-un-usuario","title":"4.2.1. Crear un usuario","text":"<p>Crea una ruta API en <code>pages/api/users/create.js</code>:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    try {\n      const { email, name } = req.body;\n      const user = await prisma.user.create({\n        data: {\n          email,\n          name,\n        },\n      });\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ error: 'Error creating user', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>prisma.user.create</code>: Inserta un nuevo registro en la tabla <code>User</code>.</li> <li>Manejo de errores: Captura errores y devuelve una respuesta adecuada.</li> <li>Validaci\u00f3n de m\u00e9todo: Solo permite solicitudes POST.</li> </ul>"},{"location":"tutorials/p4/#422-obtener-todos-los-usuarios","title":"4.2.2. Obtener todos los usuarios","text":"<p>Crea una ruta API en <code>pages/api/users/index.js</code>:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    try {\n      const users = await prisma.user.findMany({\n        include: {\n          posts: true, // Incluye los posts relacionados\n        },\n      });\n      res.status(200).json(users);\n    } catch (error) {\n      res.status(400).json({ error: 'Error fetching users', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>findMany</code>: Recupera todos los registros de la tabla <code>User</code>.</li> <li><code>include</code>: Incluye los datos relacionados (en este caso, los posts de cada usuario).</li> </ul>"},{"location":"tutorials/p4/#423-obtener-un-usuario-por-id","title":"4.2.3. Obtener un usuario por ID","text":"<p>Crea una ruta API en <code>pages/api/users/[id].js</code>:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n\n  if (req.method === 'GET') {\n    try {\n      const user = await prisma.user.findUnique({\n        where: {\n          id: parseInt(id),\n        },\n        include: {\n          posts: true,\n        },\n      });\n      if (!user) {\n        return res.status(404).json({ error: 'User not found' });\n      }\n      res.status(200).json(user);\n    } catch (error) {\n      res.status(400).json({ error: 'Error fetching user', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>findUnique</code>: Busca un registro por su clave primaria o un campo \u00fanico.</li> <li><code>parseInt(id)</code>: Convierte el ID de la URL (string) a n\u00famero, ya que el modelo espera un <code>Int</code>.</li> </ul>"},{"location":"tutorials/p4/#424-actualizar-un-usuario","title":"4.2.4. Actualizar un usuario","text":"<p>Crea una ruta API en <code>pages/api/users/update/[id].js</code>:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n\n  if (req.method === 'PUT') {\n    try {\n      const { email, name } = req.body;\n      const user = await prisma.user.update({\n        where: {\n          id: parseInt(id),\n        },\n        data: {\n          email,\n          name,\n        },\n      });\n      res.status(200).json(user);\n    } catch (error) {\n      res.status(400).json({ error: 'Error updating user', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>update</code>: Actualiza un registro existente basado en el campo <code>where</code>.</li> <li>Datos parciales: Solo se actualizan los campos proporcionados.</li> </ul>"},{"location":"tutorials/p4/#425-eliminar-un-usuario","title":"4.2.5. Eliminar un usuario","text":"<p>Crea una ruta API en <code>pages/api/users/delete/[id].js</code>:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  const { id } = req.query;\n\n  if (req.method === 'DELETE') {\n    try {\n      const user = await prisma.user.delete({\n        where: {\n          id: parseInt(id),\n        },\n      });\n      res.status(200).json({ message: 'User deleted', user });\n    } catch (error) {\n      res.status(400).json({ error: 'Error deleting user', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>delete</code>: Elimina un registro basado en el campo <code>where</code>.</li> <li>Restricciones de relaci\u00f3n: Si el usuario tiene posts relacionados, la eliminaci\u00f3n fallar\u00e1 a menos que configures una acci\u00f3n en cascada en el modelo.</li> </ul>"},{"location":"tutorials/p4/#5-manejo-de-relaciones","title":"5. Manejo de relaciones","text":"<p>Prisma facilita el manejo de relaciones, como la relaci\u00f3n uno-a-muchos entre <code>User</code> y <code>Post</code>.</p>"},{"location":"tutorials/p4/#51-crear-un-post-con-un-autor","title":"5.1. Crear un post con un autor","text":"<p>Crea una ruta API en <code>pages/api/posts/create.js</code>:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  if (req.method === 'POST') {\n    try {\n      const { title, content, authorId } = req.body;\n      const post = await prisma.post.create({\n        data: {\n          title,\n          content,\n          author: {\n            connect: { id: parseInt(authorId) },\n          },\n        },\n      });\n      res.status(201).json(post);\n    } catch (error) {\n      res.status(400).json({ error: 'Error creating post', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>connect</code>: Asocia el post con un usuario existente mediante su <code>id</code>.</li> <li>Validaci\u00f3n: Aseg\u00farate de que el <code>authorId</code> exista en la base de datos para evitar errores.</li> </ul>"},{"location":"tutorials/p4/#52-consultar-posts-con-su-autor","title":"5.2. Consultar posts con su autor","text":"<p>Modifica la ruta <code>pages/api/posts/index.js</code> para incluir el autor de cada post:</p> <pre><code>import prisma from '../../../lib/prisma';\n\nexport default async function handler(req, res) {\n  if (req.method === 'GET') {\n    try {\n      const posts = await prisma.post.findMany({\n        include: {\n          author: {\n            select: {\n              id: true,\n              name: true,\n              email: true,\n            },\n          },\n        },\n      });\n      res.status(200).json(posts);\n    } catch (error) {\n      res.status(400).json({ error: 'Error fetching posts', details: error.message });\n    }\n  } else {\n    res.status(405).json({ error: 'Method not allowed' });\n  }\n}\n</code></pre> <p>Explicaci\u00f3n:</p> <ul> <li><code>include</code>: Incluye los datos del autor.</li> <li><code>select</code>: Limita los campos devueltos del autor para optimizar la consulta.</li> </ul>"},{"location":"tutorials/p4/#6-consultas-avanzadas","title":"6. Consultas avanzadas","text":"<p>Prisma ofrece potentes funciones para consultas avanzadas.</p>"},{"location":"tutorials/p4/#61-filtrado","title":"6.1. Filtrado","text":"<p>Filtra posts publicados:</p> <pre><code>const publishedPosts = await prisma.post.findMany({\n  where: {\n    published: true,\n  },\n});\n</code></pre>"},{"location":"tutorials/p4/#62-paginacion","title":"6.2. Paginaci\u00f3n","text":"<p>Implementa paginaci\u00f3n para limitar resultados:</p> <pre><code>const page = 1;\nconst pageSize = 10;\nconst posts = await prisma.post.findMany({\n  skip: (page - 1) * pageSize,\n  take: pageSize,\n});\n</code></pre>"},{"location":"tutorials/p4/#63-ordenacion","title":"6.3. Ordenaci\u00f3n","text":"<p>Ordena posts por fecha de creaci\u00f3n:</p> <pre><code>const posts = await prisma.post.findMany({\n  orderBy: {\n    createdAt: 'desc',\n  },\n});\n</code></pre>"},{"location":"tutorials/p4/#64-busqueda-con-condiciones-multiples","title":"6.4. B\u00fasqueda con condiciones m\u00faltiples","text":"<p>Busca posts por t\u00edtulo y estado:</p> <pre><code>const posts = await prisma.post.findMany({\n  where: {\n    AND: [\n      { title: { contains: 'prisma', mode: 'insensitive' } },\n      { published: true },\n    ],\n  },\n});\n</code></pre>"},{"location":"tutorials/p4/#7-mejores-practicas","title":"7. Mejores pr\u00e1cticas","text":""},{"location":"tutorials/p4/#71-manejo-de-errores","title":"7.1. Manejo de errores","text":"<p>Siempre captura errores en las consultas y devuelve respuestas adecuadas:</p> <pre><code>try {\n  const user = await prisma.user.findUnique({ where: { id: parseInt(id) } });\n  if (!user) throw new Error('User not found');\n  res.status(200).json(user);\n} catch (error) {\n  res.status(400).json({ error: error.message });\n}\n</code></pre>"},{"location":"tutorials/p4/#72-optimizacion-de-consultas","title":"7.2. Optimizaci\u00f3n de consultas","text":"<p>Usa <code>select</code> o <code>include</code> con moderaci\u00f3n para evitar cargar datos innecesarios:</p> <pre><code>const users = await prisma.user.findMany({\n  select: {\n    id: true,\n    name: true,\n  },\n});\n</code></pre>"},{"location":"tutorials/p4/#73-validacion-de-datos","title":"7.3. Validaci\u00f3n de datos","text":"<p>Valida los datos de entrada antes de enviarlos a Prisma para evitar errores:</p> <pre><code>if (!email || !name) {\n  return res.status(400).json({ error: 'Email and name are required' });\n}\n</code></pre>"},{"location":"tutorials/p4/#74-reutilizacion-de-prisma-client","title":"7.4. Reutilizaci\u00f3n de Prisma Client","text":"<p>Usa el m\u00f3dulo <code>lib/prisma.js</code> para garantizar una sola instancia de Prisma Client.</p>"},{"location":"tutorials/p4/#8-migraciones-avanzadas","title":"8. Migraciones avanzadas","text":""},{"location":"tutorials/p4/#81-actualizar-el-esquema","title":"8.1. Actualizar el esquema","text":"<p>Si modificas <code>schema.prisma</code> (por ejemplo, a\u00f1ades un nuevo campo), crea una nueva migraci\u00f3n:</p> <pre><code>npx prisma migrate dev --name add-new-field\n</code></pre>"},{"location":"tutorials/p4/#82-resolucion-de-conflictos","title":"8.2. Resoluci\u00f3n de conflictos","text":"<p>Si una migraci\u00f3n falla, revisa los archivos en <code>prisma/migrations/</code> y usa:</p> <pre><code>npx prisma migrate resolve --rolled-back\n</code></pre> <p>Para marcar una migraci\u00f3n como revertida.</p>"},{"location":"tutorials/p4/#9-integracion-con-el-frontend","title":"9. Integraci\u00f3n con el frontend","text":"<p>Aunque este tutorial no cubre la configuraci\u00f3n de Next.js, aqu\u00ed hay un ejemplo de c\u00f3mo consumir una ruta API desde el frontend usando <code>fetch</code>:</p> <pre><code>async function fetchUsers() {\n  const response = await fetch('/api/users');\n  const users = await response.json();\n  return users;\n}\n</code></pre> <p>Usa este enfoque en componentes de Next.js para mostrar datos en la interfaz.</p>"},{"location":"tutorials/p4/#10-depuracion-y-herramientas","title":"10. Depuraci\u00f3n y herramientas","text":""},{"location":"tutorials/p4/#101-prisma-studio","title":"10.1. Prisma Studio","text":"<p>Explora y administra tu base de datos visualmente con Prisma Studio:</p> <pre><code>npx prisma studio\n</code></pre> <p>Esto abre una interfaz web en <code>http://localhost:5555</code>.</p>"},{"location":"tutorials/p4/#102-logging-de-consultas","title":"10.2. Logging de consultas","text":"<p>Habilita el registro de consultas en <code>schema.prisma</code>:</p> <pre><code>generator client {\n  provider = \"prisma-client-js\"\n  previewFeatures = [\"tracing\"]\n}\n</code></pre> <p>Luego, configura Prisma Client para mostrar consultas:</p> <pre><code>const prisma = new PrismaClient({\n  log: ['query', 'info', 'warn', 'error'],\n});\n</code></pre>"},{"location":"tutorials/p4/#herramientas","title":"Herramientas:","text":"<ul> <li>https://aiven.io/</li> <li>https://dbeaver.io/</li> </ul>"},{"location":"tutorials/course1/p1/","title":"Tutorial Completo de TypeScript","text":"<p>\u00a1Bienvenido al tutorial completo de TypeScript en espa\u00f1ol! Este tutorial est\u00e1 dise\u00f1ado para ayudarte a aprender TypeScript desde cero hasta un nivel avanzado, utilizando ejemplos pr\u00e1cticos y explicaciones claras. TypeScript es un superconjunto de JavaScript que a\u00f1ade tipado est\u00e1tico y caracter\u00edsticas avanzadas para desarrollar aplicaciones m\u00e1s robustas y mantenibles.</p>"},{"location":"tutorials/course1/p1/#que-es-typescript","title":"\u00bfQu\u00e9 es TypeScript?","text":"<p>TypeScript es un lenguaje de programaci\u00f3n desarrollado por Microsoft que extiende JavaScript a\u00f1adiendo tipos est\u00e1ticos opcionales. Esto permite detectar errores en el c\u00f3digo durante el desarrollo, mejorar la autocompletaci\u00f3n en editores de c\u00f3digo y facilitar el mantenimiento de proyectos grandes.</p>"},{"location":"tutorials/course1/p1/#beneficios-de-typescript","title":"Beneficios de TypeScript","text":"<ul> <li>Tipado est\u00e1tico: Detecta errores de tipo antes de ejecutar el c\u00f3digo.</li> <li>Mejor tooling: Autocompletado, refactorizaci\u00f3n y navegaci\u00f3n mejoradas en editores como VS Code.</li> <li>Escalabilidad: Ideal para proyectos grandes y equipos de desarrollo.</li> <li>Compatibilidad con JavaScript: Todo c\u00f3digo JavaScript es v\u00e1lido en TypeScript.</li> </ul>"},{"location":"tutorials/course1/p1/#estructura-del-tutorial","title":"Estructura del Tutorial","text":"<p>Este tutorial est\u00e1 organizado en secciones que cubren desde los fundamentos hasta temas avanzados. Puedes navegar por las secciones utilizando el men\u00fa lateral.</p>"},{"location":"tutorials/course1/p1/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Conocimientos b\u00e1sicos de JavaScript (variables, funciones, objetos, etc.).</li> <li>Un editor de c\u00f3digo como Visual Studio Code.</li> <li>Node.js instalado en tu m\u00e1quina.</li> </ul>"},{"location":"tutorials/course1/p10/","title":"TypeScript con Next.js (App Router)","text":"<p>Next.js es un framework de React que simplifica la creaci\u00f3n de aplicaciones web modernas con caracter\u00edsticas como renderizado del lado del servidor (SSR), generaci\u00f3n de sitios est\u00e1ticos (SSG) y soporte nativo para TypeScript. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo configurar y usar TypeScript con la \u00faltima versi\u00f3n de Next.js (App Router) para construir aplicaciones robustas.</p>"},{"location":"tutorials/course1/p10/#por-que-usar-typescript-con-nextjs","title":"\u00bfPor qu\u00e9 usar TypeScript con Next.js?","text":"<ul> <li>Tipado seguro: Detecta errores en tiempo de desarrollo.</li> <li>Mejor DX: Autocompletado y documentaci\u00f3n en componentes y APIs.</li> <li>Escalabilidad: Ideal para proyectos grandes con equipos m\u00faltiples.</li> <li>Soporte nativo: Next.js incluye soporte integrado para TypeScript.</li> </ul>"},{"location":"tutorials/course1/p10/#configuracion-de-un-proyecto-nextjs-con-typescript","title":"Configuraci\u00f3n de un Proyecto Next.js con TypeScript","text":"<p>Sigue estos pasos para crear un proyecto Next.js con TypeScript usando el App Router.</p>"},{"location":"tutorials/course1/p10/#1-crear-un-proyecto-nextjs","title":"1. Crear un Proyecto Next.js","text":"<p>Ejecuta el siguiente comando para crear un proyecto con TypeScript:</p> <pre><code>npx create-next-app@latest mi-app-next --typescript --eslint --app --src-dir --tailwind --import-alias \"@/*\"\n</code></pre> <p>Selecciona las siguientes opciones cuando se te solicite: - Would you like to use TypeScript? S\u00ed - Would you like to use ESLint? S\u00ed - Would you like to use Tailwind CSS? S\u00ed (opcional, pero recomendado) - Would you like to use <code>src/</code> directory? S\u00ed - Would you like to use App Router? S\u00ed - Would you like to customize the default import alias? Usa <code>@/*</code></p> <p>Esto genera un proyecto con una estructura optimizada y TypeScript preconfigurado.</p>"},{"location":"tutorials/course1/p10/#2-estructura-del-proyecto","title":"2. Estructura del Proyecto","text":"<p>La estructura generada incluye:</p> <pre><code>mi-app-next/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 app/\n\u2502   \u2502   \u251c\u2500\u2500 page.tsx\n\u2502   \u2502   \u251c\u2500\u2500 layout.tsx\n\u2502   \u2502   \u251c\u2500\u2500 globals.css\n\u2502   \u251c\u2500\u2500 components/\n\u251c\u2500\u2500 public/\n\u251c\u2500\u2500 next.config.mjs\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 package.json\n</code></pre> <p>El archivo <code>tsconfig.json</code> ya est\u00e1 configurado con opciones recomendadas para Next.js, como:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"node\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"src/*\"]\n    }\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p10/#3-crear-una-pagina-con-typescript","title":"3. Crear una P\u00e1gina con TypeScript","text":"<p>El App Router usa componentes de servidor por defecto. Edita <code>src/app/page.tsx</code>:</p> <pre><code>import { NextPage } from \"next\";\n\ninterface Props {\n  searchParams: { [key: string]: string | string[] | undefined };\n}\n\nconst Home: NextPage&lt;Props&gt; = ({ searchParams }) =&gt; {\n  const mensaje = (searchParams.mensaje as string) || \"\u00a1Bienvenido a Next.js con TypeScript!\";\n\n  return (\n    &lt;main className=\"flex min-h-screen flex-col items-center justify-center p-24\"&gt;\n      &lt;h1 className=\"text-4xl font-bold\"&gt;{mensaje}&lt;/h1&gt;\n    &lt;/main&gt;\n  );\n};\n\nexport default Home;\n</code></pre> <ul> <li>Tipado: Usamos <code>NextPage</code> para tipar el componente y <code>searchParams</code> para manejar par\u00e1metros de b\u00fasqueda.</li> <li>Tailwind CSS: Las clases de Tailwind est\u00e1n aplicadas para estilos r\u00e1pidos.</li> </ul>"},{"location":"tutorials/course1/p10/#4-componentes-de-servidor-y-cliente","title":"4. Componentes de Servidor y Cliente","text":""},{"location":"tutorials/course1/p10/#componente-de-servidor","title":"Componente de Servidor","text":"<p>Los componentes en el App Router son de servidor por defecto, lo que significa que se ejecutan en el servidor. Ejemplo en <code>src/app/about/page.tsx</code>:</p> <pre><code>export default async function AboutPage() {\n  // Simula una llamada a una API\n  const datos = await fetch(\"https://jsonplaceholder.typicode.com/posts/1\").then((res) =&gt; res.json());\n\n  return (\n    &lt;div className=\"p-8\"&gt;\n      &lt;h1 className=\"text-3xl font-bold\"&gt;Acerca de&lt;/h1&gt;\n      &lt;p&gt;T\u00edtulo: {datos.title}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre>"},{"location":"tutorials/course1/p10/#componente-de-cliente","title":"Componente de Cliente","text":"<p>Para componentes interactivos, usa la directiva <code>\"use client\"</code>. Crea <code>src/components/Counter.tsx</code>:</p> <pre><code>\"use client\";\n\nimport { useState } from \"react\";\n\ninterface CounterProps {\n  initialCount?: number;\n}\n\nconst Counter: React.FC&lt;CounterProps&gt; = ({ initialCount = 0 }) =&gt; {\n  const [count, setCount] = useState(initialCount);\n\n  return (\n    &lt;div className=\"p-4\"&gt;\n      &lt;p&gt;Contador: {count}&lt;/p&gt;\n      &lt;button\n        className=\"bg-blue-500 text-white px-4 py-2 rounded\"\n        onClick={() =&gt; setCount(count + 1)}\n      &gt;\n        Incrementar\n      &lt;/button&gt;\n    &lt;/div&gt;\n  );\n};\n\nexport default Counter;\n</code></pre> <p>\u00dasalo en <code>src/app/page.tsx</code>:</p> <pre><code>import Counter from \"@/components/Counter\";\n\ninterface Props {\n  searchParams: { [key: string]: string | string[] | undefined };\n}\n\nconst Home: NextPage&lt;Props&gt; = ({ searchParams }) =&gt; {\n  const mensaje = (searchParams.mensaje as string) || \"\u00a1Bienvenido a Next.js con TypeScript!\";\n\n  return (\n    &lt;main className=\"flex min-h-screen flex-col items-center justify-center p-24\"&gt;\n      &lt;h1 className=\"text-4xl font-bold\"&gt;{mensaje}&lt;/h1&gt;\n      &lt;Counter initialCount={5} /&gt;\n    &lt;/main&gt;\n  );\n};\n\nexport default Home;\n</code></pre>"},{"location":"tutorials/course1/p10/#5-api-routes-con-typescript","title":"5. API Routes con TypeScript","text":"<p>Crea una ruta API en <code>src/app/api/hello/route.ts</code>:</p> <pre><code>import { NextResponse } from \"next/server\";\n\nexport async function GET(request: Request) {\n  return NextResponse.json({ mensaje: \"\u00a1Hola desde la API con TypeScript!\" });\n}\n</code></pre> <ul> <li>Tipado: <code>NextResponse</code> y <code>Request</code> est\u00e1n tipados para garantizar seguridad.</li> <li>Accede a esta ruta en <code>http://localhost:3000/api/hello</code>.</li> </ul>"},{"location":"tutorials/course1/p10/#6-tipado-de-datos-de-api","title":"6. Tipado de Datos de API","text":"<p>Para tipar datos de una API, define una interfaz. Ejemplo en <code>src/app/api/posts/route.ts</code>:</p> <pre><code>import { NextResponse } from \"next/server\";\n\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\nexport async function GET() {\n  const res = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\n  const posts: Post[] = await res.json();\n\n  return NextResponse.json(posts);\n}\n</code></pre>"},{"location":"tutorials/course1/p10/#7-ejecutar-el-proyecto","title":"7. Ejecutar el Proyecto","text":"<pre><code>cd mi-app-next\nnpm run dev\n</code></pre> <p>Abre <code>http://localhost:3000</code> para ver la aplicaci\u00f3n.</p>"},{"location":"tutorials/course1/p10/#8-buenas-practicas-con-nextjs-y-typescript","title":"8. Buenas Pr\u00e1cticas con Next.js y TypeScript","text":"<ul> <li>Usa <code>NextPage</code> para tipar p\u00e1ginas: Mejora la claridad y el soporte del editor.</li> <li>Define interfaces para props: Por ejemplo, <code>CounterProps</code> en el componente <code>Counter</code>.</li> <li>Aprovecha el alias <code>@/*</code>: Simplifica las importaciones (por ejemplo, <code>import Counter from \"@/components/Counter\"</code>).</li> <li>Habilita <code>strict</code> en <code>tsconfig.json</code>: Detecta errores comunes como <code>null</code> o <code>undefined</code>.</li> <li>Usa componentes de servidor cuando sea posible: Reducen el JavaScript enviado al cliente.</li> <li>Tipa las respuestas de API: Usa interfaces para datos de API como <code>Post</code>.</li> </ul>"},{"location":"tutorials/course1/p10/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea una p\u00e1gina din\u00e1mica en <code>src/app/posts/[id]/page.tsx</code>:</p> <pre><code>import { notFound } from \"next/navigation\";\n\ninterface Post {\n  id: number;\n  title: string;\n  body: string;\n}\n\ninterface Props {\n  params: { id: string };\n}\n\nexport default async function PostPage({ params }: Props) {\n  const res = await fetch(`https://jsonplaceholder.typicode.com/posts/${params.id}`);\n  if (!res.ok) notFound();\n\n  const post: Post = await res.json();\n\n  return (\n    &lt;div className=\"p-8\"&gt;\n      &lt;h1 className=\"text-3xl font-bold\"&gt;{post.title}&lt;/h1&gt;\n      &lt;p&gt;{post.body}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>Visita <code>http://localhost:3000/posts/1</code> para ver el post con ID 1.</p>"},{"location":"tutorials/course1/p11/","title":"Archivos de Tipos y Tipos Globales en TypeScript","text":"<p>En TypeScript, los archivos de tipos (<code>.d.ts</code>) y los tipos globales son herramientas esenciales para definir tipos reutilizables, proporcionar tipado a bibliotecas externas y declarar variables o funciones accesibles globalmente. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo crear y usar archivos de tipos y tipos globales en tus proyectos.</p>"},{"location":"tutorials/course1/p11/#que-son-los-archivos-de-tipos","title":"\u00bfQu\u00e9 son los Archivos de Tipos?","text":"<p>Los archivos de tipos, con extensi\u00f3n <code>.d.ts</code>, son archivos que contienen \u00fanicamente declaraciones de tipos, interfaces, m\u00f3dulos y otros elementos de TypeScript, sin c\u00f3digo ejecutable. Se utilizan para:</p> <ul> <li>Definir tipos para bibliotecas JavaScript sin tipado.</li> <li>Compartir tipos entre m\u00faltiples archivos en un proyecto.</li> <li>Mejorar la organizaci\u00f3n y reutilizaci\u00f3n de tipos complejos.</li> </ul>"},{"location":"tutorials/course1/p11/#crear-un-archivo-de-tipos","title":"Crear un Archivo de Tipos","text":""},{"location":"tutorials/course1/p11/#ejemplo-definir-tipos-para-una-biblioteca-externa","title":"Ejemplo: Definir Tipos para una Biblioteca Externa","text":"<p>Supongamos que usas una biblioteca JavaScript sin tipado, como <code>mi-biblioteca</code>. Puedes crear un archivo de tipos para proporcionarle soporte de TypeScript.</p> <ol> <li>Crea un archivo <code>mi-biblioteca.d.ts</code> en <code>src/types/</code>:</li> </ol> <pre><code>declare module \"mi-biblioteca\" {\n  export function saludar(nombre: string): string;\n  export const VERSION: string;\n}\n</code></pre> <ul> <li><code>declare module</code> define un m\u00f3dulo externo.</li> <li> <p>Exportamos una funci\u00f3n <code>saludar</code> y una constante <code>VERSION</code>.</p> </li> <li> <p>Usa la biblioteca en tu c\u00f3digo:</p> </li> </ul> <pre><code>// src/index.ts\nimport { saludar, VERSION } from \"mi-biblioteca\";\n\nconsole.log(saludar(\"Ana\")); // Hola, Ana\nconsole.log(VERSION); // 1.0.0\n</code></pre> <p>TypeScript ahora reconoce los tipos de <code>mi-biblioteca</code> sin errores.</p>"},{"location":"tutorials/course1/p11/#ejemplo-tipos-reutilizables","title":"Ejemplo: Tipos Reutilizables","text":"<p>Crea un archivo de tipos para estructuras compartidas en tu proyecto.</p> <ol> <li>Crea <code>src/types/models.d.ts</code>:</li> </ol> <pre><code>export interface Usuario {\n  id: number;\n  nombre: string;\n  email: string;\n}\n\nexport interface Producto {\n  id: number;\n  nombre: string;\n  precio: number;\n}\n</code></pre> <ol> <li>Importa los tipos en otros archivos:</li> </ol> <pre><code>// src/index.ts\nimport { Usuario, Producto } from \"./types/models\";\n\nconst usuario: Usuario = {\n  id: 1,\n  nombre: \"Juan\",\n  email: \"juan@example.com\",\n};\n\nconst producto: Producto = {\n  id: 1,\n  nombre: \"Laptop\",\n  precio: 1000,\n};\n\nconsole.log(usuario, producto);\n</code></pre> <ol> <li>Configura <code>tsconfig.json</code> para incluir los archivos de tipos:</li> </ol> <pre><code>{\n  \"compilerOptions\": {\n    \"typeRoots\": [\"./src/types\", \"./node_modules/@types\"],\n    \"strict\": true\n  }\n}\n</code></pre> <p>Esto asegura que TypeScript busque archivos <code>.d.ts</code> en <code>src/types</code>.</p>"},{"location":"tutorials/course1/p11/#tipos-globales","title":"Tipos Globales","text":"<p>Los tipos globales permiten declarar variables, funciones o interfaces que est\u00e1n disponibles en todo el proyecto sin necesidad de importarlas. Son \u00fatiles para:</p> <ul> <li>Definir variables globales como <code>window.miVariable</code>.</li> <li>Extender interfaces globales como <code>Window</code> o <code>globalThis</code>.</li> <li>Proporcionar tipos para entornos espec\u00edficos (por ejemplo, Node.js o navegadores).</li> </ul>"},{"location":"tutorials/course1/p11/#ejemplo-declarar-una-variable-global","title":"Ejemplo: Declarar una Variable Global","text":"<p>Supongamos que tienes una variable global <code>CONFIG</code> inyectada en el navegador.</p> <ol> <li>Crea <code>src/types/globals.d.ts</code>:</li> </ol> <pre><code>interface Config {\n  apiUrl: string;\n  debug: boolean;\n}\n\ndeclare global {\n  var CONFIG: Config;\n}\n</code></pre> <ul> <li><code>declare global</code> extiende el \u00e1mbito global.</li> <li> <p>Declaramos <code>CONFIG</code> como una variable global con tipo <code>Config</code>.</p> </li> <li> <p>Usa la variable global:</p> </li> </ul> <pre><code>// src/index.ts\nconsole.log(CONFIG.apiUrl); // https://api.example.com\nconsole.log(CONFIG.debug); // true\n</code></pre> <p>No necesitas importar nada; TypeScript reconoce <code>CONFIG</code> globalmente.</p>"},{"location":"tutorials/course1/p11/#ejemplo-extender-la-interfaz-window","title":"Ejemplo: Extender la Interfaz <code>Window</code>","text":"<p>Para a\u00f1adir propiedades personalizadas a <code>window</code>, usa <code>declare global</code>.</p> <ol> <li>Edita <code>src/types/globals.d.ts</code>:</li> </ol> <pre><code>declare global {\n  interface Window {\n    miFuncionPersonalizada: (mensaje: string) =&gt; void;\n  }\n}\n</code></pre> <ol> <li>Usa la propiedad en tu c\u00f3digo:</li> </ol> <pre><code>// src/index.ts\nwindow.miFuncionPersonalizada(\"Hola\"); // V\u00e1lido\n</code></pre>"},{"location":"tutorials/course1/p11/#ejemplo-tipos-globales-en-nodejs","title":"Ejemplo: Tipos Globales en Node.js","text":"<p>Para declarar una variable global en un entorno Node.js, como <code>process.env.MI_VARIABLE</code>:</p> <ol> <li>Crea <code>src/types/env.d.ts</code>:</li> </ol> <pre><code>declare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      MI_VARIABLE: string;\n    }\n  }\n}\n</code></pre> <ol> <li>Usa la variable:</li> </ol> <pre><code>// src/index.ts\nconsole.log(process.env.MI_VARIABLE); // Valor de la variable de entorno\n</code></pre>"},{"location":"tutorials/course1/p11/#usar-tipos-de-bibliotecas-existentes-types","title":"Usar Tipos de Bibliotecas Existentes (@types)","text":"<p>Muchas bibliotecas JavaScript tienen tipados oficiales en el paquete <code>@types</code>. Por ejemplo, para <code>lodash</code>:</p> <ol> <li>Instala los tipos:</li> </ol> <pre><code>npm install --save-dev @types/lodash\n</code></pre> <ol> <li>Usa la biblioteca con tipado:</li> </ol> <pre><code>// src/index.ts\nimport _ from \"lodash\";\n\nconst numeros = [1, 2, 3, 4];\nconsole.log(_.chunk(numeros, 2)); // [[1, 2], [3, 4]]\n</code></pre> <p>TypeScript usa autom\u00e1ticamente los tipos de <code>@types/lodash</code>.</p>"},{"location":"tutorials/course1/p11/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li>Organiza tus tipos: Usa una carpeta <code>src/types/</code> para archivos <code>.d.ts</code>.</li> <li>Evita <code>any</code> en archivos de tipos: S\u00e9 espec\u00edfico para maximizar la seguridad.</li> <li>Usa <code>export</code> en <code>.d.ts</code> para reutilizaci\u00f3n: Permite importar tipos en otros archivos.</li> <li>Minimiza los tipos globales: Prefiere m\u00f3dulos para evitar colisiones.</li> <li>Documenta tus tipos: Usa comentarios JSDoc para claridad.</li> </ul> <pre><code>/**\n * Representa un usuario del sistema.\n */\nexport interface Usuario {\n  id: number;\n  nombre: string;\n  email: string;\n}\n</code></pre> <ul> <li>Mant\u00e9n <code>typeRoots</code> actualizado: Aseg\u00farate de que TypeScript encuentre tus archivos de tipos.</li> </ul>"},{"location":"tutorials/course1/p11/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un proyecto con tipos globales y archivos de tipos:</p> <ol> <li>Configura la estructura:</li> </ol> <pre><code>proyecto/\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 types/\n\u2502   \u2502   \u251c\u2500\u2500 models.d.ts\n\u2502   \u2502   \u251c\u2500\u2500 globals.d.ts\n\u2502   \u251c\u2500\u2500 index.ts\n\u251c\u2500\u2500 tsconfig.json\n\u251c\u2500\u2500 package.json\n</code></pre> <ol> <li>Crea <code>src/types/models.d.ts</code>:</li> </ol> <pre><code>/**\n * Tipos para entidades del proyecto.\n */\nexport interface Proyecto {\n  id: number;\n  nombre: string;\n  activo: boolean;\n}\n</code></pre> <ol> <li>Crea <code>src/types/globals.d.ts</code>:</li> </ol> <pre><code>declare global {\n  var APP_VERSION: string;\n}\n</code></pre> <ol> <li>Escribe <code>src/index.ts</code>:</li> </ol> <pre><code>import { Proyecto } from \"./types/models\";\n\nconst proyecto: Proyecto = {\n  id: 1,\n  nombre: \"Sistema de Gesti\u00f3n\",\n  activo: true,\n};\n\nconsole.log(proyecto);\nconsole.log(APP_VERSION); // Por ejemplo, \"1.0.0\"\n</code></pre> <ol> <li>Actualiza <code>tsconfig.json</code>:</li> </ol> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"es2020\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"typeRoots\": [\"./src/types\", \"./node_modules/@types\"]\n  }\n}\n</code></pre> <ol> <li>Compila y ejecuta:</li> </ol> <pre><code>npx tsc\nnode dist/index.js\n</code></pre>"},{"location":"tutorials/course1/p12/","title":"Comandos de TypeScript","text":"<p>TypeScript proporciona una variedad de comandos y opciones a trav\u00e9s de su compilador (<code>tsc</code>) y herramientas relacionadas para facilitar el desarrollo, la compilaci\u00f3n y la depuraci\u00f3n de proyectos. En esta secci\u00f3n, aprender\u00e1s los comandos m\u00e1s importantes de TypeScript, c\u00f3mo usarlos y c\u00f3mo optimizar tu flujo de trabajo.</p>"},{"location":"tutorials/course1/p12/#introduccion-al-compilador-de-typescript-tsc","title":"Introducci\u00f3n al Compilador de TypeScript (<code>tsc</code>)","text":"<p>El compilador de TypeScript, <code>tsc</code>, transforma archivos TypeScript (<code>.ts</code> o <code>.tsx</code>) en JavaScript (<code>.js</code>) compatible con navegadores o entornos como Node.js. Se instala con TypeScript mediante npm:</p> <pre><code>npm install -g typescript\n</code></pre> <p>Verifica la instalaci\u00f3n:</p> <pre><code>tsc --version\n</code></pre> <p>Esto muestra la versi\u00f3n instalada, por ejemplo, <code>Version 5.x.x</code>.</p>"},{"location":"tutorials/course1/p12/#comandos-basicos-de-tsc","title":"Comandos B\u00e1sicos de <code>tsc</code>","text":""},{"location":"tutorials/course1/p12/#1-compilar-un-archivo-especifico","title":"1. Compilar un Archivo Espec\u00edfico","text":"<p>Compila un archivo <code>.ts</code> en JavaScript:</p> <pre><code>tsc src/index.ts\n</code></pre> <p>Esto genera <code>src/index.js</code> (o en la carpeta especificada en <code>tsconfig.json</code>).</p>"},{"location":"tutorials/course1/p12/#2-compilar-todos-los-archivos-del-proyecto","title":"2. Compilar Todos los Archivos del Proyecto","text":"<p>Si tienes un archivo <code>tsconfig.json</code>, compila todos los archivos TypeScript del proyecto:</p> <pre><code>tsc\n</code></pre>"},{"location":"tutorials/course1/p12/#3-compilar-en-modo-de-observacion-watch","title":"3. Compilar en Modo de Observaci\u00f3n (<code>--watch</code>)","text":"<p>Recompila autom\u00e1ticamente al detectar cambios:</p> <pre><code>tsc --watch\n</code></pre> <p>\u00datil durante el desarrollo para evitar ejecutar <code>tsc</code> manualmente.</p>"},{"location":"tutorials/course1/p12/#4-especificar-un-archivo-de-configuracion","title":"4. Especificar un Archivo de Configuraci\u00f3n","text":"<p>Usa un archivo <code>tsconfig.json</code> personalizado:</p> <pre><code>tsc --project ./ruta/a/tsconfig.json\n</code></pre> <p>Abreviado como:</p> <pre><code>tsc -p ./ruta/a/tsconfig.json\n</code></pre>"},{"location":"tutorials/course1/p12/#5-generar-un-archivo-tsconfigjson","title":"5. Generar un Archivo <code>tsconfig.json</code>","text":"<p>Crea un archivo de configuraci\u00f3n predeterminado:</p> <pre><code>tsc --init\n</code></pre> <p>Esto genera <code>tsconfig.json</code> con opciones comentadas para personalizar.</p>"},{"location":"tutorials/course1/p12/#opciones-comunes-de-tsc","title":"Opciones Comunes de <code>tsc</code>","text":"<p>Las opciones se pueden pasar como argumentos en la l\u00ednea de comandos o configurar en <code>tsconfig.json</code>. Aqu\u00ed est\u00e1n las m\u00e1s usadas:</p>"},{"location":"tutorials/course1/p12/#1-target","title":"1. <code>--target</code>","text":"<p>Especifica la versi\u00f3n de JavaScript de salida (por ejemplo, <code>ES5</code>, <code>ES2020</code>):</p> <pre><code>tsc --target ES2020 src/index.ts\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\"\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#2-module","title":"2. <code>--module</code>","text":"<p>Define el sistema de m\u00f3dulos (<code>commonjs</code>, <code>esnext</code>, etc.):</p> <pre><code>tsc --module commonjs src/index.ts\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"module\": \"commonjs\"\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#3-outdir","title":"3. <code>--outDir</code>","text":"<p>Especifica la carpeta de salida para los archivos compilados:</p> <pre><code>tsc --outDir dist\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"outDir\": \"./dist\"\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#4-rootdir","title":"4. <code>--rootDir</code>","text":"<p>Define la carpeta ra\u00edz de los archivos fuente:</p> <pre><code>tsc --rootDir src\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"rootDir\": \"./src\"\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#5-strict","title":"5. <code>--strict</code>","text":"<p>Habilita todas las verificaciones estrictas de tipos:</p> <pre><code>tsc --strict\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#6-noemit","title":"6. <code>--noEmit</code>","text":"<p>Analiza el c\u00f3digo sin generar archivos de salida, \u00fatil para verificar errores:</p> <pre><code>tsc --noEmit\n</code></pre>"},{"location":"tutorials/course1/p12/#7-declaration","title":"7. <code>--declaration</code>","text":"<p>Genera archivos de declaraci\u00f3n de tipos (<code>.d.ts</code>):</p> <pre><code>tsc --declaration\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"declaration\": true\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#8-sourcemap","title":"8. <code>--sourceMap</code>","text":"<p>Genera mapas de origen (<code>.js.map</code>) para depuraci\u00f3n:</p> <pre><code>tsc --sourceMap\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"sourceMap\": true\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p12/#comandos-avanzados","title":"Comandos Avanzados","text":""},{"location":"tutorials/course1/p12/#1-compilar-con-diagnosticos-detallados","title":"1. Compilar con Diagn\u00f3sticos Detallados","text":"<p>Muestra estad\u00edsticas de compilaci\u00f3n:</p> <pre><code>tsc --diagnostics\n</code></pre> <p>Ejemplo de salida:</p> <pre><code>Files:         10\nLines:       1000\nNodes:       5000\nIdentifiers:  200\n...\n</code></pre>"},{"location":"tutorials/course1/p12/#2-limpiar-la-carpeta-de-salida","title":"2. Limpiar la Carpeta de Salida","text":"<p>No hay un comando nativo para limpiar, pero puedes combinar con <code>rm</code>:</p> <pre><code>rm -rf dist &amp;&amp; tsc\n</code></pre> <p>O usa un script en <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"build\": \"rm -rf dist &amp;&amp; tsc\"\n  }\n}\n</code></pre> <p>Ejecuta con:</p> <pre><code>npm run build\n</code></pre>"},{"location":"tutorials/course1/p12/#3-compilar-solo-archivos-modificados","title":"3. Compilar Solo Archivos Modificados","text":"<p>Habilita compilaci\u00f3n incremental:</p> <pre><code>tsc --incremental\n</code></pre> <p>En <code>tsconfig.json</code>:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"incremental\": true\n  }\n}\n</code></pre> <p>Esto genera un archivo <code>.tsbuildinfo</code> para rastrear cambios.</p>"},{"location":"tutorials/course1/p12/#4-verificar-tipos-sin-compilar","title":"4. Verificar Tipos sin Compilar","text":"<p>Usa <code>tsc</code> con <code>--noEmit</code> para verificar tipos sin generar JavaScript:</p> <pre><code>tsc --noEmit src/index.ts\n</code></pre>"},{"location":"tutorials/course1/p12/#herramientas-relacionadas","title":"Herramientas Relacionadas","text":""},{"location":"tutorials/course1/p12/#1-ts-node","title":"1. <code>ts-node</code>","text":"<p>Ejecuta archivos TypeScript directamente sin compilarlos:</p> <pre><code>npm install --save-dev ts-node\n</code></pre> <p>Ejemplo:</p> <pre><code>ts-node src/index.ts\n</code></pre> <p>Con modo de observaci\u00f3n:</p> <pre><code>ts-node --watch src/index.ts\n</code></pre>"},{"location":"tutorials/course1/p12/#2-nodemon-con-typescript","title":"2. <code>nodemon</code> con TypeScript","text":"<p>Reinicia autom\u00e1ticamente al guardar cambios:</p> <pre><code>npm install --save-dev nodemon\n</code></pre> <p>Configura un script en <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"dev\": \"nodemon src/index.ts\"\n  }\n}\n</code></pre> <p>Ejecuta con:</p> <pre><code>npm run dev\n</code></pre> <p>Aseg\u00farate de tener <code>ts-node</code> instalado para que <code>nodemon</code> procese archivos <code>.ts</code>.</p>"},{"location":"tutorials/course1/p12/#3-tsc-con-eslint","title":"3. <code>tsc</code> con ESLint","text":"<p>Integra ESLint para linting de TypeScript:</p> <pre><code>npm install --save-dev eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin\n</code></pre> <p>Crea <code>.eslintrc.json</code>:</p> <pre><code>{\n  \"parser\": \"@typescript-eslint/parser\",\n  \"plugins\": [\"@typescript-eslint\"],\n  \"extends\": [\"plugin:@typescript-eslint/recommended\"],\n  \"rules\": {}\n}\n</code></pre> <p>Lintea tu c\u00f3digo:</p> <pre><code>npx eslint src/**/*.ts\n</code></pre>"},{"location":"tutorials/course1/p12/#4-tsc-en-proyectos-con-jest","title":"4. <code>tsc</code> en Proyectos con Jest","text":"<p>Configura Jest para pruebas en TypeScript:</p> <pre><code>npm install --save-dev jest ts-jest @types/jest\n</code></pre> <p>Crea <code>jest.config.js</code>:</p> <pre><code>module.exports = {\n  preset: \"ts-jest\",\n  testEnvironment: \"node\",\n};\n</code></pre> <p>Ejecuta pruebas:</p> <pre><code>npx jest\n</code></pre>"},{"location":"tutorials/course1/p12/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<ol> <li>Crea un proyecto:</li> </ol> <pre><code>mkdir proyecto-typescript\ncd proyecto-typescript\nnpm init -y\nnpm install --save-dev typescript ts-node nodemon\ntsc --init\n</code></pre> <ol> <li>Configura <code>tsconfig.json</code>:</li> </ol> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"sourceMap\": true,\n    \"declaration\": true,\n    \"incremental\": true\n  }\n}\n</code></pre> <ol> <li>Crea <code>src/index.ts</code>:</li> </ol> <pre><code>const saludar = (nombre: string): string =&gt; `Hola, ${nombre}!`;\nconsole.log(saludar(\"TypeScript\"));\n</code></pre> <ol> <li>Configura scripts en <code>package.json</code>:</li> </ol> <pre><code>{\n  \"scripts\": {\n    \"build\": \"tsc\",\n    \"watch\": \"tsc --watch\",\n    \"start\": \"node dist/index.js\",\n    \"dev\": \"nodemon src/index.ts\",\n    \"typecheck\": \"tsc --noEmit\"\n  }\n}\n</code></pre> <ol> <li> <p>Prueba los comandos:</p> </li> <li> <p>Compila: <code>npm run build</code></p> </li> <li>Ejecuta: <code>npm run start</code></li> <li>Desarrollo: <code>npm run dev</code></li> <li>Verifica tipos: <code>npm run typecheck</code></li> </ol>"},{"location":"tutorials/course1/p12/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li>Usa <code>tsconfig.json</code>: Centraliza la configuraci\u00f3n en lugar de pasar opciones en la CLI.</li> <li>Habilita <code>--strict</code>: Mejora la seguridad de tipos.</li> <li>Usa <code>--watch</code> en desarrollo: Optimiza el flujo de trabajo.</li> <li>Combina con herramientas: Usa <code>ts-node</code>, <code>nodemon</code> o <code>Jest</code> para mayor productividad.</li> <li>Automatiza con scripts: Define scripts en <code>package.json</code> para comandos frecuentes.</li> </ul>"},{"location":"tutorials/course1/p2/","title":"Instalaci\u00f3n y Configuraci\u00f3n de TypeScript","text":"<p>En esta secci\u00f3n, aprender\u00e1s c\u00f3mo instalar TypeScript, configurar un proyecto y compilar tu primer archivo TypeScript.</p>"},{"location":"tutorials/course1/p2/#instalacion-de-typescript","title":"Instalaci\u00f3n de TypeScript","text":"<p>TypeScript se instala a trav\u00e9s de npm (Node Package Manager). Sigue estos pasos:</p> <ol> <li> <p>Aseg\u00farate de tener Node.js instalado:    Verifica la instalaci\u00f3n ejecutando en la terminal:    <pre><code>node -v\nnpm -v\n</code></pre>    Si no tienes Node.js, desc\u00e1rgalo desde nodejs.org.</p> </li> <li> <p>Instala TypeScript globalmente:    <pre><code>npm install -g typescript\n</code></pre></p> </li> <li> <p>Verifica la instalaci\u00f3n:    <pre><code>tsc -v\n</code></pre>    Deber\u00edas ver la versi\u00f3n de TypeScript instalada (por ejemplo, <code>Version 5.x.x</code>).</p> </li> </ol>"},{"location":"tutorials/course1/p2/#crear-un-proyecto-typescript","title":"Crear un Proyecto TypeScript","text":"<ol> <li> <p>Crea un directorio para tu proyecto:    <pre><code>mkdir mi-proyecto-typescript\ncd mi-proyecto-typescript\n</code></pre></p> </li> <li> <p>Inicializa un proyecto Node.js:    <pre><code>npm init -y\n</code></pre></p> </li> <li> <p>Instala TypeScript localmente (opcional, pero recomendado para proyectos):    <pre><code>npm install --save-dev typescript\n</code></pre></p> </li> <li> <p>Genera un archivo de configuraci\u00f3n <code>tsconfig.json</code>:    <pre><code>npx tsc --init\n</code></pre></p> </li> </ol> <p>Esto crea un archivo <code>tsconfig.json</code> con opciones predeterminadas. Algunas opciones comunes para modificar son:</p> <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\", // Versi\u00f3n de JavaScript de salida\n    \"module\": \"commonjs\", // Sistema de m\u00f3dulos\n    \"outDir\": \"./dist\", // Carpeta de salida para archivos compilados\n    \"rootDir\": \"./src\", // Carpeta de entrada para archivos TypeScript\n    \"strict\": true // Activa verificaciones estrictas de tipos\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p2/#tu-primer-archivo-typescript","title":"Tu Primer Archivo TypeScript","text":"<ol> <li> <p>Crea una carpeta <code>src</code> y un archivo <code>index.ts</code>:    <pre><code>mkdir src\ntouch src/index.ts\n</code></pre></p> </li> <li> <p>Escribe un c\u00f3digo simple en <code>index.ts</code>:    <pre><code>let mensaje: string = \"\u00a1Hola, TypeScript!\";\nconsole.log(mensaje);\n</code></pre></p> </li> <li> <p>Compila el archivo:    <pre><code>npx tsc\n</code></pre></p> </li> </ol> <p>Esto generar\u00e1 un archivo <code>dist/index.js</code> con el c\u00f3digo JavaScript equivalente.</p> <ol> <li>Ejecuta el c\u00f3digo compilado:    <pre><code>node dist/index.js\n</code></pre></li> </ol> <p>Ver\u00e1s en la consola: <code>\u00a1Hola, TypeScript!</code>.</p>"},{"location":"tutorials/course1/p2/#configuracion-de-desarrollo","title":"Configuraci\u00f3n de Desarrollo","text":"<p>Para facilitar el desarrollo, puedes usar <code>ts-node</code> para ejecutar archivos TypeScript directamente sin compilarlos manualmente:</p> <ol> <li> <p>Instala <code>ts-node</code>:    <pre><code>npm install --save-dev ts-node\n</code></pre></p> </li> <li> <p>Ejecuta tu archivo:    <pre><code>npx ts-node src/index.ts\n</code></pre></p> </li> </ol> <p>Adem\u00e1s, puedes usar <code>nodemon</code> para reiniciar autom\u00e1ticamente al guardar cambios:</p> <pre><code>npm install --save-dev nodemon\n</code></pre> <p>Agrega un script en <code>package.json</code>: <pre><code>\"scripts\": {\n  \"dev\": \"nodemon src/index.ts\"\n}\n</code></pre></p> <p>Ejecuta con: <pre><code>npm run dev\n</code></pre></p>"},{"location":"tutorials/course1/p3/","title":"Tipos B\u00e1sicos en TypeScript","text":"<p>TypeScript introduce tipado est\u00e1tico, lo que significa que las variables, par\u00e1metros y propiedades tienen tipos definidos. En esta secci\u00f3n, exploraremos los tipos b\u00e1sicos de TypeScript.</p>"},{"location":"tutorials/course1/p3/#tipos-primitivos","title":"Tipos Primitivos","text":""},{"location":"tutorials/course1/p3/#string","title":"<code>string</code>","text":"<p>Representa cadenas de texto.</p> <pre><code>let nombre: string = \"Ana\";\nnombre = \"Juan\"; // V\u00e1lido\n// nombre = 123; // Error: Type 'number' is not assignable to type 'string'\n</code></pre>"},{"location":"tutorials/course1/p3/#number","title":"<code>number</code>","text":"<p>Representa n\u00fameros, ya sean enteros o de punto flotante.</p> <pre><code>let edad: number = 30;\nedad = 25.5; // V\u00e1lido\n// edad = \"veinte\"; // Error\n</code></pre>"},{"location":"tutorials/course1/p3/#boolean","title":"<code>boolean</code>","text":"<p>Representa valores verdadero o falso.</p> <pre><code>let esActivo: boolean = true;\nesActivo = false; // V\u00e1lido\n// esActivo = 1; // Error\n</code></pre>"},{"location":"tutorials/course1/p3/#tipos-especiales","title":"Tipos Especiales","text":""},{"location":"tutorials/course1/p3/#any","title":"<code>any</code>","text":"<p>Desactiva la verificaci\u00f3n de tipos, \u00fatil para migraciones o c\u00f3digo din\u00e1mico (\u00fasalo con precauci\u00f3n).</p> <pre><code>let variable: any = \"texto\";\nvariable = 123; // V\u00e1lido\nvariable = true; // V\u00e1lido\n</code></pre>"},{"location":"tutorials/course1/p3/#unknown","title":"<code>unknown</code>","text":"<p>Similar a <code>any</code>, pero m\u00e1s seguro porque requiere verificaci\u00f3n de tipo antes de usarlo.</p> <pre><code>let valor: unknown = \"texto\";\n// console.log(valor.length); // Error: Object is of type 'unknown'\nif (typeof valor === \"string\") {\n  console.log(valor.length); // V\u00e1lido\n}\n</code></pre>"},{"location":"tutorials/course1/p3/#void","title":"<code>void</code>","text":"<p>Indica que una funci\u00f3n no retorna nada.</p> <pre><code>function saludar(): void {\n  console.log(\"Hola\");\n}\n</code></pre>"},{"location":"tutorials/course1/p3/#null-y-undefined","title":"<code>null</code> y <code>undefined</code>","text":"<p>Representan la ausencia de valor.</p> <pre><code>let nulo: null = null;\nlet indefinido: undefined = undefined;\n</code></pre>"},{"location":"tutorials/course1/p3/#arrays-y-tuplas","title":"Arrays y Tuplas","text":""},{"location":"tutorials/course1/p3/#arrays","title":"Arrays","text":"<p>Define listas de elementos del mismo tipo.</p> <pre><code>let numeros: number[] = [1, 2, 3];\nlet nombres: Array&lt;string&gt; = [\"Ana\", \"Juan\"];\nnumeros.push(4); // V\u00e1lido\n// numeros.push(\"cinco\"); // Error\n</code></pre>"},{"location":"tutorials/course1/p3/#tuplas","title":"Tuplas","text":"<p>Define arrays con un n\u00famero fijo de elementos y tipos espec\u00edficos.</p> <pre><code>let persona: [string, number] = [\"Ana\", 25];\n// persona = [25, \"Ana\"]; // Error\n// persona.push(true); // V\u00e1lido, pero no recomendado\n</code></pre>"},{"location":"tutorials/course1/p3/#tipos-de-union","title":"Tipos de Uni\u00f3n","text":"<p>Permite que una variable acepte m\u00faltiples tipos.</p> <pre><code>let id: string | number = \"123\";\nid = 123; // V\u00e1lido\n// id = true; // Error\n</code></pre>"},{"location":"tutorials/course1/p3/#tipos-literales","title":"Tipos Literales","text":"<p>Restringe una variable a valores espec\u00edficos.</p> <pre><code>let direccion: \"arriba\" | \"abajo\" | \"izquierda\" | \"derecha\";\ndireccion = \"arriba\"; // V\u00e1lido\n// direccion = \"centro\"; // Error\n</code></pre>"},{"location":"tutorials/course1/p3/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un archivo <code>tipos.ts</code> con este c\u00f3digo:</p> <pre><code>let nombre: string = \"Carlos\";\nlet edad: number = 30;\nlet hobbies: string[] = [\"leer\", \"programar\"];\nlet coordenadas: [number, number] = [10, 20];\nlet estado: \"activo\" | \"inactivo\" = \"activo\";\n\nconsole.log(`Nombre: ${nombre}, Edad: ${edad}, Hobbies: ${hobbies}, Coordenadas: ${coordenadas}, Estado: ${estado}`);\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc src/tipos.ts\nnode dist/tipos.js\n</code></pre>"},{"location":"tutorials/course1/p4/","title":"Funciones y Tipado en TypeScript","text":"<p>Las funciones en TypeScript permiten definir tipos para par\u00e1metros y valores de retorno, mejorando la seguridad y claridad del c\u00f3digo. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo trabajar con funciones en TypeScript.</p>"},{"location":"tutorials/course1/p4/#declaracion-de-funciones","title":"Declaraci\u00f3n de Funciones","text":"<p>Especifica los tipos de los par\u00e1metros y el tipo de retorno.</p> <pre><code>function sumar(a: number, b: number): number {\n  return a + b;\n}\n\nconsole.log(sumar(2, 3)); // 5\n// console.log(sumar(\"2\", 3)); // Error\n</code></pre>"},{"location":"tutorials/course1/p4/#funciones-flecha","title":"Funciones Flecha","text":"<pre><code>const restar = (a: number, b: number): number =&gt; {\n  return a - b;\n};\n\nconsole.log(restar(5, 2)); // 3\n</code></pre>"},{"location":"tutorials/course1/p4/#parametros-opcionales","title":"Par\u00e1metros Opcionales","text":"<p>Usa <code>?</code> para marcar par\u00e1metros opcionales.</p> <pre><code>function saludar(nombre: string, saludo?: string): string {\n  return `${saludo || \"Hola\"}, ${nombre}!`;\n}\n\nconsole.log(saludar(\"Ana\")); // Hola, Ana!\nconsole.log(saludar(\"Juan\", \"Buenos d\u00edas\")); // Buenos d\u00edas, Juan!\n</code></pre>"},{"location":"tutorials/course1/p4/#parametros-por-defecto","title":"Par\u00e1metros por Defecto","text":"<pre><code>function bienvenida(nombre: string, pais: string = \"Espa\u00f1a\"): string {\n  return `\u00a1Bienvenido ${nombre} de ${pais}!`;\n}\n\nconsole.log(bienvenida(\"Ana\")); // \u00a1Bienvenido Ana de Espa\u00f1a!\nconsole.log(bienvenida(\"Juan\", \"M\u00e9xico\")); // \u00a1Bienvenido Juan de M\u00e9xico!\n</code></pre>"},{"location":"tutorials/course1/p4/#tipos-de-funcion","title":"Tipos de Funci\u00f3n","text":"<p>Define la firma de una funci\u00f3n usando una interfaz o tipo.</p> <pre><code>type Operacion = (a: number, b: number) =&gt; number;\n\nconst multiplicar: Operacion = (a, b) =&gt; a * b;\n\nconsole.log(multiplicar(4, 5)); // 20\n</code></pre>"},{"location":"tutorials/course1/p4/#sobrecarga-de-funciones","title":"Sobrecarga de Funciones","text":"<p>Permite definir m\u00faltiples firmas para una misma funci\u00f3n.</p> <pre><code>function convertir(valor: string): number;\nfunction convertir(valor: number): string;\nfunction convertir(valor: string | number): string | number {\n  if (typeof valor === \"string\") {\n    return parseInt(valor);\n  }\n  return valor.toString();\n}\n\nconsole.log(convertir(\"123\")); // 123\nconsole.log(convertir(123)); // \"123\"\n</code></pre>"},{"location":"tutorials/course1/p4/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un archivo <code>funciones.ts</code>:</p> <pre><code>type Calculadora = (a: number, b: number) =&gt; number;\n\nfunction operar(a: number, b: number, operacion: Calculadora): number {\n  return operacion(a, b);\n}\n\nconst suma: Calculadora = (x, y) =&gt; x + y;\nconst resta: Calculadora = (x, y) =&gt; x - y;\n\nconsole.log(operar(10, 5, suma)); // 15\nconsole.log(operar(10, 5, resta)); // 5\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc src/funciones.ts\nnode dist/funciones.js\n</code></pre>"},{"location":"tutorials/course1/p5/","title":"Interfaces y Clases en TypeScript","text":"<p>Las interfaces y clases son fundamentales para estructurar c\u00f3digo orientado a objetos en TypeScript. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo definir y usar interfaces y clases.</p>"},{"location":"tutorials/course1/p5/#interfaces","title":"Interfaces","text":"<p>Las interfaces definen la estructura de un objeto.</p> <pre><code>interface Persona {\n  nombre: string;\n  edad: number;\n  saludar(): string;\n}\n\nconst usuario: Persona = {\n  nombre: \"Ana\",\n  edad: 25,\n  saludar() {\n    return `Hola, soy ${this.nombre}`;\n  },\n};\n\nconsole.log(usuario.saludar()); // Hola, soy Ana\n</code></pre>"},{"location":"tutorials/course1/p5/#propiedades-opcionales","title":"Propiedades Opcionales","text":"<pre><code>interface Coche {\n  marca: string;\n  modelo: string;\n  anio?: number;\n}\n\nconst miCoche: Coche = {\n  marca: \"Toyota\",\n  modelo: \"Corolla\",\n};\n\nconsole.log(miCoche); // { marca: \"Toyota\", modelo: \"Corolla\" }\n</code></pre>"},{"location":"tutorials/course1/p5/#interfaces-para-funciones","title":"Interfaces para Funciones","text":"<pre><code>interface Operacion {\n  (a: number, b: number): number;\n}\n\nconst suma: Operacion = (a, b) =&gt; a + b;\nconsole.log(suma(2, 3)); // 5\n</code></pre>"},{"location":"tutorials/course1/p5/#clases","title":"Clases","text":"<p>Las clases en TypeScript soportan modificadores de acceso y tipado.</p> <pre><code>class Animal {\n  private nombre: string;\n  protected especie: string;\n\n  constructor(nombre: string, especie: string) {\n    this.nombre = nombre;\n    this.especie = especie;\n  }\n\n  public hacerSonido(): string {\n    return `${this.nombre} hace un sonido`;\n  }\n}\n\nconst perro = new Animal(\"Max\", \"Canino\");\nconsole.log(perro.hacerSonido()); // Max hace un sonido\n</code></pre>"},{"location":"tutorials/course1/p5/#herencia","title":"Herencia","text":"<pre><code>class Perro extends Animal {\n  constructor(nombre: string) {\n    super(nombre, \"Canino\");\n  }\n\n  hacerSonido(): string {\n    return `${this.nombre} ladra`;\n  }\n}\n\nconst miPerro = new Perro(\"Luna\");\nconsole.log(miPerro.hacerSonido()); // Luna ladra\n</code></pre>"},{"location":"tutorials/course1/p5/#implementacion-de-interfaces","title":"Implementaci\u00f3n de Interfaces","text":"<pre><code>interface Vehiculo {\n  marca: string;\n  arrancar(): string;\n}\n\nclass Moto implements Vehiculo {\n  marca: string;\n\n  constructor(marca: string) {\n    this.marca = marca;\n  }\n\n  arrancar(): string {\n    return `${this.marca} est\u00e1 arrancando`;\n  }\n}\n\nconst miMoto = new Moto(\"Honda\");\nconsole.log(miMoto.arrancar()); // Honda est\u00e1 arrancando\n</code></pre>"},{"location":"tutorials/course1/p5/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un archivo <code>clases.ts</code>:</p> <pre><code>interface Empleado {\n  nombre: string;\n  salario: number;\n  calcularBono(): number;\n}\n\nclass Desarrollador implements Empleado {\n  nombre: string;\n  salario: number;\n\n  constructor(nombre: string, salario: number) {\n    this.nombre = nombre;\n    this.salario = salario;\n  }\n\n  calcularBono(): number {\n    return this.salario * 0.1;\n  }\n}\n\nconst dev = new Desarrollador(\"Carlos\", 5000);\nconsole.log(`${dev.nombre} recibe un bono de ${dev.calcularBono()}`); // Carlos recibe un bono de 500\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc src/clases.ts\nnode dist/clases.js\n</code></pre>"},{"location":"tutorials/course1/p6/","title":"Tipos Avanzados en TypeScript","text":"<p>TypeScript ofrece herramientas avanzadas para trabajar con tipos complejos. En esta secci\u00f3n, aprender\u00e1s sobre tipos avanzados como tipos condicionales, utilidades y m\u00e1s.</p>"},{"location":"tutorials/course1/p6/#tipos-de-interseccion","title":"Tipos de Intersecci\u00f3n","text":"<p>Combina m\u00faltiples tipos en uno.</p> <pre><code>interface Humano {\n  nombre: string;\n}\n\ninterface Trabajador {\n  salario: number;\n}\n\ntype Empleado = Humano &amp; Trabajador;\n\nconst empleado: Empleado = {\n  nombre: \"Ana\",\n  salario: 3000,\n};\n\nconsole.log(empleado); // { nombre: \"Ana\", salario: 3000 }\n</code></pre>"},{"location":"tutorials/course1/p6/#tipos-condicionales","title":"Tipos Condicionales","text":"<p>Define tipos basados en condiciones.</p> <pre><code>type EsString&lt;T&gt; = T extends string ? \"Es string\" : \"No es string\";\n\ntype resultado1 = EsString&lt;string&gt;; // \"Es string\"\ntype resultado2 = EsString&lt;number&gt;; // \"No es string\"\n</code></pre>"},{"location":"tutorials/course1/p6/#utilidades-de-tipos","title":"Utilidades de Tipos","text":"<p>TypeScript proporciona utilidades integradas como <code>Partial</code>, <code>Required</code>, <code>Pick</code>, etc.</p>"},{"location":"tutorials/course1/p6/#partialt","title":"<code>Partial&lt;T&gt;</code>","text":"<p>Hace todas las propiedades de un tipo opcionales.</p> <pre><code>interface Usuario {\n  nombre: string;\n  edad: number;\n}\n\nconst usuarioParcial: Partial&lt;Usuario&gt; = {\n  nombre: \"Juan\",\n};\n\nconsole.log(usuarioParcial); // { nombre: \"Juan\" }\n</code></pre>"},{"location":"tutorials/course1/p6/#pickt-k","title":"<code>Pick&lt;T, K&gt;</code>","text":"<p>Selecciona propiedades espec\u00edficas de un tipo.</p> <pre><code>type UsuarioBasico = Pick&lt;Usuario, \"nombre\"&gt;;\n\nconst usuarioBasico: UsuarioBasico = {\n  nombre: \"Ana\",\n};\n\nconsole.log(usuarioBasico); // { nombre: \"Ana\" }\n</code></pre>"},{"location":"tutorials/course1/p6/#tipos-genericos","title":"Tipos Gen\u00e9ricos","text":"<p>Permiten crear componentes reutilizables con tipos din\u00e1micos.</p> <pre><code>function identidad&lt;T&gt;(valor: T): T {\n  return valor;\n}\n\nconsole.log(identidad&lt;string&gt;(\"Hola\")); // Hola\nconsole.log(identidad&lt;number&gt;(123)); // 123\n</code></pre>"},{"location":"tutorials/course1/p6/#genericos-en-clases","title":"Gen\u00e9ricos en Clases","text":"<pre><code>class Caja&lt;T&gt; {\n  contenido: T;\n\n  constructor(contenido: T) {\n    this.contenido = contenido;\n  }\n\n  obtenerContenido(): T {\n    return this.contenido;\n  }\n}\n\nconst cajaString = new Caja&lt;string&gt;(\"Mensaje\");\nconsole.log(cajaString.obtenerContenido()); // Mensaje\n</code></pre>"},{"location":"tutorials/course1/p6/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un archivo <code>avanzados.ts</code>:</p> <pre><code>interface Producto {\n  id: number;\n  nombre: string;\n  precio: number;\n}\n\ntype ProductoBasico = Pick&lt;Producto, \"id\" | \"nombre\"&gt;;\n\nfunction procesarProducto&lt;T extends ProductoBasico&gt;(producto: T): T {\n  console.log(`Procesando ${producto.nombre}`);\n  return producto;\n}\n\nconst producto: ProductoBasico = { id: 1, nombre: \"Laptop\" };\nconsole.log(procesarProducto(producto)); // Procesando Laptop\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc src/avanzados.ts\nnode dist/avanzados.js\n</code></pre>"},{"location":"tutorials/course1/p7/","title":"M\u00f3dulos y Namespaces en TypeScript","text":"<p>Los m\u00f3dulos y namespaces ayudan a organizar el c\u00f3digo en TypeScript, especialmente en proyectos grandes. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo usarlos.</p>"},{"location":"tutorials/course1/p7/#modulos","title":"M\u00f3dulos","text":"<p>TypeScript soporta m\u00f3dulos ES y CommonJS. Los m\u00f3dulos permiten importar y exportar c\u00f3digo entre archivos.</p>"},{"location":"tutorials/course1/p7/#exportacion","title":"Exportaci\u00f3n","text":"<pre><code>// src/utils.ts\nexport function sumar(a: number, b: number): number {\n  return a + b;\n}\n\nexport const PI: number = 3.1416;\n</code></pre>"},{"location":"tutorials/course1/p7/#importacion","title":"Importaci\u00f3n","text":"<pre><code>// src/index.ts\nimport { sumar, PI } from \"./utils\";\n\nconsole.log(sumar(2, 3)); // 5\nconsole.log(PI); // 3.1416\n</code></pre>"},{"location":"tutorials/course1/p7/#exportacion-por-defecto","title":"Exportaci\u00f3n por Defecto","text":"<pre><code>// src/config.ts\nconst config = {\n  apiUrl: \"https://api.example.com\",\n};\n\nexport default config;\n</code></pre> <pre><code>// src/index.ts\nimport config from \"./config\";\n\nconsole.log(config.apiUrl); // https://api.example.com\n</code></pre>"},{"location":"tutorials/course1/p7/#namespaces","title":"Namespaces","text":"<p>Los namespaces agrupan c\u00f3digo relacionado, evitando colisiones de nombres.</p> <pre><code>namespace Geometria {\n  export function areaCirculo(radio: number): number {\n    return Math.PI * radio * radio;\n  }\n\n  export function perimetroCirculo(radio: number): number {\n    return 2 * Math.PI * radio;\n  }\n}\n\nconsole.log(Geometria.areaCirculo(5)); // 78.53981633974483\n</code></pre>"},{"location":"tutorials/course1/p7/#namespaces-anidados","title":"Namespaces Anidados","text":"<pre><code>namespace Matematicas {\n  export namespace Geometria {\n    export function areaRectangulo(base: number, altura: number): number {\n      return base * altura;\n    }\n  }\n}\n\nconsole.log(Matematicas.Geometria.areaRectangulo(4, 5)); // 20\n</code></pre>"},{"location":"tutorials/course1/p7/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea los siguientes archivos:</p> <pre><code>// src/matematicas.ts\nexport namespace Calculadora {\n  export function suma(a: number, b: number): number {\n    return a + b;\n  }\n}\n</code></pre> <pre><code>// src/index.ts\nimport { Calculadora } from \"./matematicas\";\n\nconsole.log(Calculadora.suma(10, 20)); // 30\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc\nnode dist/index.js\n</code></pre>"},{"location":"tutorials/course1/p8/","title":"Integraci\u00f3n con Proyectos","text":"<p>TypeScript se integra f\u00e1cilmente con frameworks y herramientas modernas. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo usar TypeScript con Node.js, React y otros entornos.</p>"},{"location":"tutorials/course1/p8/#typescript-con-nodejs","title":"TypeScript con Node.js","text":"<ol> <li> <p>Instala las tipificaciones para Node.js:    <pre><code>npm install --save-dev @types/node\n</code></pre></p> </li> <li> <p>Configura <code>tsconfig.json</code>:    <pre><code>{\n  \"compilerOptions\": {\n    \"target\": \"ES2020\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"./dist\",\n    \"rootDir\": \"./src\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  }\n}\n</code></pre></p> </li> <li> <p>Crea un archivo <code>src/server.ts</code>:    <pre><code>import http from \"http\";\n\nconst server = http.createServer((req, res) =&gt; {\n  res.writeHead(200, { \"Content-Type\": \"text/plain\" });\n  res.end(\"\u00a1Hola, TypeScript con Node.js!\");\n});\n\nserver.listen(3000, () =&gt; {\n  console.log(\"Servidor corriendo en http://localhost:3000\");\n});\n</code></pre></p> </li> <li> <p>Compila y ejecuta:    <pre><code>npx tsc\nnode dist/server.js\n</code></pre></p> </li> </ol>"},{"location":"tutorials/course1/p8/#typescript-con-react","title":"TypeScript con React","text":"<ol> <li> <p>Crea un proyecto React con TypeScript:    <pre><code>npx create-react-app mi-app-react --template typescript\ncd mi-app-react\n</code></pre></p> </li> <li> <p>Escribe un componente en <code>src/App.tsx</code>:    <pre><code>import React from \"react\";\n\ninterface Props {\n  mensaje: string;\n}\n\nconst App: React.FC&lt;Props&gt; = ({ mensaje }) =&gt; {\n  return &lt;h1&gt;{mensaje}&lt;/h1&gt;;\n};\n\nexport default App;\n</code></pre></p> </li> <li> <p>Ejecuta el proyecto:    <pre><code>npm start\n</code></pre></p> </li> </ol>"},{"location":"tutorials/course1/p8/#integracion-con-jest","title":"Integraci\u00f3n con Jest","text":"<ol> <li> <p>Instala Jest y las tipificaciones:    <pre><code>npm install --save-dev jest @types/jest ts-jest\n</code></pre></p> </li> <li> <p>Configura Jest:    Crea un archivo <code>jest.config.js</code>:    <pre><code>module.exports = {\n  preset: \"ts-jest\",\n  testEnvironment: \"node\",\n};\n</code></pre></p> </li> <li> <p>Escribe una prueba en <code>src/__tests__/suma.test.ts</code>:    <pre><code>import { sumar } from \"../utils\";\n\ntest(\"suma dos n\u00fameros\", () =&gt; {\n  expect(sumar(2, 3)).toBe(5);\n});\n</code></pre></p> </li> <li> <p>Ejecuta las pruebas:    <pre><code>npm test\n</code></pre></p> </li> </ol>"},{"location":"tutorials/course1/p8/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un proyecto Node.js con TypeScript y escribe un endpoint simple en <code>src/index.ts</code>:</p> <pre><code>import express from \"express\";\nimport { Request, Response } from \"express\";\n\nconst app = express();\n\napp.get(\"/\", (req: Request, res: Response) =&gt; {\n  res.send(\"\u00a1Bienvenido a mi API con TypeScript!\");\n});\n\napp.listen(3000, () =&gt; {\n  console.log(\"API corriendo en http://localhost:3000\");\n});\n</code></pre> <p>Instala dependencias:</p> <pre><code>npm install express\nnpm install --save-dev @types/express\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc\nnode dist/index.js\n</code></pre>"},{"location":"tutorials/course1/p9/","title":"Buenas Pr\u00e1cticas en TypeScript","text":"<p>Adoptar buenas pr\u00e1cticas en TypeScript mejora la calidad y mantenibilidad del c\u00f3digo. Aqu\u00ed tienes algunas recomendaciones clave.</p>"},{"location":"tutorials/course1/p9/#1-usa-tipado-estricto","title":"1. Usa Tipado Estricto","text":"<p>Activa la opci\u00f3n <code>\"strict\": true</code> en <code>tsconfig.json</code> para habilitar verificaciones como <code>noImplicitAny</code>, <code>strictNullChecks</code>, etc.</p> <pre><code>{\n  \"compilerOptions\": {\n    \"strict\": true\n  }\n}\n</code></pre>"},{"location":"tutorials/course1/p9/#2-evita-any","title":"2. Evita <code>any</code>","text":"<p>Usar <code>any</code> anula los beneficios del tipado. Prefiere <code>unknown</code> o tipos espec\u00edficos.</p> <pre><code>// Mal\nlet dato: any = \"texto\";\ndato = 123;\n\n// Bien\nlet dato: unknown = \"texto\";\nif (typeof dato === \"string\") {\n  console.log(dato.toUpperCase());\n}\n</code></pre>"},{"location":"tutorials/course1/p9/#3-usa-interfaces-sobre-types-para-objetos","title":"3. Usa Interfaces sobre Types para Objetos","text":"<p>Las interfaces son m\u00e1s extensibles y claras para definir estructuras de objetos.</p> <pre><code>// Bien\ninterface Usuario {\n  nombre: string;\n  edad: number;\n}\n\n// Mal\ntype Usuario = {\n  nombre: string;\n  edad: number;\n};\n</code></pre>"},{"location":"tutorials/course1/p9/#4-aprovecha-los-genericos","title":"4. Aprovecha los Gen\u00e9ricos","text":"<p>Los gen\u00e9ricos hacen el c\u00f3digo reutilizable y seguro.</p> <pre><code>function obtenerPrimero&lt;T&gt;(arr: T[]): T {\n  return arr[0];\n}\n\nconsole.log(obtenerPrimero&lt;string&gt;([\"a\", \"b\"])); // a\nconsole.log(obtenerPrimero&lt;number&gt;([1, 2])); // 1\n</code></pre>"},{"location":"tutorials/course1/p9/#5-organiza-el-codigo-con-modulos","title":"5. Organiza el C\u00f3digo con M\u00f3dulos","text":"<p>Usa m\u00f3dulos para separar la l\u00f3gica en archivos distintos.</p> <pre><code>// src/utils.ts\nexport function formatearFecha(fecha: Date): string {\n  return fecha.toISOString();\n}\n</code></pre> <pre><code>// src/index.ts\nimport { formatearFecha } from \"./utils\";\n\nconsole.log(formatearFecha(new Date()));\n</code></pre>"},{"location":"tutorials/course1/p9/#6-escribe-pruebas","title":"6. Escribe Pruebas","text":"<p>Integra herramientas como Jest para garantizar la calidad del c\u00f3digo.</p> <pre><code>// src/__tests__/utils.test.ts\nimport { formatearFecha } from \"../utils\";\n\ntest(\"formatea fecha correctamente\", () =&gt; {\n  const fecha = new Date(\"2023-01-01\");\n  expect(formatearFecha(fecha)).toBe(\"2023-01-01T00:00:00.000Z\");\n});\n</code></pre>"},{"location":"tutorials/course1/p9/#7-documenta-tu-codigo","title":"7. Documenta tu C\u00f3digo","text":"<p>Usa JSDoc para documentar funciones y tipos complejos.</p> <pre><code>/**\n * Calcula el \u00e1rea de un c\u00edrculo.\n * @param radio - El radio del c\u00edrculo.\n * @returns El \u00e1rea del c\u00edrculo.\n */\nfunction areaCirculo(radio: number): number {\n  return Math.PI * radio * radio;\n}\n</code></pre>"},{"location":"tutorials/course1/p9/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un archivo <code>practicas.ts</code> con buenas pr\u00e1cticas aplicadas:</p> <pre><code>interface Producto {\n  id: number;\n  nombre: string;\n  precio: number;\n}\n\n/**\n * Filtra productos por precio m\u00ednimo.\n * @param productos - Lista de productos.\n * @param precioMin - Precio m\u00ednimo.\n * @returns Productos filtrados.\n */\nfunction filtrarProductos&lt;T extends Producto&gt;(\n  productos: T[],\n  precioMin: number\n): T[] {\n  return productos.filter((p) =&gt; p.precio &gt;= precioMin);\n}\n\nconst productos: Producto[] = [\n  { id: 1, nombre: \"Laptop\", precio: 1000 },\n  { id: 2, nombre: \"Tel\u00e9fono\", precio: 500 },\n];\n\nconsole.log(filtrarProductos(productos, 600)); // [{ id: 1, nombre: \"Laptop\", precio: 1000 }]\n</code></pre> <p>Compila y ejecuta:</p> <pre><code>npx tsc src/practicas.ts\nnode dist/practicas.js\n</code></pre>"},{"location":"tutorials/course2/p1/","title":"Tutorial Completo de Tailwind CSS","text":"<p>\u00a1Bienvenido al tutorial completo de Tailwind CSS en espa\u00f1ol! Este tutorial est\u00e1 dise\u00f1ado para ayudarte a dominar Tailwind CSS, una librer\u00eda de estilos utilitarios que permite construir interfaces modernas y responsivas de manera eficiente. Desde los fundamentos hasta t\u00e9cnicas avanzadas, aprender\u00e1s a usar Tailwind CSS con ejemplos pr\u00e1cticos.</p>"},{"location":"tutorials/course2/p1/#que-es-tailwind-css","title":"\u00bfQu\u00e9 es Tailwind CSS?","text":"<p>Tailwind CSS es un framework de CSS basado en clases utilitarias que permite estilizar aplicaciones web directamente en el HTML, sin escribir CSS personalizado en la mayor\u00eda de los casos. Su enfoque de \"utilidad primero\" (utility-first) proporciona clases predefinidas para aplicar estilos como m\u00e1rgenes, colores, tipograf\u00eda, y m\u00e1s.</p>"},{"location":"tutorials/course2/p1/#beneficios-de-tailwind-css","title":"Beneficios de Tailwind CSS","text":"<ul> <li>Productividad: Dise\u00f1a interfaces r\u00e1pidamente sin salir del HTML.</li> <li>Consistencia: Clases predefinidas garantizan un dise\u00f1o uniforme.</li> <li>Personalizaci\u00f3n: Altamente configurable mediante un archivo de configuraci\u00f3n.</li> <li>Responsividad: Soporte integrado para dise\u00f1os responsivos y adaptativos.</li> <li>Sin conflictos de nombres: Evita problemas de especificidad comunes en CSS tradicional.</li> </ul>"},{"location":"tutorials/course2/p1/#estructura-del-tutorial","title":"Estructura del Tutorial","text":"<p>Este tutorial est\u00e1 organizado en secciones que cubren desde la instalaci\u00f3n hasta pr\u00e1cticas avanzadas. Puedes navegar por las secciones usando el men\u00fa lateral.</p>"},{"location":"tutorials/course2/p1/#requisitos-previos","title":"Requisitos Previos","text":"<ul> <li>Conocimientos b\u00e1sicos de HTML y CSS.</li> <li>Un editor de c\u00f3digo como Visual Studio Code.</li> <li>Node.js instalado en tu m\u00e1quina para configurar Tailwind CSS.</li> </ul>"},{"location":"tutorials/course2/p10/","title":"Comandos de Tailwind CLI","text":"<p>Tailwind CSS proporciona una CLI (interfaz de l\u00ednea de comandos) para compilar, optimizar y gestionar estilos. En esta secci\u00f3n, aprender\u00e1s los comandos m\u00e1s importantes de Tailwind CLI y c\u00f3mo integrarlos en tu flujo de trabajo.</p>"},{"location":"tutorials/course2/p10/#instalacion-de-tailwind-cli","title":"Instalaci\u00f3n de Tailwind CLI","text":"<p>La Tailwind CLI se instala con el paquete <code>tailwindcss</code>:</p> <pre><code>npm install -D tailwindcss\n</code></pre> <p>Verifica la instalaci\u00f3n:</p> <pre><code>npx tailwindcss --version\n</code></pre> <p>Esto muestra la versi\u00f3n, por ejemplo, <code>3.x.x</code>.</p>"},{"location":"tutorials/course2/p10/#comandos-basicos-de-tailwind-cli","title":"Comandos B\u00e1sicos de Tailwind CLI","text":""},{"location":"tutorials/course2/p10/#1-inicializar-la-configuracion","title":"1. Inicializar la Configuraci\u00f3n","text":"<p>Genera un archivo <code>tailwind.config.js</code>:</p> <pre><code>npx tailwindcss init\n</code></pre> <p>Para una configuraci\u00f3n completa con comentarios:</p> <pre><code>npx tailwindcss init --full\n</code></pre>"},{"location":"tutorials/course2/p10/#2-compilar-estilos","title":"2. Compilar Estilos","text":"<p>Compila el archivo CSS de entrada a uno de salida:</p> <pre><code>npx tailwindcss -i ./src/input.css -o ./dist/output.css\n</code></pre> <ul> <li><code>-i</code>: Archivo de entrada (con directivas <code>@tailwind</code>).</li> <li><code>-o</code>: Archivo de salida compilado.</li> </ul>"},{"location":"tutorials/course2/p10/#3-compilar-en-modo-de-observacion","title":"3. Compilar en Modo de Observaci\u00f3n","text":"<p>Recompila autom\u00e1ticamente al detectar cambios:</p> <pre><code>npx tailwindcss -i ./src/input.css -o ./dist/output.css --watch\n</code></pre>"},{"location":"tutorials/course2/p10/#4-minimizar-el-css","title":"4. Minimizar el CSS","text":"<p>Genera un CSS optimizado y minimizado para producci\u00f3n:</p> <pre><code>npx tailwindcss -i ./src/input.css -o ./dist/output.css --minify\n</code></pre>"},{"location":"tutorials/course2/p10/#5-usar-postcss","title":"5. Usar PostCSS","text":"<p>Si usas PostCSS, ejecuta Tailwind a trav\u00e9s de \u00e9l:</p> <pre><code>npx postcss src/input.css -o dist/output.css\n</code></pre> <p>Aseg\u00farate de tener <code>postcss.config.js</code>:</p> <pre><code>module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n};\n</code></pre>"},{"location":"tutorials/course2/p10/#integracion-con-scripts","title":"Integraci\u00f3n con Scripts","text":"<p>A\u00f1ade comandos a <code>package.json</code>:</p> <pre><code>{\n  \"scripts\": {\n    \"build\": \"tailwindcss -i ./src/input.css -o ./dist/output.css\",\n    \"watch\": \"tailwindcss -i ./src/input.css -o ./dist/output.css --watch\",\n    \"prod\": \"NODE_ENV=production tailwindcss -i ./src/input.css -o ./dist/output.css --minify\"\n  }\n}\n</code></pre> <ul> <li><code>build</code>: Compila una vez.</li> <li><code>watch</code>: Compila en modo observaci\u00f3n.</li> <li><code>prod</code>: Compila y minimiza para producci\u00f3n.</li> </ul> <p>Ejecuta con:</p> <pre><code>npm run build\nnpm run watch\nnpm run prod\n</code></pre>"},{"location":"tutorials/course2/p10/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<ol> <li>Configura un proyecto:</li> </ol> <pre><code>mkdir proyecto-tailwind\ncd proyecto-tailwind\nnpm init -y\nnpm install -D tailwindcss\nnpx tailwindcss init\n</code></pre> <ol> <li>Crea <code>src/input.css</code>:</li> </ol> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <ol> <li>Crea <code>src/index.html</code>:</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Prueba CLI&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;h1 class=\"text-3xl font-bold text-blue-600\"&gt;Tailwind CLI&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Compila y sirve:</li> </ol> <pre><code>npm run build\nlive-server src\n</code></pre> <ol> <li>Prueba el modo observaci\u00f3n:</li> </ol> <pre><code>npm run watch\n</code></pre>"},{"location":"tutorials/course2/p10/#buenas-practicas","title":"Buenas Pr\u00e1cticas","text":"<ul> <li>Usa scripts en <code>package.json</code>: Simplifica los comandos frecuentes.</li> <li>Habilita <code>--minify</code> en producci\u00f3n: Reduce el tama\u00f1o del CSS.</li> <li>Combina con PostCSS: A\u00f1ade <code>autoprefixer</code> o <code>cssnano</code> para optimizaci\u00f3n.</li> <li>Configura <code>content</code> correctamente: Aseg\u00farate de incluir todas las rutas de tus archivos.</li> </ul>"},{"location":"tutorials/course2/p11/","title":"Componentes de Ejemplo Explicados","text":"<p>En esta secci\u00f3n, exploraremos c\u00f3mo crear componentes comunes y reutilizables con Tailwind CSS, con explicaciones detalladas de cada uno. Aprender\u00e1s a construir una tarjeta (card), un bot\u00f3n, una barra de navegaci\u00f3n (navbar) y un formulario, usando clases utilitarias y componentes personalizados. Cada ejemplo incluye un an\u00e1lisis de las clases utilizadas y consejos para su reutilizaci\u00f3n.</p>"},{"location":"tutorials/course2/p11/#1-tarjeta-card","title":"1. Tarjeta (Card)","text":"<p>Las tarjetas son ideales para mostrar contenido como productos, art\u00edculos o perfiles de usuario.</p>"},{"location":"tutorials/course2/p11/#codigo","title":"C\u00f3digo","text":"<pre><code>&lt;!-- src/components/card.html --&gt;\n&lt;div class=\"card\"&gt;\n  &lt;img src=\"https://via.placeholder.com/300x150\" alt=\"Imagen\" class=\"w-full h-48 object-cover rounded-t-lg\"&gt;\n  &lt;div class=\"p-6\"&gt;\n    &lt;h2 class=\"text-xl font-bold text-gray-800\"&gt;T\u00edtulo de la Tarjeta&lt;/h2&gt;\n    &lt;p class=\"mt-2 text-gray-600\"&gt;Descripci\u00f3n breve de la tarjeta, ideal para resumir contenido.&lt;/p&gt;\n    &lt;button class=\"mt-4 btn-primary\"&gt;Acci\u00f3n&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p11/#estilos-en-srcinputcss","title":"Estilos en <code>src/input.css</code>","text":"<pre><code>@tailwind base;\n@tailwind components;\n\n@layer components {\n  .card {\n    @apply bg-white rounded-lg shadow-md max-w-sm mx-auto overflow-hidden;\n  }\n  .btn-primary {\n    @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition;\n  }\n}\n\n@tailwind utilities;\n</code></pre>"},{"location":"tutorials/course2/p11/#explicacion","title":"Explicaci\u00f3n","text":"<ul> <li>Estructura:</li> <li>La tarjeta usa <code>div.card</code> como contenedor principal.</li> <li>Una imagen en la parte superior con <code>w-full h-48 object-cover</code> asegura que cubra el ancho y mantenga la proporci\u00f3n.</li> <li><code>rounded-t-lg</code> redondea solo las esquinas superiores de la imagen.</li> <li> <p>El contenido (t\u00edtulo, descripci\u00f3n, bot\u00f3n) est\u00e1 envuelto en un <code>div</code> con <code>p-6</code> para espaciado.</p> </li> <li> <p>Clases clave:</p> </li> <li><code>bg-white</code>: Fondo blanco para la tarjeta.</li> <li><code>rounded-lg</code>: Bordes redondeados.</li> <li><code>shadow-md</code>: Sombra suave para profundidad.</li> <li><code>max-w-sm</code>: Limita el ancho a un tama\u00f1o mediano.</li> <li><code>mx-auto</code>: Centra la tarjeta horizontalmente.</li> <li><code>overflow-hidden</code>: Evita que el contenido desborde los bordes redondeados.</li> <li> <p><code>btn-primary</code>: Componente reutilizable para el bot\u00f3n, con transici\u00f3n suave (<code>transition</code>) al pasar el rat\u00f3n.</p> </li> <li> <p>Consejo: Usa <code>max-w-*</code> para controlar el tama\u00f1o de la tarjeta y adapta <code>shadow-*</code> para diferentes niveles de profundidad.</p> </li> </ul>"},{"location":"tutorials/course2/p11/#2-boton-personalizado","title":"2. Bot\u00f3n Personalizado","text":"<p>Los botones son esenciales para acciones interactivas.</p>"},{"location":"tutorials/course2/p11/#codigo_1","title":"C\u00f3digo","text":"<pre><code>&lt;!-- src/components/button.html --&gt;\n&lt;button class=\"btn-secondary\"&gt;\n  Bot\u00f3n Secundario\n&lt;/button&gt;\n</code></pre>"},{"location":"tutorials/course2/p11/#estilos-en-srcinputcss_1","title":"Estilos en <code>src/input.css</code>","text":"<pre><code>@layer components {\n  .btn-secondary {\n    @apply bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300 focus:ring-2 focus:ring-gray-400 transition;\n  }\n}\n</code></pre>"},{"location":"tutorials/course2/p11/#explicacion_1","title":"Explicaci\u00f3n","text":"<ul> <li>Estructura:</li> <li> <p>Un elemento <code>&lt;button&gt;</code> con la clase <code>btn-secondary</code> definida en <code>@layer components</code>.</p> </li> <li> <p>Clases clave:</p> </li> <li><code>bg-gray-200</code>: Fondo gris claro.</li> <li><code>text-gray-800</code>: Texto gris oscuro para contraste.</li> <li><code>px-4 py-2</code>: Relleno horizontal y vertical.</li> <li><code>rounded-md</code>: Bordes redondeados medianos.</li> <li><code>hover:bg-gray-300</code>: Cambia el fondo al pasar el rat\u00f3n.</li> <li><code>focus:ring-2 focus:ring-gray-400</code>: A\u00f1ade un anillo de enfoque para accesibilidad.</li> <li> <p><code>transition</code>: Suaviza los cambios de color.</p> </li> <li> <p>Consejo: Define variantes como <code>btn-primary</code>, <code>btn-secondary</code>, o <code>btn-danger</code> para diferentes casos de uso, y usa <code>focus:*</code> para mejorar la accesibilidad.</p> </li> </ul>"},{"location":"tutorials/course2/p11/#3-barra-de-navegacion-navbar","title":"3. Barra de Navegaci\u00f3n (Navbar)","text":"<p>Una barra de navegaci\u00f3n responsiva es clave para la navegaci\u00f3n del sitio.</p>"},{"location":"tutorials/course2/p11/#codigo_2","title":"C\u00f3digo","text":"<pre><code>&lt;!-- src/components/navbar.html --&gt;\n&lt;nav class=\"navbar\"&gt;\n  &lt;div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\"&gt;\n    &lt;div class=\"flex justify-between h-16\"&gt;\n      &lt;div class=\"flex items-center\"&gt;\n        &lt;a href=\"#\" class=\"text-2xl font-bold text-gray-800\"&gt;Logo&lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class=\"hidden md:flex items-center space-x-4\"&gt;\n        &lt;a href=\"#\" class=\"nav-link\"&gt;Inicio&lt;/a&gt;\n        &lt;a href=\"#\" class=\"nav-link\"&gt;Acerca&lt;/a&gt;\n        &lt;a href=\"#\" class=\"nav-link\"&gt;Contacto&lt;/a&gt;\n      &lt;/div&gt;\n      &lt;div class=\"md:hidden flex items-center\"&gt;\n        &lt;button class=\"hamburger\"&gt;\u2630&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/nav&gt;\n</code></pre>"},{"location":"tutorials/course2/p11/#estilos-en-srcinputcss_2","title":"Estilos en <code>src/input.css</code>","text":"<pre><code>@layer components {\n  .navbar {\n    @apply bg-white shadow-sm;\n  }\n  .nav-link {\n    @apply text-gray-600 hover:text-blue-500 px-3 py-2 rounded-md text-sm font-medium transition;\n  }\n  .hamburger {\n    @apply text-gray-600 text-2xl focus:outline-none;\n  }\n}\n</code></pre>"},{"location":"tutorials/course2/p11/#explicacion_2","title":"Explicaci\u00f3n","text":"<ul> <li>Estructura:</li> <li>Un elemento <code>&lt;nav&gt;</code> contiene un contenedor centrado (<code>max-w-7xl mx-auto</code>).</li> <li>Usa <code>flex</code> para alinear el logo y los enlaces.</li> <li>Los enlaces son visibles en pantallas medianas (<code>md:flex</code>) y ocultos en pantallas peque\u00f1as (<code>hidden md:flex</code>).</li> <li> <p>Un bot\u00f3n de hamburguesa aparece en pantallas peque\u00f1as (<code>md:hidden</code>).</p> </li> <li> <p>Clases clave:</p> </li> <li><code>bg-white shadow-sm</code>: Fondo blanco con sombra ligera.</li> <li><code>max-w-7xl mx-auto</code>: Limita y centra el contenido.</li> <li><code>px-4 sm:px-6 lg:px-8</code>: Espaciado responsivo.</li> <li><code>flex justify-between</code>: Distribuye el logo y los enlaces.</li> <li><code>space-x-4</code>: Espacio horizontal entre enlaces.</li> <li><code>hover:text-blue-500</code>: Cambia el color al pasar el rat\u00f3n.</li> <li> <p><code>focus:outline-none</code>: Mejora la accesibilidad del bot\u00f3n de hamburguesa.</p> </li> <li> <p>Consejo: Implementa un men\u00fa m\u00f3vil con JavaScript para mostrar/ocultar los enlaces al hacer clic en el bot\u00f3n de hamburguesa.</p> </li> </ul>"},{"location":"tutorials/course2/p11/#4-formulario","title":"4. Formulario","text":"<p>Un formulario estilizado es \u00fatil para entradas de usuario.</p>"},{"location":"tutorials/course2/p11/#codigo_3","title":"C\u00f3digo","text":"<pre><code>&lt;!-- src/components/form.html --&gt;\n&lt;form class=\"form-container\"&gt;\n  &lt;div class=\"mb-4\"&gt;\n    &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n    &lt;input type=\"text\" id=\"nombre\" class=\"form-input\" placeholder=\"Tu nombre\"&gt;\n  &lt;/div&gt;\n  &lt;div class=\"mb-4\"&gt;\n    &lt;label for=\"email\" class=\"form-label\"&gt;Correo&lt;/label&gt;\n    &lt;input type=\"email\" id=\"email\" class=\"form-input\" placeholder=\"tu@correo.com\"&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" class=\"btn-primary\"&gt;Enviar&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>"},{"location":"tutorials/course2/p11/#estilos-en-srcinputcss_3","title":"Estilos en <code>src/input.css</code>","text":"<pre><code>@layer components {\n  .form-container {\n    @apply max-w-md mx-auto space-y-4;\n  }\n  .form-label {\n    @apply block text-sm font-medium text-gray-700;\n  }\n  .form-input {\n    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500;\n  }\n}\n</code></pre>"},{"location":"tutorials/course2/p11/#explicacion_3","title":"Explicaci\u00f3n","text":"<ul> <li>Estructura:</li> <li>Un elemento <code>&lt;form&gt;</code> contiene campos de entrada y un bot\u00f3n.</li> <li> <p>Cada campo est\u00e1 envuelto en un <code>div</code> con <code>mb-4</code> para espaciado.</p> </li> <li> <p>Clases clave:</p> </li> <li><code>max-w-md mx-auto</code>: Limita y centra el formulario.</li> <li><code>space-y-4</code>: Espacio vertical entre elementos.</li> <li><code>block</code>: Hace que las etiquetas ocupen todo el ancho.</li> <li><code>border border-gray-300</code>: Borde para los campos de entrada.</li> <li><code>focus:ring-2 focus:ring-blue-500</code>: Anillo de enfoque para accesibilidad.</li> <li> <p>Reutiliza <code>btn-primary</code> para coherencia.</p> </li> <li> <p>Consejo: A\u00f1ade clases como <code>invalid:border-red-500</code> para manejar estados de error en los campos.</p> </li> </ul>"},{"location":"tutorials/course2/p11/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<ol> <li>Actualiza <code>src/input.css</code> con todos los componentes:</li> </ol> <pre><code>@tailwind base;\n@tailwind components;\n\n@layer components {\n  .card {\n    @apply bg-white rounded-lg shadow-md max-w-sm mx-auto overflow-hidden;\n  }\n  .btn-primary {\n    @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600 transition;\n  }\n  .btn-secondary {\n    @apply bg-gray-200 text-gray-800 px-4 py-2 rounded-md hover:bg-gray-300 focus:ring-2 focus:ring-gray-400 transition;\n  }\n  .navbar {\n    @apply bg-white shadow-sm;\n  }\n  .nav-link {\n    @apply text-gray-600 hover:text-blue-500 px-3 py-2 rounded-md text-sm font-medium transition;\n  }\n  .hamburger {\n    @apply text-gray-600 text-2xl focus:outline-none;\n  }\n  .form-container {\n    @apply max-w-md mx-auto space-y-4;\n  }\n  .form-label {\n    @apply block text-sm font-medium text-gray-700;\n  }\n  .form-input {\n    @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500;\n  }\n}\n\n@tailwind utilities;\n</code></pre> <ol> <li>Crea <code>src/componentes-ejemplo.html</code>:</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Componentes de Ejemplo&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;!-- Navbar --&gt;\n  &lt;nav class=\"navbar mb-8\"&gt;\n    &lt;div class=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\"&gt;\n      &lt;div class=\"flex justify-between h-16\"&gt;\n        &lt;div class=\"flex items-center\"&gt;\n          &lt;a href=\"#\" class=\"text-2xl font-bold text-gray-800\"&gt;Logo&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"hidden md:flex items-center space-x-4\"&gt;\n          &lt;a href=\"#\" class=\"nav-link\"&gt;Inicio&lt;/a&gt;\n          &lt;a href=\"#\" class=\"nav-link\"&gt;Acerca&lt;/a&gt;\n          &lt;a href=\"#\" class=\"nav-link\"&gt;Contacto&lt;/a&gt;\n        &lt;/div&gt;\n        &lt;div class=\"md:hidden flex items-center\"&gt;\n          &lt;button class=\"hamburger\"&gt;\u2630&lt;/button&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/nav&gt;\n\n  &lt;!-- Card --&gt;\n  &lt;div class=\"card mb-8\"&gt;\n    &lt;img src=\"https://via.placeholder.com/300x150\" alt=\"Imagen\" class=\"w-full h-48 object-cover rounded-t-lg\"&gt;\n    &lt;div class=\"p-6\"&gt;\n      &lt;h2 class=\"text-xl font-bold text-gray-800\"&gt;T\u00edtulo de la Tarjeta&lt;/h2&gt;\n      &lt;p class=\"mt-2 text-gray-600\"&gt;Descripci\u00f3n breve de la tarjeta.&lt;/p&gt;\n      &lt;button class=\"mt-4 btn-primary\"&gt;Acci\u00f3n&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;!-- Formulario --&gt;\n  &lt;form class=\"form-container\"&gt;\n    &lt;div class=\"mb-4\"&gt;\n      &lt;label for=\"nombre\" class=\"form-label\"&gt;Nombre&lt;/label&gt;\n      &lt;input type=\"text\" id=\"nombre\" class=\"form-input\" placeholder=\"Tu nombre\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"mb-4\"&gt;\n      &lt;label for=\"email\" class=\"form-label\"&gt;Correo&lt;/label&gt;\n      &lt;input type=\"email\" id=\"email\" class=\"form-input\" placeholder=\"tu@correo.com\"&gt;\n    &lt;/div&gt;\n    &lt;div class=\"flex space-x-4\"&gt;\n      &lt;button type=\"submit\" class=\"btn-primary\"&gt;Enviar&lt;/button&gt;\n      &lt;button type=\"button\" class=\"btn-secondary\"&gt;Cancelar&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"tutorials/course2/p2/","title":"Instalaci\u00f3n y Configuraci\u00f3n de Tailwind CSS","text":"<p>En esta secci\u00f3n, aprender\u00e1s c\u00f3mo instalar Tailwind CSS, configurar un proyecto y crear tu primer archivo HTML con estilos de Tailwind.</p>"},{"location":"tutorials/course2/p2/#instalacion-de-tailwind-css","title":"Instalaci\u00f3n de Tailwind CSS","text":"<p>Tailwind CSS se puede instalar de varias maneras, pero usaremos la Tailwind CLI para simplicidad.</p> <ol> <li>Crea un directorio para tu proyecto:</li> </ol> <pre><code>mkdir mi-proyecto-tailwind\ncd mi-proyecto-tailwind\n</code></pre> <ol> <li>Inicializa un proyecto Node.js:</li> </ol> <pre><code>npm init -y\n</code></pre> <ol> <li>Instala Tailwind CSS:</li> </ol> <pre><code>npm install -D tailwindcss\n</code></pre> <ol> <li>Inicializa Tailwind CSS:</li> </ol> <pre><code>npx tailwindcss init\n</code></pre> <p>Esto crea un archivo <code>tailwind.config.js</code> con la configuraci\u00f3n predeterminada.</p>"},{"location":"tutorials/course2/p2/#configurar-tailwind-css","title":"Configurar Tailwind CSS","text":"<ol> <li>Edita <code>tailwind.config.js</code>:</li> </ol> <p>Configura las rutas donde Tailwind buscar\u00e1 archivos HTML, JavaScript, o TypeScript para purgar estilos no utilizados:</p> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre> <ul> <li> <p><code>content</code>: Especifica los archivos que Tailwind escanear\u00e1 para generar CSS optimizado.</p> </li> <li> <p>Crea un archivo CSS:</p> </li> </ul> <p>Crea <code>src/input.css</code> con las directivas de Tailwind:</p> <pre><code>@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <ul> <li><code>@tailwind base</code>: Incluye estilos base (reset CSS).</li> <li><code>@tailwind components</code>: Espacio para componentes personalizados.</li> <li> <p><code>@tailwind utilities</code>: Incluye todas las clases utilitarias.</p> </li> <li> <p>Crea un archivo HTML:</p> </li> </ul> <p>Crea <code>src/index.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Mi Proyecto Tailwind&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 flex items-center justify-center h-screen\"&gt;\n  &lt;h1 class=\"text-4xl font-bold text-blue-600\"&gt;\u00a1Hola, Tailwind CSS!&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Compila los estilos:</li> </ol> <p>Genera el CSS compilado:</p> <pre><code>npx tailwindcss -i ./src/input.css -o ./dist/output.css\n</code></pre> <p>Esto crea <code>dist/output.css</code> con los estilos de Tailwind aplicados.</p> <ol> <li>Configura un script de desarrollo:</li> </ol> <p>Edita <code>package.json</code> para agregar un script:</p> <pre><code>{\n  \"scripts\": {\n    \"build\": \"tailwindcss -i ./src/input.css -o ./dist/output.css\",\n    \"watch\": \"tailwindcss -i ./src/input.css -o ./dist/output.css --watch\"\n  }\n}\n</code></pre> <ul> <li><code>build</code>: Compila los estilos una vez.</li> <li><code>watch</code>: Compila autom\u00e1ticamente al detectar cambios.</li> </ul> <p>Ejecuta el modo de observaci\u00f3n:</p> <pre><code>npm run watch\n</code></pre> <ol> <li>Sirve el proyecto:</li> </ol> <p>Usa un servidor local como <code>live-server</code> para ver los cambios:</p> <pre><code>npm install -g live-server\nlive-server src\n</code></pre> <p>Abre <code>http://localhost:8080</code> en tu navegador para ver el resultado.</p>"},{"location":"tutorials/course2/p3/","title":"Clases Utilitarias B\u00e1sicas","text":"<p>Tailwind CSS proporciona clases utilitarias para estilizar elementos directamente en el HTML. En esta secci\u00f3n, exploraremos las clases m\u00e1s comunes para tipograf\u00eda, espaciado, colores y m\u00e1s.</p>"},{"location":"tutorials/course2/p3/#tipografia","title":"Tipograf\u00eda","text":""},{"location":"tutorials/course2/p3/#tamano-de-texto-text-","title":"Tama\u00f1o de Texto (<code>text-*</code>)","text":"<p>Controla el tama\u00f1o de la fuente:</p> <pre><code>&lt;p class=\"text-sm\"&gt;Texto peque\u00f1o&lt;/p&gt;\n&lt;p class=\"text-lg\"&gt;Texto grande&lt;/p&gt;\n&lt;p class=\"text-4xl\"&gt;Texto muy grande&lt;/p&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#peso-de-fuente-font-","title":"Peso de Fuente (<code>font-*</code>)","text":"<p>Define el grosor de la fuente:</p> <pre><code>&lt;p class=\"font-normal\"&gt;Texto normal&lt;/p&gt;\n&lt;p class=\"font-bold\"&gt;Texto en negrita&lt;/p&gt;\n&lt;p class=\"font-extrabold\"&gt;Texto muy en negrita&lt;/p&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#alineacion-de-texto-text-","title":"Alineaci\u00f3n de Texto (<code>text-*</code>)","text":"<p>Alinea el texto:</p> <pre><code>&lt;p class=\"text-left\"&gt;Izquierda&lt;/p&gt;\n&lt;p class=\"text-center\"&gt;Centrado&lt;/p&gt;\n&lt;p class=\"text-right\"&gt;Derecha&lt;/p&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#espaciado","title":"Espaciado","text":""},{"location":"tutorials/course2/p3/#margenes-m-mx-my-mt-etc","title":"M\u00e1rgenes (<code>m-*</code>, <code>mx-*</code>, <code>my-*</code>, <code>mt-*</code>, etc.)","text":"<p>A\u00f1ade m\u00e1rgenes:</p> <pre><code>&lt;div class=\"m-4\"&gt;Margen en todos los lados&lt;/div&gt;\n&lt;div class=\"mx-2\"&gt;Margen horizontal&lt;/div&gt;\n&lt;div class=\"mt-6\"&gt;Margen superior&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#relleno-p-px-py-pt-etc","title":"Relleno (<code>p-*</code>, <code>px-*</code>, <code>py-*</code>, <code>pt-*</code>, etc.)","text":"<p>A\u00f1ade relleno:</p> <pre><code>&lt;div class=\"p-4 bg-gray-200\"&gt;Relleno en todos los lados&lt;/div&gt;\n&lt;div class=\"px-6 bg-gray-200\"&gt;Relleno horizontal&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#colores","title":"Colores","text":""},{"location":"tutorials/course2/p3/#color-de-fondo-bg-","title":"Color de Fondo (<code>bg-*</code>)","text":"<p>Establece el color de fondo:</p> <pre><code>&lt;div class=\"bg-blue-500\"&gt;Fondo azul&lt;/div&gt;\n&lt;div class=\"bg-green-300\"&gt;Fondo verde claro&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#color-de-texto-text-","title":"Color de Texto (<code>text-*</code>)","text":"<p>Define el color del texto:</p> <pre><code>&lt;p class=\"text-red-600\"&gt;Texto rojo&lt;/p&gt;\n&lt;p class=\"text-gray-800\"&gt;Texto gris oscuro&lt;/p&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#tamanos-y-dimensiones","title":"Tama\u00f1os y Dimensiones","text":""},{"location":"tutorials/course2/p3/#ancho-y-alto-w-h-","title":"Ancho y Alto (<code>w-*</code>, <code>h-*</code>)","text":"<p>Controla el tama\u00f1o de los elementos:</p> <pre><code>&lt;div class=\"w-64 h-32 bg-blue-500\"&gt;Caja de 256px x 128px&lt;/div&gt;\n&lt;div class=\"w-full h-16 bg-green-500\"&gt;Ancho completo&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p3/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un archivo <code>src/prueba.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Prueba Tailwind&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;div class=\"max-w-md mx-auto bg-white p-6 rounded-lg shadow-lg\"&gt;\n    &lt;h1 class=\"text-2xl font-bold text-blue-600 mb-4\"&gt;Bienvenido&lt;/h1&gt;\n    &lt;p class=\"text-gray-700 mb-4\"&gt;Este es un ejemplo de Tailwind CSS.&lt;/p&gt;\n    &lt;button class=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"&gt;\n      Clic aqu\u00ed\n    &lt;/button&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Compila los estilos:</p> <pre><code>npm run build\n</code></pre> <p>Sirve el archivo con <code>live-server</code>:</p> <pre><code>live-server src\n</code></pre>"},{"location":"tutorials/course2/p4/","title":"Dise\u00f1o Responsivo","text":"<p>Tailwind CSS hace que crear dise\u00f1os responsivos sea sencillo gracias a sus prefijos para puntos de ruptura (breakpoints). En esta secci\u00f3n, aprender\u00e1s c\u00f3mo usar estas clases para adaptar tu dise\u00f1o a diferentes tama\u00f1os de pantalla.</p>"},{"location":"tutorials/course2/p4/#puntos-de-ruptura-breakpoints","title":"Puntos de Ruptura (Breakpoints)","text":"<p>Tailwind define puntos de ruptura por defecto:</p> <ul> <li><code>sm</code>: \u2265576px</li> <li><code>md</code>: \u2265768px</li> <li><code>lg</code>: \u22651024px</li> <li><code>xl</code>: \u22651280px</li> <li><code>2xl</code>: \u22651536px</li> </ul> <p>Usa prefijos como <code>sm:</code>, <code>md:</code>, etc., para aplicar estilos condicionalmente.</p>"},{"location":"tutorials/course2/p4/#ejemplo-tamano-de-texto-responsivo","title":"Ejemplo: Tama\u00f1o de Texto Responsivo","text":"<pre><code>&lt;p class=\"text-base sm:text-lg md:text-xl lg:text-2xl\"&gt;\n  Este texto cambia de tama\u00f1o seg\u00fan el tama\u00f1o de la pantalla.\n&lt;/p&gt;\n</code></pre> <ul> <li><code>text-base</code>: Tama\u00f1o base (16px).</li> <li><code>sm:text-lg</code>: Tama\u00f1o m\u00e1s grande en pantallas \u2265576px.</li> <li><code>md:text-xl</code>: M\u00e1s grande en \u2265768px.</li> <li><code>lg:text-2xl</code>: A\u00fan m\u00e1s grande en \u22651024px.</li> </ul>"},{"location":"tutorials/course2/p4/#diseno-de-rejilla-grid","title":"Dise\u00f1o de Rejilla (Grid)","text":"<p>Crea layouts con el sistema de rejilla:</p> <pre><code>&lt;div class=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4\"&gt;\n  &lt;div class=\"bg-blue-500 p-4\"&gt;Elemento 1&lt;/div&gt;\n  &lt;div class=\"bg-blue-500 p-4\"&gt;Elemento 2&lt;/div&gt;\n  &lt;div class=\"bg-blue-500 p-4\"&gt;Elemento 3&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li><code>grid-cols-1</code>: Una columna en pantallas peque\u00f1as.</li> <li><code>sm:grid-cols-2</code>: Dos columnas en \u2265576px.</li> <li><code>md:grid-cols-3</code>: Tres columnas en \u2265768px.</li> </ul>"},{"location":"tutorials/course2/p4/#flexbox-responsivo","title":"Flexbox Responsivo","text":"<p>Usa Flexbox para layouts flexibles:</p> <pre><code>&lt;div class=\"flex flex-col md:flex-row gap-4\"&gt;\n  &lt;div class=\"bg-green-500 p-4\"&gt;Caja 1&lt;/div&gt;\n  &lt;div class=\"bg-green-500 p-4\"&gt;Caja 2&lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <ul> <li><code>flex-col</code>: Apila elementos verticalmente por defecto.</li> <li><code>md:flex-row</code>: Cambia a horizontal en \u2265768px.</li> </ul>"},{"location":"tutorials/course2/p4/#ocultarmostrar-elementos","title":"Ocultar/Mostrar Elementos","text":"<p>Controla la visibilidad por breakpoint:</p> <pre><code>&lt;div class=\"hidden md:block\"&gt;Visible solo en pantallas \u2265768px&lt;/div&gt;\n&lt;div class=\"block md:hidden\"&gt;Visible solo en pantallas &lt;768px&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p4/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea <code>src/responsivo.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Dise\u00f1o Responsivo&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;div class=\"max-w-4xl mx-auto\"&gt;\n    &lt;h1 class=\"text-2xl md:text-3xl lg:text-4xl font-bold mb-6\"&gt;Dise\u00f1o Responsivo&lt;/h1&gt;\n    &lt;div class=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4\"&gt;\n      &lt;div class=\"bg-blue-500 text-white p-4 rounded\"&gt;Caja 1&lt;/div&gt;\n      &lt;div class=\"bg-blue-500 text-white p-4 rounded\"&gt;Caja 2&lt;/div&gt;\n      &lt;div class=\"bg-blue-500 text-white p-4 rounded\"&gt;Caja 3&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;p class=\"mt-4 text-sm md:text-base hidden lg:block\"&gt;\n      Este texto solo aparece en pantallas grandes (\u22651024px).\n    &lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Compila y sirve:</p> <pre><code>npm run build\nlive-server src\n</code></pre>"},{"location":"tutorials/course2/p5/","title":"Personalizaci\u00f3n de Estilos","text":"<p>Tailwind CSS es altamente personalizable a trav\u00e9s de su archivo de configuraci\u00f3n <code>tailwind.config.js</code>. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo personalizar colores, tipograf\u00edas, puntos de ruptura y m\u00e1s.</p>"},{"location":"tutorials/course2/p5/#estructura-de-tailwindconfigjs","title":"Estructura de <code>tailwind.config.js</code>","text":"<p>El archivo de configuraci\u00f3n permite extender o sobrescribir los valores predeterminados de Tailwind:</p> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        primary: \"#1D4ED8\",\n        secondary: \"#10B981\",\n      },\n      fontSize: {\n        \"xxl\": \"3rem\",\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre> <ul> <li><code>extend</code>: A\u00f1ade nuevos valores sin sobrescribir los existentes.</li> <li><code>colors</code>: Define colores personalizados.</li> <li><code>fontSize</code>: A\u00f1ade nuevos tama\u00f1os de fuente.</li> </ul>"},{"location":"tutorials/course2/p5/#personalizar-colores","title":"Personalizar Colores","text":"<p>A\u00f1ade colores personalizados:</p> <pre><code>theme: {\n  extend: {\n    colors: {\n      brand: {\n        100: \"#E0F2FE\",\n        500: \"#2563EB\",\n        900: \"#1E3A8A\",\n      },\n    },\n  },\n}\n</code></pre> <p>Uso en HTML:</p> <pre><code>&lt;div class=\"bg-brand-500 text-brand-100 p-4\"&gt;\n  Fondo y texto con colores personalizados\n&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p5/#personalizar-puntos-de-ruptura","title":"Personalizar Puntos de Ruptura","text":"<p>Modifica o a\u00f1ade breakpoints:</p> <pre><code>theme: {\n  screens: {\n    xs: \"400px\",\n    sm: \"640px\",\n    md: \"768px\",\n    lg: \"1024px\",\n  },\n}\n</code></pre> <p>Uso:</p> <pre><code>&lt;p class=\"text-base xs:text-lg sm:text-xl\"&gt;Texto responsivo&lt;/p&gt;\n</code></pre>"},{"location":"tutorials/course2/p5/#anadir-fuentes-personalizadas","title":"A\u00f1adir Fuentes Personalizadas","text":"<p>Define fuentes personalizadas:</p> <pre><code>theme: {\n  extend: {\n    fontFamily: {\n      sans: [\"Inter\", \"sans-serif\"],\n      display: [\"Poppins\", \"sans-serif\"],\n    },\n  },\n}\n</code></pre> <p>Incluye las fuentes en <code>src/input.css</code>:</p> <pre><code>@import url(\"https://fonts.googleapis.com/css2?family=Inter:wght@400;700&amp;family=Poppins:wght@600&amp;display=swap\");\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <p>Uso:</p> <pre><code>&lt;h1 class=\"font-display text-3xl\"&gt;T\u00edtulo con Poppins&lt;/h1&gt;\n&lt;p class=\"font-sans\"&gt;P\u00e1rrafo con Inter&lt;/p&gt;\n</code></pre>"},{"location":"tutorials/course2/p5/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<ol> <li>Actualiza <code>tailwind.config.js</code>:</li> </ol> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        brand: {\n          500: \"#8B5CF6\",\n        },\n      },\n      fontFamily: {\n        custom: [\"Roboto\", \"sans-serif\"],\n      },\n    },\n  },\n  plugins: [],\n};\n</code></pre> <ol> <li>Crea <code>src/personalizado.html</code>:</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Personalizaci\u00f3n&lt;/title&gt;\n  &lt;link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&amp;display=swap\" rel=\"stylesheet\"&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;div class=\"max-w-md mx-auto\"&gt;\n    &lt;h1 class=\"font-custom text-3xl text-brand-500\"&gt;Estilo Personalizado&lt;/h1&gt;\n    &lt;p class=\"font-custom mt-4\"&gt;Usando Roboto y un color personalizado.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Compila y sirve:</li> </ol> <pre><code>npm run build\nlive-server src\n</code></pre>"},{"location":"tutorials/course2/p6/","title":"Uso de Componentes","text":"<p>Aunque Tailwind fomenta el uso de clases utilitarias, puedes crear componentes reutilizables para mantener el c\u00f3digo limpio. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo estructurar componentes en Tailwind CSS.</p>"},{"location":"tutorials/course2/p6/#definir-componentes","title":"Definir Componentes","text":"<p>Usa la directiva <code>@layer components</code> en tu archivo CSS para definir componentes:</p> <pre><code>/* src/input.css */\n@tailwind base;\n@tailwind components;\n\n@layer components {\n  .btn-primary {\n    @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600;\n  }\n  .card {\n    @apply bg-white p-6 rounded-lg shadow-lg;\n  }\n}\n\n@tailwind utilities;\n</code></pre> <p>Uso en HTML:</p> <pre><code>&lt;div class=\"card\"&gt;\n  &lt;h2 class=\"text-xl font-bold\"&gt;T\u00edtulo&lt;/h2&gt;\n  &lt;p class=\"mt-2\"&gt;Contenido de la tarjeta.&lt;/p&gt;\n  &lt;button class=\"btn-primary mt-4\"&gt;Acci\u00f3n&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p6/#componentes-con-javascript","title":"Componentes con JavaScript","text":"<p>En frameworks como React, puedes crear componentes reutilizables:</p> <pre><code>// src/components/Button.jsx\nexport default function Button({ children }) {\n  return (\n    &lt;button className=\"bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"&gt;\n      {children}\n    &lt;/button&gt;\n  );\n}\n</code></pre> <p>Uso:</p> <pre><code>&lt;Button&gt;Clic aqu\u00ed&lt;/Button&gt;\n</code></pre>"},{"location":"tutorials/course2/p6/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<ol> <li>Actualiza <code>src/input.css</code>:</li> </ol> <pre><code>@tailwind base;\n@tailwind components;\n\n@layer components {\n  .btn-primary {\n    @apply bg-purple-500 text-white px-4 py-2 rounded hover:bg-purple-600;\n  }\n  .card {\n    @apply bg-white p-6 rounded-lg shadow-md max-w-sm mx-auto;\n  }\n}\n\n@tailwind utilities;\n</code></pre> <ol> <li>Crea <code>src/componentes.html</code>:</li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Componentes&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;h2 class=\"text-xl font-bold\"&gt;Tarjeta de Ejemplo&lt;/h2&gt;\n    &lt;p class=\"mt-2 text-gray-600\"&gt;Este es un componente reutilizable.&lt;/p&gt;\n    &lt;button class=\"btn-primary mt-4\"&gt;Clic aqu\u00ed&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Compila y sirve:</li> </ol> <pre><code>npm run build\nlive-server src\n</code></pre>"},{"location":"tutorials/course2/p7/","title":"Integraci\u00f3n con Frameworks","text":"<p>Tailwind CSS se integra f\u00e1cilmente con frameworks como React, Next.js, Vue y otros. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo usar Tailwind con Next.js (App Router), uno de los frameworks m\u00e1s populares.</p>"},{"location":"tutorials/course2/p7/#tailwind-con-nextjs","title":"Tailwind con Next.js","text":"<ol> <li>Crea un proyecto Next.js con Tailwind:</li> </ol> <pre><code>npx create-next-app@latest mi-app-next --typescript --tailwind --eslint --app --src-dir --import-alias \"@/*\"\n</code></pre> <p>Selecciona:    - TypeScript: S\u00ed    - Tailwind CSS: S\u00ed    - App Router: S\u00ed</p> <ol> <li>Verifica la configuraci\u00f3n:</li> </ol> <p>El proyecto incluye <code>tailwind.config.js</code> y <code>src/app/globals.css</code> con las directivas de Tailwind:</p> <pre><code>/* src/app/globals.css */\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n</code></pre> <pre><code>/* tailwind.config.js */\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    \"./src/pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./src/app/**/*.{js,ts,jsx,tsx,mdx}\",\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre> <ol> <li>Crea una p\u00e1gina en <code>src/app/page.tsx</code>:</li> </ol> <pre><code>export default function Home() {\n  return (\n    &lt;main className=\"flex min-h-screen flex-col items-center justify-center p-24 bg-gray-100\"&gt;\n      &lt;h1 className=\"text-4xl font-bold text-blue-600\"&gt;Bienvenido a Next.js con Tailwind&lt;/h1&gt;\n      &lt;p className=\"mt-4 text-lg text-gray-700\"&gt;Este es un ejemplo sencillo.&lt;/p&gt;\n      &lt;button className=\"mt-6 bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600\"&gt;\n        Clic aqu\u00ed\n      &lt;/button&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre> <ol> <li>Ejecuta el proyecto:</li> </ol> <pre><code>cd mi-app-next\nnpm run dev\n</code></pre> <p>Abre <code>http://localhost:3000</code> para ver el resultado.</p>"},{"location":"tutorials/course2/p7/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea un componente reutilizable en <code>src/components/Card.tsx</code>:</p> <pre><code>interface CardProps {\n  title: string;\n  content: string;\n}\n\nexport default function Card({ title, content }: CardProps) {\n  return (\n    &lt;div className=\"bg-white p-6 rounded-lg shadow-md max-w-sm\"&gt;\n      &lt;h2 className=\"text-xl font-bold text-gray-800\"&gt;{title}&lt;/h2&gt;\n      &lt;p className=\"mt-2 text-gray-600\"&gt;{content}&lt;/p&gt;\n    &lt;/div&gt;\n  );\n}\n</code></pre> <p>\u00dasalo en <code>src/app/page.tsx</code>:</p> <pre><code>import Card from \"@/components/Card\";\n\nexport default function Home() {\n  return (\n    &lt;main className=\"flex min-h-screen flex-col items-center justify-center p-24 bg-gray-100\"&gt;\n      &lt;Card\n        title=\"Tarjeta de Ejemplo\"\n        content=\"Este es un componente reutilizable creado con Tailwind y Next.js.\"\n      /&gt;\n    &lt;/main&gt;\n  );\n}\n</code></pre>"},{"location":"tutorials/course2/p8/","title":"Optimizaci\u00f3n y Producci\u00f3n","text":"<p>Tailwind CSS genera archivos CSS grandes si no se optimiza, ya que incluye todas las clases utilitarias. En esta secci\u00f3n, aprender\u00e1s c\u00f3mo optimizar Tailwind para producci\u00f3n y reducir el tama\u00f1o del CSS.</p>"},{"location":"tutorials/course2/p8/#purga-de-estilos-no-utilizados","title":"Purga de Estilos No Utilizados","text":"<p>Tailwind usa PurgeCSS (ahora integrado como <code>content</code> en <code>tailwind.config.js</code>) para eliminar clases no utilizadas.</p> <ol> <li>Configura <code>content</code> en <code>tailwind.config.js</code>:</li> </ol> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre> <p>Esto asegura que solo las clases usadas en los archivos especificados se incluyan en el CSS final.</p> <ol> <li>Compila para producci\u00f3n:</li> </ol> <p>Usa el modo producci\u00f3n para minimizar el CSS:</p> <pre><code>NODE_ENV=production npx tailwindcss -i ./src/input.css -o ./dist/output.css --minify\n</code></pre> <p>El flag <code>--minify</code> reduce a\u00fan m\u00e1s el tama\u00f1o del archivo.</p>"},{"location":"tutorials/course2/p8/#usar-jit-just-in-time-mode","title":"Usar JIT (Just-In-Time) Mode","text":"<p>El modo JIT genera clases din\u00e1micamente, reduciendo el tama\u00f1o del CSS y mejorando el tiempo de compilaci\u00f3n. Est\u00e1 habilitado por defecto desde Tailwind 3.0, pero verifica <code>tailwind.config.js</code>:</p> <pre><code>/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  mode: \"jit\",\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n};\n</code></pre>"},{"location":"tutorials/course2/p8/#comprimir-el-css","title":"Comprimir el CSS","text":"<p>Usa herramientas como <code>cssnano</code> para comprimir a\u00fan m\u00e1s el CSS:</p> <ol> <li>Instala <code>postcss</code> y <code>cssnano</code>:</li> </ol> <pre><code>npm install -D postcss cssnano\n</code></pre> <ol> <li>Crea <code>postcss.config.js</code>:</li> </ol> <pre><code>module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n    cssnano: process.env.NODE_ENV === \"production\" ? {} : false,\n  },\n};\n</code></pre> <ol> <li>Actualiza el script de compilaci\u00f3n en <code>package.json</code>:</li> </ol> <pre><code>{\n  \"scripts\": {\n    \"build\": \"NODE_ENV=production postcss src/input.css -o dist/output.css\",\n    \"watch\": \"postcss src/input.css -o dist/output.css --watch\"\n  }\n}\n</code></pre> <ol> <li>Compila:</li> </ol> <pre><code>npm run build\n</code></pre>"},{"location":"tutorials/course2/p8/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<ol> <li> <p>Configura <code>tailwind.config.js</code> y <code>postcss.config.js</code> como arriba.</p> </li> <li> <p>Crea <code>src/optimizado.html</code>:</p> </li> </ol> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Optimizaci\u00f3n&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;div class=\"max-w-md mx-auto bg-white p-6 rounded-lg shadow-md\"&gt;\n    &lt;h1 class=\"text-2xl font-bold text-blue-600\"&gt;Optimizado&lt;/h1&gt;\n    &lt;p class=\"mt-4\"&gt;CSS optimizado para producci\u00f3n.&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <ol> <li>Compila para producci\u00f3n:</li> </ol> <pre><code>npm run build\n</code></pre> <ol> <li>Sirve:</li> </ol> <pre><code>live-server src\n</code></pre>"},{"location":"tutorials/course2/p9/","title":"Buenas Pr\u00e1cticas en Tailwind CSS","text":"<p>Adoptar buenas pr\u00e1cticas en Tailwind CSS mejora la mantenibilidad y escalabilidad de tus proyectos. Aqu\u00ed tienes recomendaciones clave.</p>"},{"location":"tutorials/course2/p9/#1-usa-componentes-para-reutilizacion","title":"1. Usa Componentes para Reutilizaci\u00f3n","text":"<p>Define componentes para evitar repetir clases:</p> <pre><code>/* src/input.css */\n@layer components {\n  .btn-primary {\n    @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600;\n  }\n}\n</code></pre> <pre><code>&lt;button class=\"btn-primary\"&gt;Clic aqu\u00ed&lt;/button&gt;\n</code></pre>"},{"location":"tutorials/course2/p9/#2-manten-el-html-legible","title":"2. Mant\u00e9n el HTML Legible","text":"<p>Evita clases excesivas en una sola l\u00ednea:</p> <pre><code>&lt;!-- Mal --&gt;\n&lt;div class=\"bg-blue-500 text-white px-4 py-2 rounded-lg shadow-md hover:bg-blue-600 text-center font-bold mt-4\"&gt;\n  Bot\u00f3n\n&lt;/div&gt;\n\n&lt;!-- Bien --&gt;\n&lt;div class=\"btn-primary\"&gt;\n  Bot\u00f3n\n&lt;/div&gt;\n</code></pre>"},{"location":"tutorials/course2/p9/#3-aprovecha-el-modo-jit","title":"3. Aprovecha el Modo JIT","text":"<p>Habilita JIT para compilaciones m\u00e1s r\u00e1pidas y CSS m\u00e1s peque\u00f1o:</p> <pre><code>module.exports = {\n  mode: \"jit\",\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n};\n</code></pre>"},{"location":"tutorials/course2/p9/#4-usa-prefijos-para-claridad","title":"4. Usa Prefijos para Claridad","text":"<p>Aplica prefijos como <code>hover:</code>, <code>focus:</code>, o <code>sm:</code> de manera consistente:</p> <pre><code>&lt;button class=\"bg-blue-500 hover:bg-blue-600 focus:ring-2 focus:ring-blue-300\"&gt;\n  Clic aqu\u00ed\n&lt;/button&gt;\n</code></pre>"},{"location":"tutorials/course2/p9/#5-optimiza-para-produccion","title":"5. Optimiza para Producci\u00f3n","text":"<p>Siempre purga los estilos no usados en producci\u00f3n:</p> <pre><code>module.exports = {\n  content: [\"./src/**/*.{html,js,ts,jsx,tsx}\"],\n};\n</code></pre>"},{"location":"tutorials/course2/p9/#ejemplo-practico","title":"Ejemplo Pr\u00e1ctico","text":"<p>Crea <code>src/practicas.html</code>:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"UTF-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n  &lt;title&gt;Buenas Pr\u00e1cticas&lt;/title&gt;\n  &lt;link href=\"/dist/output.css\" rel=\"stylesheet\"&gt;\n&lt;/head&gt;\n&lt;body class=\"bg-gray-100 p-8\"&gt;\n  &lt;div class=\"card\"&gt;\n    &lt;h2 class=\"text-xl font-bold\"&gt;Tarjeta Optimizada&lt;/h2&gt;\n    &lt;p class=\"mt-2 text-gray-600\"&gt;Usando componentes y clases claras.&lt;/p&gt;\n    &lt;button class=\"btn-primary mt-4\"&gt;Acci\u00f3n&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Actualiza <code>src/input.css</code>:</p> <pre><code>@tailwind base;\n@tailwind components;\n\n@layer components {\n  .card {\n    @apply bg-white p-6 rounded-lg shadow-md max-w-sm mx-auto;\n  }\n  .btn-primary {\n    @apply bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600;\n  }\n}\n\n@tailwind utilities;\n</code></pre> <p>Compila y sirve:</p> <pre><code>npm run build\nlive-server src\n</code></pre>"}]}